{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v6.json", "dbt_version": "1.2.1", "generated_at": "2022-11-29T03:26:32.206414Z", "invocation_id": "3cdf510c-9cf3-40b3-bf73-64144d394cd0", "env": {}, "project_id": "fea94e465a9f3d6e8764c732c9d8b7e4", "user_id": "221cbce4-e540-4766-bb16-eed2d6092c13", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.polygon_models.bronze__blocks": {"raw_sql": "{{ config (\n    materialized = 'view'\n) }}\n\nSELECT\n    record_id,\n    offset_id,\n    block_id,\n    block_timestamp,\n    network,\n    chain_id,\n    tx_count,\n    header,\n    ingested_at,\n    _inserted_timestamp\nFROM\n    {{ source(\n        'prod',\n        'polygon_blocks'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.polygon_models.prod.polygon_blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "POLYGON_DEV", "schema": "bronze", "fqn": ["polygon_models", "bronze", "bronze__blocks"], "unique_id": "model.polygon_models.bronze__blocks", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "bronze/bronze__blocks.sql", "original_file_path": "models/bronze/bronze__blocks.sql", "name": "bronze__blocks", "alias": "blocks", "checksum": {"name": "sha256", "checksum": "4e704da4e34acd908cae9faa8b9662c845d03f5b0de8fb4754aec86bb2551265"}, "tags": [], "refs": [], "sources": [["prod", "polygon_blocks"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/bronze/bronze__blocks.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1669126488.719753, "compiled_sql": "\n\nSELECT\n    record_id,\n    offset_id,\n    block_id,\n    block_timestamp,\n    network,\n    chain_id,\n    tx_count,\n    header,\n    ingested_at,\n    _inserted_timestamp\nFROM\n    chainwalkers.prod.polygon_blocks", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.bronze.blocks"}, "model.polygon_models.bronze__transactions": {"raw_sql": "{{ config (\n    materialized = 'view'\n) }}\n\nSELECT\n    record_id,\n    tx_id,\n    tx_block_index,\n    offset_id,\n    block_id,\n    block_timestamp,\n    network,\n    chain_id,\n    tx,\n    ingested_at,\n    _inserted_timestamp\nFROM\n    {{ source(\n        'prod',\n        'polygon_txs'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.polygon_models.prod.polygon_txs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "POLYGON_DEV", "schema": "bronze", "fqn": ["polygon_models", "bronze", "bronze__transactions"], "unique_id": "model.polygon_models.bronze__transactions", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "bronze/bronze__transactions.sql", "original_file_path": "models/bronze/bronze__transactions.sql", "name": "bronze__transactions", "alias": "transactions", "checksum": {"name": "sha256", "checksum": "1697d27d55ed14668951a3839085da327857ec11a14265e9f18b6264b367d5ea"}, "tags": [], "refs": [], "sources": [["prod", "polygon_txs"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/bronze/bronze__transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1669126488.7343738, "compiled_sql": "\n\nSELECT\n    record_id,\n    tx_id,\n    tx_block_index,\n    offset_id,\n    block_id,\n    block_timestamp,\n    network,\n    chain_id,\n    tx,\n    ingested_at,\n    _inserted_timestamp\nFROM\n    chainwalkers.prod.polygon_txs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.bronze.transactions"}, "model.polygon_models.silver__transactions": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"tx_hash\",\n    cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base_table AS (\n\n    SELECT\n        block_timestamp,\n        block_id :: INTEGER AS block_number,\n        tx_id :: STRING AS tx_hash,\n        udf_hex_to_int(\n            tx :nonce :: STRING\n        ) :: INTEGER AS nonce,\n        tx_block_index :: INTEGER AS POSITION,\n        tx :from :: STRING AS from_address,\n        tx :to :: STRING AS to_address,\n        (\n            udf_hex_to_int(\n                tx :value :: STRING\n            ) / pow(\n                10,\n                18\n            )\n        ) :: INTEGER AS matic_value,\n        tx :blockHash :: STRING AS block_hash,\n        (\n            udf_hex_to_int(\n                tx :gasPrice :: STRING\n            ) / pow(\n                10,\n                9\n            )\n        ) :: FLOAT AS gas_price,\n        udf_hex_to_int(\n            tx :gas :: STRING\n        ) :: INTEGER AS gas_limit,\n        tx :input :: STRING AS DATA,\n        CASE\n            WHEN tx :receipt :status :: STRING = '0x1' THEN 'SUCCESS'\n            ELSE 'FAIL'\n        END AS status,\n        udf_hex_to_int(\n            tx :receipt :gasUsed :: STRING\n        ) :: INTEGER AS gas_used,\n        udf_hex_to_int(\n            tx :receipt :cumulativeGasUsed :: STRING\n        ) :: INTEGER AS cumulative_Gas_Used,\n        udf_hex_to_int(\n            tx :receipt :effectiveGasPrice :: STRING\n        ) :: INTEGER AS effective_Gas_Price,\n        (\n            gas_price * gas_used\n        ) / pow(\n            10,\n            9\n        ) AS tx_fee,\n        ingested_at :: TIMESTAMP AS ingested_at,\n        OBJECT_DELETE(\n            tx,\n            'traces'\n        ) AS tx_json,\n        _inserted_timestamp :: TIMESTAMP AS _inserted_timestamp\n    FROM\n        {{ ref('bronze__transactions') }}\n\n{% if is_incremental() %}\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            {{ this }}\n    )\n{% endif %}\n)\nSELECT\n    block_timestamp,\n    block_number,\n    tx_hash,\n    nonce,\n    POSITION,\n    SUBSTR(\n        DATA,\n        1,\n        10\n    ) AS origin_function_signature,\n    from_address,\n    to_address,\n    matic_value,\n    block_hash,\n    gas_price,\n    gas_limit,\n    DATA AS input_data,\n    status,\n    gas_used,\n    cumulative_Gas_Used,\n    effective_Gas_Price,\n    tx_fee,\n    ingested_at,\n    _inserted_timestamp,\n    tx_json\nFROM\n    base_table qualify(ROW_NUMBER() over(PARTITION BY tx_hash\nORDER BY\n    _inserted_timestamp DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.polygon_models.bronze__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "tx_hash", "on_schema_change": "ignore", "grants": {}, "cluster_by": ["block_timestamp::DATE"], "post-hook": [], "pre-hook": []}, "database": "POLYGON_DEV", "schema": "silver", "fqn": ["polygon_models", "silver", "silver__transactions"], "unique_id": "model.polygon_models.silver__transactions", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "silver/silver__transactions.sql", "original_file_path": "models/silver/silver__transactions.sql", "name": "silver__transactions", "alias": "transactions", "checksum": {"name": "sha256", "checksum": "dbbee96d09e9db1f0d1c52eceee5234b7cbef4c6aeca4c9e821cdaf9b5a81171"}, "tags": [], "refs": [["bronze__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NONCE": {"name": "NONCE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POSITION": {"name": "POSITION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MATIC_VALUE": {"name": "MATIC_VALUE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_HASH": {"name": "BLOCK_HASH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_PRICE": {"name": "GAS_PRICE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_LIMIT": {"name": "GAS_LIMIT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INPUT_DATA": {"name": "INPUT_DATA", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "STATUS": {"name": "STATUS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_USED": {"name": "GAS_USED", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUMULATIVE_GAS_USED": {"name": "CUMULATIVE_GAS_USED", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_FEE": {"name": "TX_FEE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EFFECTIVE_GAS_PRICE": {"name": "EFFECTIVE_GAS_PRICE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_JSON": {"name": "TX_JSON", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INGESTED_AT": {"name": "INGESTED_AT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "polygon_models://models/silver/silver__transactions.yml", "compiled_path": "target/compiled/polygon_models/models/silver/silver__transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "tx_hash", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1669126489.521292, "compiled_sql": "\n\nWITH base_table AS (\n\n    SELECT\n        block_timestamp,\n        block_id :: INTEGER AS block_number,\n        tx_id :: STRING AS tx_hash,\n        udf_hex_to_int(\n            tx :nonce :: STRING\n        ) :: INTEGER AS nonce,\n        tx_block_index :: INTEGER AS POSITION,\n        tx :from :: STRING AS from_address,\n        tx :to :: STRING AS to_address,\n        (\n            udf_hex_to_int(\n                tx :value :: STRING\n            ) / pow(\n                10,\n                18\n            )\n        ) :: INTEGER AS matic_value,\n        tx :blockHash :: STRING AS block_hash,\n        (\n            udf_hex_to_int(\n                tx :gasPrice :: STRING\n            ) / pow(\n                10,\n                9\n            )\n        ) :: FLOAT AS gas_price,\n        udf_hex_to_int(\n            tx :gas :: STRING\n        ) :: INTEGER AS gas_limit,\n        tx :input :: STRING AS DATA,\n        CASE\n            WHEN tx :receipt :status :: STRING = '0x1' THEN 'SUCCESS'\n            ELSE 'FAIL'\n        END AS status,\n        udf_hex_to_int(\n            tx :receipt :gasUsed :: STRING\n        ) :: INTEGER AS gas_used,\n        udf_hex_to_int(\n            tx :receipt :cumulativeGasUsed :: STRING\n        ) :: INTEGER AS cumulative_Gas_Used,\n        udf_hex_to_int(\n            tx :receipt :effectiveGasPrice :: STRING\n        ) :: INTEGER AS effective_Gas_Price,\n        (\n            gas_price * gas_used\n        ) / pow(\n            10,\n            9\n        ) AS tx_fee,\n        ingested_at :: TIMESTAMP AS ingested_at,\n        OBJECT_DELETE(\n            tx,\n            'traces'\n        ) AS tx_json,\n        _inserted_timestamp :: TIMESTAMP AS _inserted_timestamp\n    FROM\n        POLYGON_DEV.bronze.transactions\n\n\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            POLYGON_DEV.silver.transactions\n    )\n\n)\nSELECT\n    block_timestamp,\n    block_number,\n    tx_hash,\n    nonce,\n    POSITION,\n    SUBSTR(\n        DATA,\n        1,\n        10\n    ) AS origin_function_signature,\n    from_address,\n    to_address,\n    matic_value,\n    block_hash,\n    gas_price,\n    gas_limit,\n    DATA AS input_data,\n    status,\n    gas_used,\n    cumulative_Gas_Used,\n    effective_Gas_Price,\n    tx_fee,\n    ingested_at,\n    _inserted_timestamp,\n    tx_json\nFROM\n    base_table qualify(ROW_NUMBER() over(PARTITION BY tx_hash\nORDER BY\n    _inserted_timestamp DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.silver.transactions"}, "model.polygon_models.silver__transfers": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = '_log_id',\n    cluster_by = ['_inserted_timestamp::DATE']\n) }}\n\nWITH logs AS (\n\n    SELECT\n        _log_id,\n        block_number,\n        block_timestamp,\n        tx_hash,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address,\n        event_name,\n        event_index,\n        event_inputs,\n        topics,\n        DATA,\n        _inserted_timestamp :: TIMESTAMP AS _inserted_timestamp\n    FROM\n        {{ ref('silver__logs') }}\n    WHERE\n        tx_status = 'SUCCESS'\n\n{% if is_incremental() %}\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(\n            _inserted_timestamp\n        )\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\ntransfers AS (\n    SELECT\n        _log_id,\n        block_number,\n        tx_hash,\n        block_timestamp,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address :: STRING AS contract_address,\n        event_inputs :from :: STRING AS from_address,\n        event_inputs :to :: STRING AS to_address,\n        event_inputs :value :: FLOAT AS raw_amount,\n        event_index,\n        _inserted_timestamp\n    FROM\n        logs\n    WHERE\n        event_name = 'Transfer'\n        AND raw_amount IS NOT NULL\n),\nfind_missing_events AS (\n    SELECT\n        _log_id,\n        block_number,\n        tx_hash,\n        block_timestamp,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address :: STRING AS contract_address,\n        CONCAT('0x', SUBSTR(topics [1], 27, 40)) :: STRING AS from_address,\n        CONCAT('0x', SUBSTR(topics [2], 27, 40)) :: STRING AS to_address,\n        COALESCE(udf_hex_to_int(topics [3] :: STRING), udf_hex_to_int(SUBSTR(DATA, 3, 64))) :: FLOAT AS raw_amount,\n        event_index,\n        _inserted_timestamp\n    FROM\n        logs\n    WHERE\n        event_name IS NULL\n        AND contract_address IN (\n            SELECT\n                DISTINCT contract_address\n            FROM\n                transfers\n        )\n        AND topics [0] :: STRING = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'\n),\nall_transfers AS (\n    SELECT\n        _log_id,\n        tx_hash,\n        block_number,\n        block_timestamp,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address,\n        from_address,\n        to_address,\n        raw_amount,\n        event_index,\n        _inserted_timestamp\n    FROM\n        transfers\n    UNION ALL\n    SELECT\n        _log_id,\n        tx_hash,\n        block_number,\n        block_timestamp,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address,\n        from_address,\n        to_address,\n        raw_amount,\n        event_index,\n        _inserted_timestamp\n    FROM\n        find_missing_events\n)\nSELECT\n    _log_id,\n    block_number,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    block_timestamp,\n    contract_address,\n    from_address,\n    to_address,\n    raw_amount,\n    _inserted_timestamp,\n    event_index\nFROM\n    all_transfers qualify(ROW_NUMBER() over(PARTITION BY _log_id\nORDER BY\n    _inserted_timestamp DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.polygon_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_log_id", "on_schema_change": "ignore", "grants": {}, "cluster_by": ["_inserted_timestamp::DATE"], "post-hook": [], "pre-hook": []}, "database": "POLYGON_DEV", "schema": "silver", "fqn": ["polygon_models", "silver", "silver__transfers"], "unique_id": "model.polygon_models.silver__transfers", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "silver/silver__transfers.sql", "original_file_path": "models/silver/silver__transfers.sql", "name": "silver__transfers", "alias": "transfers", "checksum": {"name": "sha256", "checksum": "2e196e01b50e68f7394eac7dde767d4c13754121c892e681fb75ed17b78b0810"}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_ADDRESS": {"name": "CONTRACT_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RAW_AMOUNT": {"name": "RAW_AMOUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_LOG_ID": {"name": "_LOG_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FROM_ADDRESS": {"name": "ORIGIN_FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_TO_ADDRESS": {"name": "ORIGIN_TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "polygon_models://models/silver/silver__transfers.yml", "compiled_path": "target/compiled/polygon_models/models/silver/silver__transfers.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "_log_id", "cluster_by": ["_inserted_timestamp::DATE"]}, "created_at": 1669126489.69874, "compiled_sql": "\n\nWITH logs AS (\n\n    SELECT\n        _log_id,\n        block_number,\n        block_timestamp,\n        tx_hash,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address,\n        event_name,\n        event_index,\n        event_inputs,\n        topics,\n        DATA,\n        _inserted_timestamp :: TIMESTAMP AS _inserted_timestamp\n    FROM\n        POLYGON_DEV.silver.logs\n    WHERE\n        tx_status = 'SUCCESS'\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(\n            _inserted_timestamp\n        )\n    FROM\n        POLYGON_DEV.silver.transfers\n)\n\n),\ntransfers AS (\n    SELECT\n        _log_id,\n        block_number,\n        tx_hash,\n        block_timestamp,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address :: STRING AS contract_address,\n        event_inputs :from :: STRING AS from_address,\n        event_inputs :to :: STRING AS to_address,\n        event_inputs :value :: FLOAT AS raw_amount,\n        event_index,\n        _inserted_timestamp\n    FROM\n        logs\n    WHERE\n        event_name = 'Transfer'\n        AND raw_amount IS NOT NULL\n),\nfind_missing_events AS (\n    SELECT\n        _log_id,\n        block_number,\n        tx_hash,\n        block_timestamp,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address :: STRING AS contract_address,\n        CONCAT('0x', SUBSTR(topics [1], 27, 40)) :: STRING AS from_address,\n        CONCAT('0x', SUBSTR(topics [2], 27, 40)) :: STRING AS to_address,\n        COALESCE(udf_hex_to_int(topics [3] :: STRING), udf_hex_to_int(SUBSTR(DATA, 3, 64))) :: FLOAT AS raw_amount,\n        event_index,\n        _inserted_timestamp\n    FROM\n        logs\n    WHERE\n        event_name IS NULL\n        AND contract_address IN (\n            SELECT\n                DISTINCT contract_address\n            FROM\n                transfers\n        )\n        AND topics [0] :: STRING = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'\n),\nall_transfers AS (\n    SELECT\n        _log_id,\n        tx_hash,\n        block_number,\n        block_timestamp,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address,\n        from_address,\n        to_address,\n        raw_amount,\n        event_index,\n        _inserted_timestamp\n    FROM\n        transfers\n    UNION ALL\n    SELECT\n        _log_id,\n        tx_hash,\n        block_number,\n        block_timestamp,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address,\n        from_address,\n        to_address,\n        raw_amount,\n        event_index,\n        _inserted_timestamp\n    FROM\n        find_missing_events\n)\nSELECT\n    _log_id,\n    block_number,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    block_timestamp,\n    contract_address,\n    from_address,\n    to_address,\n    raw_amount,\n    _inserted_timestamp,\n    event_index\nFROM\n    all_transfers qualify(ROW_NUMBER() over(PARTITION BY _log_id\nORDER BY\n    _inserted_timestamp DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.silver.transfers"}, "model.polygon_models.silver__logs": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"_log_id\",\n    cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base_txs AS (\n\n    SELECT\n        record_id,\n        tx_id,\n        tx_block_index,\n        offset_id,\n        block_id,\n        block_timestamp,\n        network,\n        chain_id,\n        tx,\n        ingested_at,\n        _inserted_timestamp\n    FROM\n        {{ ref('bronze__transactions') }}\n\n{% if is_incremental() %}\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            {{ this }}\n    )\n{% endif %}\n),\nlogs_raw AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id AS tx_hash,\n        tx :receipt :logs AS full_logs,\n        ingested_at :: TIMESTAMP AS ingested_at,\n        _inserted_timestamp :: TIMESTAMP AS _inserted_timestamp,\n        CASE\n            WHEN tx :receipt :status :: STRING = '0x1' THEN 'SUCCESS'\n            ELSE 'FAIL'\n        END AS tx_status,\n        SUBSTR(\n            tx :input :: STRING,\n            1,\n            10\n        ) AS origin_function_signature,\n        tx :from :: STRING AS origin_from_address,\n        tx :to :: STRING AS origin_to_address\n    FROM\n        base_txs\n),\nlogs AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_hash,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        tx_status,\n        ingested_at,\n        _inserted_timestamp,\n        udf_hex_to_int(\n            VALUE :logIndex :: STRING\n        ) :: INTEGER AS event_index,\n        VALUE :address :: STRING AS contract_address,\n        VALUE :decoded :contractName :: STRING AS contract_name,\n        VALUE :decoded :eventName :: STRING AS event_name,\n        VALUE :decoded :inputs :: OBJECT AS event_inputs,\n        VALUE :topics AS topics,\n        VALUE :data :: STRING AS DATA,\n        VALUE :removed :: STRING AS event_removed\n    FROM\n        logs_raw,\n        LATERAL FLATTEN (\n            input => full_logs\n        )\n)\nSELECT\n    concat_ws(\n        '-',\n        tx_hash,\n        event_index\n    ) AS _log_id,\n    block_id AS block_number,\n    block_timestamp,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    ingested_at,\n    event_index,\n    contract_address,\n    contract_name,\n    event_name,\n    event_inputs,\n    topics,\n    DATA,\n    event_removed,\n    tx_status,\n    _inserted_timestamp\nFROM\n    logs qualify(ROW_NUMBER() over(PARTITION BY _log_id\nORDER BY\n    _inserted_timestamp DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.polygon_models.bronze__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_log_id", "on_schema_change": "ignore", "grants": {}, "cluster_by": ["block_timestamp::DATE"], "post-hook": [], "pre-hook": []}, "database": "POLYGON_DEV", "schema": "silver", "fqn": ["polygon_models", "silver", "silver__logs"], "unique_id": "model.polygon_models.silver__logs", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "silver/silver__logs.sql", "original_file_path": "models/silver/silver__logs.sql", "name": "silver__logs", "alias": "logs", "checksum": {"name": "sha256", "checksum": "ef2145524e201a5d15d38f4ad65b748a34e8ef70af0ea282c6a60acc8119ecdd"}, "tags": [], "refs": [["bronze__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_INDEX": {"name": "EVENT_INDEX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_ADDRESS": {"name": "CONTRACT_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_NAME": {"name": "EVENT_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_INPUTS": {"name": "EVENT_INPUTS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOPICS": {"name": "TOPICS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DATA": {"name": "DATA", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_REMOVED": {"name": "EVENT_REMOVED", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_LOG_ID": {"name": "_LOG_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FROM_ADDRESS": {"name": "ORIGIN_FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_TO_ADDRESS": {"name": "ORIGIN_TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "polygon_models://models/silver/silver__logs.yml", "compiled_path": "target/compiled/polygon_models/models/silver/silver__logs.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "_log_id", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1669126489.119803, "compiled_sql": "\n\nWITH base_txs AS (\n\n    SELECT\n        record_id,\n        tx_id,\n        tx_block_index,\n        offset_id,\n        block_id,\n        block_timestamp,\n        network,\n        chain_id,\n        tx,\n        ingested_at,\n        _inserted_timestamp\n    FROM\n        POLYGON_DEV.bronze.transactions\n\n\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            POLYGON_DEV.silver.logs\n    )\n\n),\nlogs_raw AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id AS tx_hash,\n        tx :receipt :logs AS full_logs,\n        ingested_at :: TIMESTAMP AS ingested_at,\n        _inserted_timestamp :: TIMESTAMP AS _inserted_timestamp,\n        CASE\n            WHEN tx :receipt :status :: STRING = '0x1' THEN 'SUCCESS'\n            ELSE 'FAIL'\n        END AS tx_status,\n        SUBSTR(\n            tx :input :: STRING,\n            1,\n            10\n        ) AS origin_function_signature,\n        tx :from :: STRING AS origin_from_address,\n        tx :to :: STRING AS origin_to_address\n    FROM\n        base_txs\n),\nlogs AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_hash,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        tx_status,\n        ingested_at,\n        _inserted_timestamp,\n        udf_hex_to_int(\n            VALUE :logIndex :: STRING\n        ) :: INTEGER AS event_index,\n        VALUE :address :: STRING AS contract_address,\n        VALUE :decoded :contractName :: STRING AS contract_name,\n        VALUE :decoded :eventName :: STRING AS event_name,\n        VALUE :decoded :inputs :: OBJECT AS event_inputs,\n        VALUE :topics AS topics,\n        VALUE :data :: STRING AS DATA,\n        VALUE :removed :: STRING AS event_removed\n    FROM\n        logs_raw,\n        LATERAL FLATTEN (\n            input => full_logs\n        )\n)\nSELECT\n    concat_ws(\n        '-',\n        tx_hash,\n        event_index\n    ) AS _log_id,\n    block_id AS block_number,\n    block_timestamp,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    ingested_at,\n    event_index,\n    contract_address,\n    contract_name,\n    event_name,\n    event_inputs,\n    topics,\n    DATA,\n    event_removed,\n    tx_status,\n    _inserted_timestamp\nFROM\n    logs qualify(ROW_NUMBER() over(PARTITION BY _log_id\nORDER BY\n    _inserted_timestamp DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.silver.logs"}, "model.polygon_models.silver__blocks": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"block_number\",\n    cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH base_tables AS (\n\n    SELECT\n        record_id,\n        offset_id,\n        block_id,\n        block_timestamp,\n        network,\n        chain_id,\n        tx_count,\n        header,\n        ingested_at,\n        _inserted_timestamp\n    FROM\n        {{ ref('bronze__blocks') }}\n\n{% if is_incremental() %}\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            {{ this }}\n    )\n{% endif %}\n)\nSELECT\n    block_id :: INTEGER AS block_number,\n    block_timestamp :: TIMESTAMP AS block_timestamp,\n    network :: STRING AS network,\n    chain_id :: STRING AS blockchain,\n    tx_count :: INTEGER AS tx_count,\n    udf_hex_to_int(\n        header :difficulty :: STRING\n    ) :: INTEGER AS difficulty,\n    udf_hex_to_int(\n        header :totalDifficulty :: STRING\n    ) :: INTEGER AS total_difficulty,\n    header: extraData :: STRING AS extra_data,\n    udf_hex_to_int(\n        header :gasLimit :: STRING\n    ) :: INTEGER AS gas_limit,\n    udf_hex_to_int(\n        header :gasUsed :: STRING\n    ) :: INTEGER AS gas_used,\n    header: \"hash\" :: STRING AS HASH,\n    header: parentHash :: STRING AS parent_hash,\n    header: miner :: STRING AS miner,\n    header: nonce :: STRING AS nonce,\n    header: receiptsRoot :: STRING AS receipts_root,\n    header: sha3Uncles :: STRING AS sha3_uncles,\n    udf_hex_to_int(\n        header: \"size\" :: STRING\n    ) :: INTEGER AS SIZE,\n    CASE\n        WHEN header: uncles [1] :: STRING IS NOT NULL THEN CONCAT(\n            header: uncles [0] :: STRING,\n            ', ',\n            header: uncles [1] :: STRING\n        )\n        ELSE header: uncles [0] :: STRING\n    END AS uncle_blocks,\n    ingested_at :: TIMESTAMP AS ingested_at,\n    header :: OBJECT AS block_header_json,\n    _inserted_timestamp :: TIMESTAMP AS _inserted_timestamp\nFROM\n    base_tables qualify(ROW_NUMBER() over(PARTITION BY block_id\nORDER BY\n    _inserted_timestamp DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.polygon_models.bronze__blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "block_number", "on_schema_change": "ignore", "grants": {}, "cluster_by": ["block_timestamp::DATE"], "post-hook": [], "pre-hook": []}, "database": "POLYGON_DEV", "schema": "silver", "fqn": ["polygon_models", "silver", "silver__blocks"], "unique_id": "model.polygon_models.silver__blocks", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "silver/silver__blocks.sql", "original_file_path": "models/silver/silver__blocks.sql", "name": "silver__blocks", "alias": "blocks", "checksum": {"name": "sha256", "checksum": "66d9683fd095cca48fc3c6fc35fd8abdc0545a8f92e9885f0b2ab6845396cda0"}, "tags": [], "refs": [["bronze__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NETWORK": {"name": "NETWORK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_COUNT": {"name": "TX_COUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIFFICULTY": {"name": "DIFFICULTY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_DIFFICULTY": {"name": "TOTAL_DIFFICULTY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EXTRA_DATA": {"name": "EXTRA_DATA", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_LIMIT": {"name": "GAS_LIMIT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_USED": {"name": "GAS_USED", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "HASH": {"name": "HASH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PARENT_HASH": {"name": "PARENT_HASH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINER": {"name": "MINER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NONCE": {"name": "NONCE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECEIPTS_ROOT": {"name": "RECEIPTS_ROOT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SHA3_UNCLES": {"name": "SHA3_UNCLES", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SIZE": {"name": "SIZE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_HEADER_JSON": {"name": "BLOCK_HEADER_JSON", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "polygon_models://models/silver/silver__blocks.yml", "compiled_path": "target/compiled/polygon_models/models/silver/silver__blocks.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "block_number", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1669126489.370775, "compiled_sql": "\n\nWITH base_tables AS (\n\n    SELECT\n        record_id,\n        offset_id,\n        block_id,\n        block_timestamp,\n        network,\n        chain_id,\n        tx_count,\n        header,\n        ingested_at,\n        _inserted_timestamp\n    FROM\n        POLYGON_DEV.bronze.blocks\n\n\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            POLYGON_DEV.silver.blocks\n    )\n\n)\nSELECT\n    block_id :: INTEGER AS block_number,\n    block_timestamp :: TIMESTAMP AS block_timestamp,\n    network :: STRING AS network,\n    chain_id :: STRING AS blockchain,\n    tx_count :: INTEGER AS tx_count,\n    udf_hex_to_int(\n        header :difficulty :: STRING\n    ) :: INTEGER AS difficulty,\n    udf_hex_to_int(\n        header :totalDifficulty :: STRING\n    ) :: INTEGER AS total_difficulty,\n    header: extraData :: STRING AS extra_data,\n    udf_hex_to_int(\n        header :gasLimit :: STRING\n    ) :: INTEGER AS gas_limit,\n    udf_hex_to_int(\n        header :gasUsed :: STRING\n    ) :: INTEGER AS gas_used,\n    header: \"hash\" :: STRING AS HASH,\n    header: parentHash :: STRING AS parent_hash,\n    header: miner :: STRING AS miner,\n    header: nonce :: STRING AS nonce,\n    header: receiptsRoot :: STRING AS receipts_root,\n    header: sha3Uncles :: STRING AS sha3_uncles,\n    udf_hex_to_int(\n        header: \"size\" :: STRING\n    ) :: INTEGER AS SIZE,\n    CASE\n        WHEN header: uncles [1] :: STRING IS NOT NULL THEN CONCAT(\n            header: uncles [0] :: STRING,\n            ', ',\n            header: uncles [1] :: STRING\n        )\n        ELSE header: uncles [0] :: STRING\n    END AS uncle_blocks,\n    ingested_at :: TIMESTAMP AS ingested_at,\n    header :: OBJECT AS block_header_json,\n    _inserted_timestamp :: TIMESTAMP AS _inserted_timestamp\nFROM\n    base_tables qualify(ROW_NUMBER() over(PARTITION BY block_id\nORDER BY\n    _inserted_timestamp DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.silver.blocks"}, "model.polygon_models.silver__traces": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = '_call_id',\n    cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH new_blocks AS (\n\n    SELECT\n        block_id\n    FROM\n        {{ ref('bronze__blocks') }}\n    WHERE\n        tx_count > 0\n\n{% if is_incremental() %}\nAND block_id NOT IN (\n    SELECT\n        DISTINCT block_number\n    FROM\n        {{ this }}\n)\n{% endif %}\nORDER BY\n    _inserted_timestamp DESC\nLIMIT\n    500000\n), traces_txs AS (\n    SELECT\n        *\n    FROM\n        {{ ref('bronze__transactions') }}\n    WHERE\n        block_id IN (\n            SELECT\n                block_id\n            FROM\n                new_blocks\n        ) qualify(ROW_NUMBER() over(PARTITION BY tx_id\n    ORDER BY\n        _inserted_timestamp DESC)) = 1\n),\nbase_table AS (\n    SELECT\n        CASE\n            WHEN POSITION(\n                '.',\n                path :: STRING\n            ) > 0 THEN REPLACE(\n                REPLACE(\n                    path :: STRING,\n                    SUBSTR(path :: STRING, len(path :: STRING) - POSITION('.', REVERSE(path :: STRING)) + 1, POSITION('.', REVERSE(path :: STRING))),\n                    ''\n                ),\n                '.',\n                '__'\n            )\n            ELSE '__'\n        END AS id,\n        OBJECT_AGG(\n            DISTINCT key,\n            VALUE\n        ) AS DATA,\n        txs.tx_id AS tx_hash,\n        txs.block_id AS block_number,\n        txs.block_timestamp AS block_timestamp,\n        CASE\n            WHEN txs.tx :receipt :status :: STRING = '0x1' THEN 'SUCCESS'\n            ELSE 'FAIL'\n        END AS tx_status,\n        txs.ingested_at AS ingested_at,\n        txs._inserted_timestamp AS _inserted_timestamp\n    FROM\n        traces_txs txs,\n        TABLE(\n            FLATTEN(\n                input => PARSE_JSON(\n                    txs.tx :traces\n                ),\n                recursive => TRUE\n            )\n        ) f\n    WHERE\n        f.index IS NULL\n        AND f.key != 'calls'\n    GROUP BY\n        tx_hash,\n        id,\n        block_number,\n        block_timestamp,\n        ingested_at,\n        _inserted_timestamp,\n        tx_status\n),\nflattened_traces AS (\n    SELECT\n        DATA :from :: STRING AS from_address,\n        udf_hex_to_int(\n            DATA :gas :: STRING\n        ) AS gas,\n        udf_hex_to_int(\n            DATA :gasUsed :: STRING\n        ) AS gas_used,\n        DATA :input :: STRING AS input,\n        DATA :output :: STRING AS output,\n        DATA :time :: STRING AS TIME,\n        DATA :to :: STRING AS to_address,\n        DATA :type :: STRING AS TYPE,\n        CASE\n            WHEN DATA :type :: STRING = 'CALL' THEN udf_hex_to_int(\n                DATA :value :: STRING\n            ) / pow(\n                10,\n                18\n            )\n            ELSE 0\n        END AS matic_value,\n        CASE\n            WHEN id = '__' THEN CONCAT(\n                DATA :type :: STRING,\n                '_ORIGIN'\n            )\n            ELSE CONCAT(\n                DATA :type :: STRING,\n                '_',\n                REPLACE(\n                    REPLACE(REPLACE(REPLACE(id, 'calls', ''), '[', ''), ']', ''),\n                    '__',\n                    '_'\n                )\n            )\n        END AS identifier,\n        concat_ws(\n            '-',\n            tx_hash,\n            identifier\n        ) AS _call_id,\n        SPLIT(\n            identifier,\n            '_'\n        ) AS id_split,\n        ARRAY_SLICE(id_split, 1, ARRAY_SIZE(id_split)) AS levels,\n        ARRAY_TO_STRING(\n            levels,\n            '_'\n        ) AS LEVEL,\n        CASE\n            WHEN ARRAY_SIZE(levels) = 1\n            AND levels [0] :: STRING = 'ORIGIN' THEN NULL\n            WHEN ARRAY_SIZE(levels) = 1 THEN 'ORIGIN'\n            ELSE ARRAY_TO_STRING(ARRAY_SLICE(levels, 0, ARRAY_SIZE(levels) -1), '_')END AS parent_level,\n            COUNT(parent_level) over (\n                PARTITION BY tx_hash,\n                parent_level\n            ) AS sub_traces,*\n            FROM\n                base_table\n        ),\n        group_sub_traces AS (\n            SELECT\n                tx_hash,\n                parent_level,\n                sub_traces\n            FROM\n                flattened_traces\n            GROUP BY\n                tx_hash,\n                parent_level,\n                sub_traces\n        ),\n        FINAL AS (\n            SELECT\n                flattened_traces.tx_hash AS tx_hash,\n                flattened_traces.block_number AS block_number,\n                flattened_traces.block_timestamp AS block_timestamp,\n                flattened_traces.from_address AS from_address,\n                flattened_traces.to_address AS to_address,\n                flattened_traces.matic_value AS matic_value,\n                flattened_traces.gas AS gas,\n                flattened_traces.gas_used AS gas_used,\n                flattened_traces.input AS input,\n                flattened_traces.output AS output,\n                flattened_traces.type AS TYPE,\n                flattened_traces.identifier AS identifier,\n                flattened_traces._call_id AS _call_id,\n                flattened_traces.ingested_at AS ingested_at,\n                flattened_traces.data AS DATA,\n                flattened_traces.tx_status AS tx_status,\n                group_sub_traces.sub_traces AS sub_traces,\n                flattened_traces._inserted_timestamp AS _inserted_timestamp\n            FROM\n                flattened_traces\n                LEFT OUTER JOIN group_sub_traces\n                ON flattened_traces.tx_hash = group_sub_traces.tx_hash\n                AND flattened_traces.level = group_sub_traces.parent_level\n        )\n    SELECT\n        tx_hash,\n        block_number,\n        block_timestamp,\n        from_address,\n        to_address,\n        matic_value,\n        gas,\n        gas_used,\n        input,\n        output,\n        TYPE,\n        identifier,\n        _call_id,\n        ingested_at,\n        _inserted_timestamp,\n        DATA,\n        tx_status,\n        sub_traces\n    FROM\n        FINAL\n    WHERE\n        identifier IS NOT NULL qualify(ROW_NUMBER() over(PARTITION BY _call_id\n    ORDER BY\n        _inserted_timestamp DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.polygon_models.bronze__blocks", "model.polygon_models.bronze__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_call_id", "on_schema_change": "ignore", "grants": {}, "cluster_by": ["block_timestamp::DATE"], "post-hook": [], "pre-hook": []}, "database": "POLYGON_DEV", "schema": "silver", "fqn": ["polygon_models", "silver", "silver__traces"], "unique_id": "model.polygon_models.silver__traces", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "silver/silver__traces.sql", "original_file_path": "models/silver/silver__traces.sql", "name": "silver__traces", "alias": "traces", "checksum": {"name": "sha256", "checksum": "ad84256f0487fc156783339931f3a31e78ff00908ab6e429d29c9320a1f61cc7"}, "tags": [], "refs": [["bronze__blocks"], ["bronze__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IDENTIFIER": {"name": "IDENTIFIER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MATIC_VALUE": {"name": "MATIC_VALUE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS": {"name": "GAS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_USED": {"name": "GAS_USED", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "polygon_models://models/silver/silver__traces.yml", "compiled_path": "target/compiled/polygon_models/models/silver/silver__traces.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "_call_id", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1669126489.296695, "compiled_sql": "\n\nWITH new_blocks AS (\n\n    SELECT\n        block_id\n    FROM\n        POLYGON_DEV.bronze.blocks\n    WHERE\n        tx_count > 0\n\n\nAND block_id NOT IN (\n    SELECT\n        DISTINCT block_number\n    FROM\n        POLYGON_DEV.silver.traces\n)\n\nORDER BY\n    _inserted_timestamp DESC\nLIMIT\n    500000\n), traces_txs AS (\n    SELECT\n        *\n    FROM\n        POLYGON_DEV.bronze.transactions\n    WHERE\n        block_id IN (\n            SELECT\n                block_id\n            FROM\n                new_blocks\n        ) qualify(ROW_NUMBER() over(PARTITION BY tx_id\n    ORDER BY\n        _inserted_timestamp DESC)) = 1\n),\nbase_table AS (\n    SELECT\n        CASE\n            WHEN POSITION(\n                '.',\n                path :: STRING\n            ) > 0 THEN REPLACE(\n                REPLACE(\n                    path :: STRING,\n                    SUBSTR(path :: STRING, len(path :: STRING) - POSITION('.', REVERSE(path :: STRING)) + 1, POSITION('.', REVERSE(path :: STRING))),\n                    ''\n                ),\n                '.',\n                '__'\n            )\n            ELSE '__'\n        END AS id,\n        OBJECT_AGG(\n            DISTINCT key,\n            VALUE\n        ) AS DATA,\n        txs.tx_id AS tx_hash,\n        txs.block_id AS block_number,\n        txs.block_timestamp AS block_timestamp,\n        CASE\n            WHEN txs.tx :receipt :status :: STRING = '0x1' THEN 'SUCCESS'\n            ELSE 'FAIL'\n        END AS tx_status,\n        txs.ingested_at AS ingested_at,\n        txs._inserted_timestamp AS _inserted_timestamp\n    FROM\n        traces_txs txs,\n        TABLE(\n            FLATTEN(\n                input => PARSE_JSON(\n                    txs.tx :traces\n                ),\n                recursive => TRUE\n            )\n        ) f\n    WHERE\n        f.index IS NULL\n        AND f.key != 'calls'\n    GROUP BY\n        tx_hash,\n        id,\n        block_number,\n        block_timestamp,\n        ingested_at,\n        _inserted_timestamp,\n        tx_status\n),\nflattened_traces AS (\n    SELECT\n        DATA :from :: STRING AS from_address,\n        udf_hex_to_int(\n            DATA :gas :: STRING\n        ) AS gas,\n        udf_hex_to_int(\n            DATA :gasUsed :: STRING\n        ) AS gas_used,\n        DATA :input :: STRING AS input,\n        DATA :output :: STRING AS output,\n        DATA :time :: STRING AS TIME,\n        DATA :to :: STRING AS to_address,\n        DATA :type :: STRING AS TYPE,\n        CASE\n            WHEN DATA :type :: STRING = 'CALL' THEN udf_hex_to_int(\n                DATA :value :: STRING\n            ) / pow(\n                10,\n                18\n            )\n            ELSE 0\n        END AS matic_value,\n        CASE\n            WHEN id = '__' THEN CONCAT(\n                DATA :type :: STRING,\n                '_ORIGIN'\n            )\n            ELSE CONCAT(\n                DATA :type :: STRING,\n                '_',\n                REPLACE(\n                    REPLACE(REPLACE(REPLACE(id, 'calls', ''), '[', ''), ']', ''),\n                    '__',\n                    '_'\n                )\n            )\n        END AS identifier,\n        concat_ws(\n            '-',\n            tx_hash,\n            identifier\n        ) AS _call_id,\n        SPLIT(\n            identifier,\n            '_'\n        ) AS id_split,\n        ARRAY_SLICE(id_split, 1, ARRAY_SIZE(id_split)) AS levels,\n        ARRAY_TO_STRING(\n            levels,\n            '_'\n        ) AS LEVEL,\n        CASE\n            WHEN ARRAY_SIZE(levels) = 1\n            AND levels [0] :: STRING = 'ORIGIN' THEN NULL\n            WHEN ARRAY_SIZE(levels) = 1 THEN 'ORIGIN'\n            ELSE ARRAY_TO_STRING(ARRAY_SLICE(levels, 0, ARRAY_SIZE(levels) -1), '_')END AS parent_level,\n            COUNT(parent_level) over (\n                PARTITION BY tx_hash,\n                parent_level\n            ) AS sub_traces,*\n            FROM\n                base_table\n        ),\n        group_sub_traces AS (\n            SELECT\n                tx_hash,\n                parent_level,\n                sub_traces\n            FROM\n                flattened_traces\n            GROUP BY\n                tx_hash,\n                parent_level,\n                sub_traces\n        ),\n        FINAL AS (\n            SELECT\n                flattened_traces.tx_hash AS tx_hash,\n                flattened_traces.block_number AS block_number,\n                flattened_traces.block_timestamp AS block_timestamp,\n                flattened_traces.from_address AS from_address,\n                flattened_traces.to_address AS to_address,\n                flattened_traces.matic_value AS matic_value,\n                flattened_traces.gas AS gas,\n                flattened_traces.gas_used AS gas_used,\n                flattened_traces.input AS input,\n                flattened_traces.output AS output,\n                flattened_traces.type AS TYPE,\n                flattened_traces.identifier AS identifier,\n                flattened_traces._call_id AS _call_id,\n                flattened_traces.ingested_at AS ingested_at,\n                flattened_traces.data AS DATA,\n                flattened_traces.tx_status AS tx_status,\n                group_sub_traces.sub_traces AS sub_traces,\n                flattened_traces._inserted_timestamp AS _inserted_timestamp\n            FROM\n                flattened_traces\n                LEFT OUTER JOIN group_sub_traces\n                ON flattened_traces.tx_hash = group_sub_traces.tx_hash\n                AND flattened_traces.level = group_sub_traces.parent_level\n        )\n    SELECT\n        tx_hash,\n        block_number,\n        block_timestamp,\n        from_address,\n        to_address,\n        matic_value,\n        gas,\n        gas_used,\n        input,\n        output,\n        TYPE,\n        identifier,\n        _call_id,\n        ingested_at,\n        _inserted_timestamp,\n        DATA,\n        tx_status,\n        sub_traces\n    FROM\n        FINAL\n    WHERE\n        identifier IS NOT NULL qualify(ROW_NUMBER() over(PARTITION BY _call_id\n    ORDER BY\n        _inserted_timestamp DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.silver.traces"}, "model.polygon_models.streamline__complete_blocks": {"raw_sql": "{{ config (\n    materialized = \"incremental\",\n    unique_key = \"id\",\n    cluster_by = \"ROUND(block_number, -3)\",\n    merge_update_columns = [\"id\"]\n) }}\n\nWITH meta AS (\n\n    SELECT\n        last_modified,\n        file_name\n    FROM\n        TABLE(\n            information_schema.external_table_files(\n                table_name => '{{ source( \"bronze_streamline\", \"blocks\") }}'\n            )\n        ) A\n)\n\n{% if is_incremental() %},\nmax_date AS (\n    SELECT\n        COALESCE(MAX(_INSERTED_TIMESTAMP), '1970-01-01' :: DATE) max_INSERTED_TIMESTAMP\n    FROM\n        {{ this }})\n    {% endif %}\n    SELECT\n        {{ dbt_utils.surrogate_key(\n            ['block_number']\n        ) }} AS id,\n        block_number,\n        last_modified AS _inserted_timestamp\n    FROM\n        {{ source(\n            \"bronze_streamline\",\n            \"blocks\"\n        ) }}\n        JOIN meta b\n        ON b.file_name = metadata$filename\n\n{% if is_incremental() %}\nWHERE\n    b.last_modified > (\n        SELECT\n            max_INSERTED_TIMESTAMP\n        FROM\n            max_date\n    )\n{% endif %}\n\nqualify(ROW_NUMBER() over (PARTITION BY id\nORDER BY\n    _inserted_timestamp DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["source.polygon_models.bronze_streamline.blocks", "source.polygon_models.bronze_streamline.blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "grants": {}, "cluster_by": "ROUND(block_number, -3)", "merge_update_columns": ["id"], "post-hook": [], "pre-hook": []}, "database": "POLYGON_DEV", "schema": "streamline", "fqn": ["polygon_models", "silver", "streamline", "streamline__complete_blocks"], "unique_id": "model.polygon_models.streamline__complete_blocks", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "silver/streamline/streamline__complete_blocks.sql", "original_file_path": "models/silver/streamline/streamline__complete_blocks.sql", "name": "streamline__complete_blocks", "alias": "complete_blocks", "checksum": {"name": "sha256", "checksum": "34268d1acf63c40a4cd4416ae1e97cd605afd048e3462685ce82636c0ae9f731"}, "tags": [], "refs": [], "sources": [["bronze_streamline", "blocks"], ["bronze_streamline", "blocks"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/streamline/streamline__complete_blocks.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "id", "cluster_by": "ROUND(block_number, -3)", "merge_update_columns": ["id"]}, "created_at": 1669126488.7958, "compiled_sql": "\n\nWITH meta AS (\n\n    SELECT\n        last_modified,\n        file_name\n    FROM\n        TABLE(\n            information_schema.external_table_files(\n                table_name => 'streamline.POLYGON.blocks'\n            )\n        ) A\n)\n\n,\nmax_date AS (\n    SELECT\n        COALESCE(MAX(_INSERTED_TIMESTAMP), '1970-01-01' :: DATE) max_INSERTED_TIMESTAMP\n    FROM\n        POLYGON_DEV.streamline.complete_blocks)\n    \n    SELECT\n        md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n        block_number,\n        last_modified AS _inserted_timestamp\n    FROM\n        streamline.POLYGON.blocks\n        JOIN meta b\n        ON b.file_name = metadata$filename\n\n\nWHERE\n    b.last_modified > (\n        SELECT\n            max_INSERTED_TIMESTAMP\n        FROM\n            max_date\n    )\n\n\nqualify(ROW_NUMBER() over (PARTITION BY id\nORDER BY\n    _inserted_timestamp DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.streamline.complete_blocks"}, "model.polygon_models._max_block_by_date": {"raw_sql": "{{ config (\n    materialized = \"ephemeral\",\n    unique_key = \"block_number\",\n) }}\n\nWITH base AS (\n\n    SELECT\n        block_timestamp :: DATE AS block_date,\n        MAX(block_number) block_number\n    FROM\n        {{ ref(\"silver__blocks\") }}\n    GROUP BY\n        block_timestamp :: DATE\n)\nSELECT\n    block_date,\n    block_number\nFROM\n    base\nWHERE\n    block_date <> (\n        SELECT\n            MAX(block_date)\n        FROM\n            base\n    )", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.polygon_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "block_number", "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "POLYGON_DEV", "schema": "_max_block_by_date", "fqn": ["polygon_models", "silver", "streamline", "_max_block_by_date"], "unique_id": "model.polygon_models._max_block_by_date", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "silver/streamline/_max_block_by_date.sql", "original_file_path": "models/silver/streamline/_max_block_by_date.sql", "name": "_max_block_by_date", "alias": "", "checksum": {"name": "sha256", "checksum": "f9a8634e0cb137fa9013d3468172119413992e34cfb58022fcd30908bf81dd58"}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/streamline/_max_block_by_date.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral", "unique_key": "block_number"}, "created_at": 1669126488.8027892, "compiled_sql": "\n\nWITH base AS (\n\n    SELECT\n        block_timestamp :: DATE AS block_date,\n        MAX(block_number) block_number\n    FROM\n        POLYGON_DEV.silver.blocks\n    GROUP BY\n        block_timestamp :: DATE\n)\nSELECT\n    block_date,\n    block_number\nFROM\n    base\nWHERE\n    block_date <> (\n        SELECT\n            MAX(block_date)\n        FROM\n            base\n    )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.polygon_models.streamline__blocks": {"raw_sql": "{{ config (\n    materialized = \"view\",\n    tags = ['streamline_view']\n) }}\n\n\n{% if execute %}\n{% set height = run_query('SELECT streamline.udf_get_chainhead()') %}\n{% set block_height = height.columns[0].values()[0] %}\n{% else %}\n{% set block_height = 0 %}\n{% endif %}\n\nSELECT\n    height as block_number\nFROM\n    TABLE(streamline.udtf_get_base_table({{block_height}}))", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.run_query"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["streamline_view"], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "POLYGON_DEV", "schema": "streamline", "fqn": ["polygon_models", "silver", "streamline", "streamline__blocks"], "unique_id": "model.polygon_models.streamline__blocks", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "silver/streamline/streamline__blocks.sql", "original_file_path": "models/silver/streamline/streamline__blocks.sql", "name": "streamline__blocks", "alias": "blocks", "checksum": {"name": "sha256", "checksum": "8f8e10bd08b190eeb6956e2ea6587de01b2237cdf6209b09b1b977e6408f62ea"}, "tags": ["streamline_view"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/streamline/streamline__blocks.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "tags": ["streamline_view"]}, "created_at": 1669126488.8450692, "compiled_sql": "\n\n\n\n\n\n\n\nSELECT\n    height as block_number\nFROM\n    TABLE(streamline.udtf_get_base_table(36197860))", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.streamline.blocks"}, "model.polygon_models.core__fact_transactions": {"raw_sql": "{{ config(\n    materialized = 'view',\n    persist_docs ={ \"relation\": true,\n    \"columns\": true }\n) }}\n\nSELECT\n    block_number,\n    block_timestamp,\n    block_hash,\n    tx_hash,\n    nonce,\n    POSITION,\n    origin_function_signature,\n    from_address,\n    to_address,\n    matic_value,\n    tx_fee,\n    gas_price,\n    gas_limit,\n    gas_used,\n    cumulative_Gas_Used,\n    input_data,\n    status,\n    tx_json\nFROM\n    {{ ref('silver__transactions') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.polygon_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "POLYGON_DEV", "schema": "core", "fqn": ["polygon_models", "gold", "core__fact_transactions"], "unique_id": "model.polygon_models.core__fact_transactions", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "gold/core__fact_transactions.sql", "original_file_path": "models/gold/core__fact_transactions.sql", "name": "core__fact_transactions", "alias": "fact_transactions", "checksum": {"name": "sha256", "checksum": "f4e2f485acda5e408938b009f8e8dcc6f3b3e50198103103430c0c47aa71f7f2"}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "This table contains transaction level data for the Polygon Blockchain. Each transaction will have a unique transaction hash, along with transactions fees and a MATIC value transferred when applicable. Transactions may be native MATIC transfers or interactions with contract addresses. For more information, please see [The Ethereum Organization - Transactions](https://ethereum.org/en/developers/docs/transactions/)", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "Also known as block height. The block number, which indicates the length of the blockchain, increases after the addition of each new block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block was produced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_HASH": {"name": "BLOCK_HASH", "description": "Block hash is a unique 66-character identifier that is generate when a block is produced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "Transaction hash is a unique 66-character identifier that is generated when a transaction is executed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NONCE": {"name": "NONCE", "description": "The number of transactions sent from a given address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POSITION": {"name": "POSITION", "description": "The position of the transaction within the block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "The sending address of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "The receiving address of this transaction. This can be a contract address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MATIC_VALUE": {"name": "MATIC_VALUE", "description": "The value transacted in Matic.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_FEE": {"name": "TX_FEE", "description": "Amount paid to validate the transaction in MATIC.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_PRICE": {"name": "GAS_PRICE", "description": "Cost per unit of gas in Gwei.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_LIMIT": {"name": "GAS_LIMIT", "description": "Maximum amount of gas allocated for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_USED": {"name": "GAS_USED", "description": "Gas used by transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUMULATIVE_GAS_USED": {"name": "CUMULATIVE_GAS_USED", "description": "The total amount of gas used when this transaction was executed in the block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "STATUS": {"name": "STATUS", "description": "Status of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_JSON": {"name": "TX_JSON", "description": "This JSON column contains the transaction details, including event logs.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INPUT_DATA": {"name": "INPUT_DATA", "description": "This column contains additional data for this transaction, and is commonly used as part of a contract interaction or as a message to the recipient.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "The function signature of the contract call.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "polygon_models://models/gold/core__fact_transactions.yml", "compiled_path": "target/compiled/polygon_models/models/gold/core__fact_transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1669126489.899703, "compiled_sql": "\n\nSELECT\n    block_number,\n    block_timestamp,\n    block_hash,\n    tx_hash,\n    nonce,\n    POSITION,\n    origin_function_signature,\n    from_address,\n    to_address,\n    matic_value,\n    tx_fee,\n    gas_price,\n    gas_limit,\n    gas_used,\n    cumulative_Gas_Used,\n    input_data,\n    status,\n    tx_json\nFROM\n    POLYGON_DEV.silver.transactions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.core.fact_transactions"}, "model.polygon_models.core__fact_token_transfers": {"raw_sql": "{{ config(\n    materialized = 'view',\n    persist_docs ={ \"relation\": true,\n    \"columns\": true }\n) }}\n\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    contract_address,\n    from_address,\n    to_address,\n    raw_amount,\n    _log_id\nFROM\n    {{ ref('silver__transfers') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.polygon_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "POLYGON_DEV", "schema": "core", "fqn": ["polygon_models", "gold", "core__fact_token_transfers"], "unique_id": "model.polygon_models.core__fact_token_transfers", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "gold/core__fact_token_transfers.sql", "original_file_path": "models/gold/core__fact_token_transfers.sql", "name": "core__fact_token_transfers", "alias": "fact_token_transfers", "checksum": {"name": "sha256", "checksum": "d1b9ebe7f7db8936e39b0e05ebe220ae27c577a5749141169afb250f0f25c8c2"}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "This table contains events on the Polygon Blockchain with an event name of 'Transfer'. The contract address is the token transferred, and the raw amount field is the amount of tokens transferred. Please note this amount is not decimal adjusted. Decimal adjustments for a token address can be found in ```dim_contracts```. This table will not contain transfers of native ETH.", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "Also known as block height. The block number, which indicates the length of the blockchain, increases after the addition of each new block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block was produced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "Transaction hash is a unique 66-character identifier that is generated when a transaction is executed. This will not be unique in this table as a transaction could include multiple transfer events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_ADDRESS": {"name": "CONTRACT_ADDRESS", "description": "Contract address of the token being transferred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "The sending address of this transfer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "The receiving address of this transfer. This can be a contract address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RAW_AMOUNT": {"name": "RAW_AMOUNT", "description": "The amount of tokens transferred. This value is not decimal adjusted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_LOG_ID": {"name": "_LOG_ID", "description": "This is the primary key for this table. This is a concatenation of the transaction hash and the event index at which the transfer event occurred. This field can be used to find more details on the event within the ```fact_event_logs``` table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "The function signature of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FROM_ADDRESS": {"name": "ORIGIN_FROM_ADDRESS", "description": "The from address of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_TO_ADDRESS": {"name": "ORIGIN_TO_ADDRESS", "description": "The to address of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "polygon_models://models/gold/core__fact_token_transfers.yml", "compiled_path": "target/compiled/polygon_models/models/gold/core__fact_token_transfers.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1669126489.8800268, "compiled_sql": "\n\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    contract_address,\n    from_address,\n    to_address,\n    raw_amount,\n    _log_id\nFROM\n    POLYGON_DEV.silver.transfers", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.core.fact_token_transfers"}, "model.polygon_models.core__fact_traces": {"raw_sql": "{{ config(\n    materialized = 'view',\n    persist_docs ={ \"relation\": true,\n    \"columns\": true }\n) }}\n\nSELECT\n    tx_hash,\n    block_number,\n    block_timestamp,\n    from_address,\n    to_address,\n    matic_value,\n    gas,\n    gas_used,\n    input,\n    output,\n    TYPE,\n    identifier,\n    DATA,\n    tx_status,\n    sub_traces\nFROM\n    {{ ref('silver__traces') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.polygon_models.silver__traces"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "POLYGON_DEV", "schema": "core", "fqn": ["polygon_models", "gold", "core__fact_traces"], "unique_id": "model.polygon_models.core__fact_traces", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "gold/core__fact_traces.sql", "original_file_path": "models/gold/core__fact_traces.sql", "name": "core__fact_traces", "alias": "fact_traces", "checksum": {"name": "sha256", "checksum": "ed599b32ac5010b16047ba2e6478aaa368da7e4e63471db85e73c0e59eef57c5"}, "tags": [], "refs": [["silver__traces"]], "sources": [], "metrics": [], "description": "This table contains flattened trace data for internal contract calls on the Polygon Blockchain. Hex encoded fields can be decoded to integers by using `polygon.public.udf_hex_to_int()`.", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "The block number of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The block timestamp of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "The transaction hash for the trace. Please note, this is not necessarily unique in this table as transactions frequently have multiple traces.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "The sending address of this trace. This is not necessarily the from address of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "The receiving address of this trace. This is not necessarily the to address of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MATIC_VALUE": {"name": "MATIC_VALUE", "description": "The amount of MATIC transferred in this trace.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS": {"name": "GAS", "description": "The gas supplied for this trace.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_USED": {"name": "GAS_USED", "description": "The gas used for this trace.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INPUT": {"name": "INPUT", "description": "The input data for this trace.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "OUTPUT": {"name": "OUTPUT", "description": "The output data for this trace.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TYPE": {"name": "TYPE", "description": "The type of internal transaction. Common trace types are `CALL`, `DELEGATECALL`, and `STATICCALL`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IDENTIFIER": {"name": "IDENTIFIER", "description": "This field represents the position and type of the trace within the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DATA": {"name": "DATA", "description": "The raw JSON data for this trace.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_STATUS": {"name": "TX_STATUS", "description": "Status of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUB_TRACES": {"name": "SUB_TRACES", "description": "The amount of nested sub traces for this trace.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "polygon_models://models/gold/core__fact_traces.yml", "compiled_path": "target/compiled/polygon_models/models/gold/core__fact_traces.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1669126489.8938408, "compiled_sql": "\n\nSELECT\n    tx_hash,\n    block_number,\n    block_timestamp,\n    from_address,\n    to_address,\n    matic_value,\n    gas,\n    gas_used,\n    input,\n    output,\n    TYPE,\n    identifier,\n    DATA,\n    tx_status,\n    sub_traces\nFROM\n    POLYGON_DEV.silver.traces", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.core.fact_traces"}, "model.polygon_models.core__fact_blocks": {"raw_sql": "{{ config(\n    materialized = 'view',\n    persist_docs ={ \"relation\": true,\n    \"columns\": true }\n) }}\n\nSELECT\n    block_number,\n    block_timestamp,\n    network,\n    blockchain,\n    tx_count,\n    difficulty,\n    total_difficulty,\n    extra_data,\n    gas_limit,\n    gas_used,\n    HASH,\n    parent_hash,\n    receipts_root,\n    sha3_uncles,\n    SIZE,\n    uncle_blocks,\n    block_header_json\nFROM\n    {{ ref('silver__blocks') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.polygon_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "POLYGON_DEV", "schema": "core", "fqn": ["polygon_models", "gold", "core__fact_blocks"], "unique_id": "model.polygon_models.core__fact_blocks", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "gold/core__fact_blocks.sql", "original_file_path": "models/gold/core__fact_blocks.sql", "name": "core__fact_blocks", "alias": "fact_blocks", "checksum": {"name": "sha256", "checksum": "bdf35257c3e21a9ebb5e8a4efb260b2d8ffa821ba1d573ec7482347739449f33"}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "This table contains block level data for the Polygon Blockchain. This table can be used to analyze trends at a block level, for example gas fees vs. total transactions over time. For more information on EVM transactions, please see [Etherscan Resources](https://etherscan.io/directory/Learning_Resources/Ethereum) or [The Ethereum Organization](https://ethereum.org/en/developers/docs/blocks/)", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "Also known as block height. The block number, which indicates the length of the blockchain, increases after the addition of each new block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block was produced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NETWORK": {"name": "NETWORK", "description": "The network on the blockchain used by a transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The blockchain on which transactions are being confirmed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_COUNT": {"name": "TX_COUNT", "description": "Total number of transactions within a block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIFFICULTY": {"name": "DIFFICULTY", "description": "The effort required to mine the block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_DIFFICULTY": {"name": "TOTAL_DIFFICULTY", "description": "Total difficulty of the chain at a given block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EXTRA_DATA": {"name": "EXTRA_DATA", "description": "Any data included by the validator for a given block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_LIMIT": {"name": "GAS_LIMIT", "description": "Total gas limit provided by all transactions in the block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_USED": {"name": "GAS_USED", "description": "Total gas used in the block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "HASH": {"name": "HASH", "description": "The hash of the block header for a given block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PARENT_HASH": {"name": "PARENT_HASH", "description": "The hash of the block from which a given block is generated. Also known as the parent block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECEIPTS_ROOT": {"name": "RECEIPTS_ROOT", "description": "The root of the state trie.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SHA3_UNCLES": {"name": "SHA3_UNCLES", "description": "The mechanism which Ethereum Javascript RLP encodes an empty string.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SIZE": {"name": "SIZE", "description": "Block size, which is determined by a given block's gas limit.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "UNCLE_BLOCKS": {"name": "UNCLE_BLOCKS", "description": "Uncle blocks occur when two blocks are mined and broadcasted at the same time, with the same block number. The block validated across the most nodes will be added to the primary chain, and the other one becomes an uncle block. Miners do receive rewards for uncle blocks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_HEADER_JSON": {"name": "BLOCK_HEADER_JSON", "description": "This JSON column contains the block header details.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "polygon_models://models/gold/core__fact_blocks.yml", "compiled_path": "target/compiled/polygon_models/models/gold/core__fact_blocks.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1669126489.886485, "compiled_sql": "\n\nSELECT\n    block_number,\n    block_timestamp,\n    network,\n    blockchain,\n    tx_count,\n    difficulty,\n    total_difficulty,\n    extra_data,\n    gas_limit,\n    gas_used,\n    HASH,\n    parent_hash,\n    receipts_root,\n    sha3_uncles,\n    SIZE,\n    uncle_blocks,\n    block_header_json\nFROM\n    POLYGON_DEV.silver.blocks", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.core.fact_blocks"}, "model.polygon_models.core__fact_event_logs": {"raw_sql": "{{ config(\n    materialized = 'view',\n    persist_docs ={ \"relation\": true,\n    \"columns\": true }\n) }}\n\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    event_index,\n    contract_address,\n    contract_name,\n    event_name,\n    event_inputs,\n    topics,\n    DATA,\n    event_removed,\n    tx_status,\n    _log_id\nFROM\n    {{ ref('silver__logs') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.polygon_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "POLYGON_DEV", "schema": "core", "fqn": ["polygon_models", "gold", "core__fact_event_logs"], "unique_id": "model.polygon_models.core__fact_event_logs", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "gold/core__fact_event_logs.sql", "original_file_path": "models/gold/core__fact_event_logs.sql", "name": "core__fact_event_logs", "alias": "fact_event_logs", "checksum": {"name": "sha256", "checksum": "29f93e13a4b2e570184152057cd213f07e0553d98206a9675ae4adf94850513d"}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "This table contains flattened event logs from transactions on the Polygon Blockchain. Transactions may have multiple events, which are denoted by the event index for a transaction hash. Therefore, this table is unique on the combination of transaction hash and event index. Event names are decoded in this table where possible. The event inputs column will contain the log details in JSON format. Specific fields can be pulled from this column using the following sample format: ```event_inputs:<FILED_NAME>::<DATA TYPE> as <FIELD_NAME>```.", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "Also known as block height. The block number, which indicates the length of the blockchain, increases after the addition of each new block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block was produced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "Transaction hash is a unique 66-character identifier that is generated when a transaction is executed. This field will not be unique in this table, as a given transaction can include multiple events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_INDEX": {"name": "EVENT_INDEX", "description": "Event number within a transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_ADDRESS": {"name": "CONTRACT_ADDRESS", "description": "The address interacted with for a given event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_NAME": {"name": "CONTRACT_NAME", "description": "The name of the contract or token, where possible.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_NAME": {"name": "EVENT_NAME", "description": "The decoded event name for a given event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_INPUTS": {"name": "EVENT_INPUTS", "description": "The decoded event inputs for a given event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOPICS": {"name": "TOPICS", "description": "The un-decoded event input topics.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DATA": {"name": "DATA", "description": "The un-decoded event data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_REMOVED": {"name": "EVENT_REMOVED", "description": "Whether the event has been removed from the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_LOG_ID": {"name": "_LOG_ID", "description": "This is the primary key for this table. This is a concatenation of the transaction hash and the event index at which the event occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_STATUS": {"name": "TX_STATUS", "description": "Status of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "The function signature of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FROM_ADDRESS": {"name": "ORIGIN_FROM_ADDRESS", "description": "The from address of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_TO_ADDRESS": {"name": "ORIGIN_TO_ADDRESS", "description": "The to address of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "polygon_models://models/gold/core__fact_event_logs.yml", "compiled_path": "target/compiled/polygon_models/models/gold/core__fact_event_logs.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1669126489.997866, "compiled_sql": "\n\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    event_index,\n    contract_address,\n    contract_name,\n    event_name,\n    event_inputs,\n    topics,\n    DATA,\n    event_removed,\n    tx_status,\n    _log_id\nFROM\n    POLYGON_DEV.silver.logs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.core.fact_event_logs"}, "model.polygon_models.core__ez_matic_transfers": {"raw_sql": "{{ config(\n    materialized = 'view'\n) }}\n\nWITH matic_base AS (\n\n    SELECT\n        tx_hash,\n        block_number,\n        block_timestamp,\n        from_address,\n        to_address,\n        matic_value,\n        identifier,\n        _call_id,\n        ingested_at,\n        input\n    FROM\n        {{ ref('silver__traces') }}\n    WHERE\n        matic_value > 0\n        AND tx_status = 'SUCCESS'\n        AND gas_used IS NOT NULL\n),\nmatic_price AS (\n    SELECT\n        HOUR,\n        AVG(price) AS matic_price\n    FROM\n        {{ source(\n            'ethereum',\n            'fact_hourly_token_prices'\n        ) }}\n    WHERE\n        token_address = LOWER('0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0')\n    GROUP BY\n        HOUR\n)\nSELECT\n    A.tx_hash AS tx_hash,\n    A.block_number AS block_number,\n    A.block_timestamp AS block_timestamp,\n    A.identifier AS identifier,\n    tx.from_address AS origin_from_address,\n    tx.to_address AS origin_to_address,\n    tx.origin_function_signature AS origin_function_signature,\n    A.from_address AS matic_from_address,\n    A.to_address AS matic_to_address,\n    A.matic_value AS amount,\n    ROUND(\n        A.matic_value * matic_price,\n        2\n    ) AS amount_usd\nFROM\n    matic_base A\n    LEFT JOIN matic_price\n    ON DATE_TRUNC(\n        'hour',\n        block_timestamp\n    ) = HOUR\n    JOIN {{ ref('silver__transactions') }}\n    tx\n    ON A.tx_hash = tx.tx_hash", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.polygon_models.ethereum.fact_hourly_token_prices", "model.polygon_models.silver__traces", "model.polygon_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "POLYGON_DEV", "schema": "core", "fqn": ["polygon_models", "gold", "core__ez_matic_transfers"], "unique_id": "model.polygon_models.core__ez_matic_transfers", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "gold/core__ez_matic_transfers.sql", "original_file_path": "models/gold/core__ez_matic_transfers.sql", "name": "core__ez_matic_transfers", "alias": "ez_matic_transfers", "checksum": {"name": "sha256", "checksum": "a5217644e4d7e6e4d5a0ccd267e39cc95d53b0349eb46c8e3ec4b21a18a4e328"}, "tags": [], "refs": [["silver__traces"], ["silver__transactions"]], "sources": [["ethereum", "fact_hourly_token_prices"]], "metrics": [], "description": "This table contains all native Matic transfers, including equivalent USD amounts. The origin addresses correspond to the to and from addresses from the `fact_transactions` table. The `identifier` and `tx_hash` columns relate this table back to `fact_traces`, which contains more details on the transfers.", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "Also known as block height. The block number, which indicates the length of the blockchain, increases after the addition of each new block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block was produced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "Transaction hash is a unique 66-character identifier that is generated when a transaction is executed. This will not be unique in this table as a transaction could include multiple transfer events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETH_FROM_ADDRESS": {"name": "ETH_FROM_ADDRESS", "description": "The sending address of this transfer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETH_TO_ADDRESS": {"name": "ETH_TO_ADDRESS", "description": "The receiving address of this transfer. This can be a contract address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT": {"name": "AMOUNT", "description": "ETH value transferred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_PRICE": {"name": "TOKEN_PRICE", "description": "The price, if available, for this token at the transfer time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT_USD": {"name": "AMOUNT_USD", "description": "ETH value transferred, in USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "HAS_PRICE": {"name": "HAS_PRICE", "description": "Whether or not our prices model contains this hourly token price.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "The function signature of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FROM_ADDRESS": {"name": "ORIGIN_FROM_ADDRESS", "description": "The from address of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_TO_ADDRESS": {"name": "ORIGIN_TO_ADDRESS", "description": "The to address of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IDENTIFIER": {"name": "IDENTIFIER", "description": "This field represents the position and type of the trace within the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "polygon_models://models/gold/core__ez_matic_transfers.yml", "compiled_path": "target/compiled/polygon_models/models/gold/core__ez_matic_transfers.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1669126489.90515, "compiled_sql": "\n\nWITH matic_base AS (\n\n    SELECT\n        tx_hash,\n        block_number,\n        block_timestamp,\n        from_address,\n        to_address,\n        matic_value,\n        identifier,\n        _call_id,\n        ingested_at,\n        input\n    FROM\n        POLYGON_DEV.silver.traces\n    WHERE\n        matic_value > 0\n        AND tx_status = 'SUCCESS'\n        AND gas_used IS NOT NULL\n),\nmatic_price AS (\n    SELECT\n        HOUR,\n        AVG(price) AS matic_price\n    FROM\n        ethereum.core.fact_hourly_token_prices\n    WHERE\n        token_address = LOWER('0x7D1AfA7B718fb893dB30A3aBc0Cfc608AaCfeBB0')\n    GROUP BY\n        HOUR\n)\nSELECT\n    A.tx_hash AS tx_hash,\n    A.block_number AS block_number,\n    A.block_timestamp AS block_timestamp,\n    A.identifier AS identifier,\n    tx.from_address AS origin_from_address,\n    tx.to_address AS origin_to_address,\n    tx.origin_function_signature AS origin_function_signature,\n    A.from_address AS matic_from_address,\n    A.to_address AS matic_to_address,\n    A.matic_value AS amount,\n    ROUND(\n        A.matic_value * matic_price,\n        2\n    ) AS amount_usd\nFROM\n    matic_base A\n    LEFT JOIN matic_price\n    ON DATE_TRUNC(\n        'hour',\n        block_timestamp\n    ) = HOUR\n    JOIN POLYGON_DEV.silver.transactions\n    tx\n    ON A.tx_hash = tx.tx_hash", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.core.ez_matic_transfers"}, "model.polygon_models.core__dim_labels": {"raw_sql": "{{ config(\n    materialized = 'view',\n    persist_docs ={ \"relation\": true,\n    \"columns\": true }\n) }}\n\nSELECT\n    blockchain,\n    creator,\n    address,\n    address_name,\n    label_type,\n    label_subtype,\n    project_name\nFROM\n    {{ source(\n        'crosschain',\n        'address_labels'\n    ) }}\nWHERE\n    blockchain = 'polygon'\n    AND address LIKE '0x%'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.polygon_models.crosschain.address_labels"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "POLYGON_DEV", "schema": "core", "fqn": ["polygon_models", "gold", "core__dim_labels"], "unique_id": "model.polygon_models.core__dim_labels", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "gold/core__dim_labels.sql", "original_file_path": "models/gold/core__dim_labels.sql", "name": "core__dim_labels", "alias": "dim_labels", "checksum": {"name": "sha256", "checksum": "9044d91d12f3cd97580f41859132c3ba76fb55adb5a3918218768b09c2af6007"}, "tags": [], "refs": [], "sources": [["crosschain", "address_labels"]], "metrics": [], "description": "This table contains labels for addresses on the Polygon Blockchain.", "columns": {"BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The name of the blockchain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR": {"name": "CREATOR", "description": "The name of the creator of the label.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS": {"name": "ADDRESS", "description": "Address that the label is for. This is the field that should be used to join other tables with labels.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS_NAME": {"name": "ADDRESS_NAME", "description": "The most granular label for this address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL_TYPE": {"name": "LABEL_TYPE", "description": "A high-level category describing the addresses main function or ownership.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL_SUBTYPE": {"name": "LABEL_SUBTYPE", "description": "A sub-category nested within label type providing further detail.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROJECT_NAME": {"name": "PROJECT_NAME", "description": "The name of the project for this address.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "polygon_models://models/gold/core__dim_labels.yml", "compiled_path": "target/compiled/polygon_models/models/gold/core__dim_labels.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1669126489.909923, "compiled_sql": "\n\nSELECT\n    blockchain,\n    creator,\n    address,\n    address_name,\n    label_type,\n    label_subtype,\n    project_name\nFROM\n    crosschain.core.address_labels\nWHERE\n    blockchain = 'polygon'\n    AND address LIKE '0x%'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.core.dim_labels"}, "model.polygon_models.sushi__ez_lending": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  incremental_strategy = 'delete+insert',\n  persist_docs ={ \"relation\": true,\n  \"columns\": true },\n  unique_key = '_log_id',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nwith lending_txns as (\nselect distinct tx_hash,contract_address\nfrom {{ ref('silver__logs') }}\nwhere topics [0]::string = '0x30a8c4f9ab5af7e1309ca87c32377d1a83366c5990472dbf9d262450eae14e38'\n{% if is_incremental() %}\nAND _inserted_timestamp::DATE >= (\n  SELECT\n    MAX(_inserted_timestamp) ::DATE - 2\n  FROM\n    {{ this }}\n)\n{% endif %}\n),\n\nunlending_txns as (\nselect distinct tx_hash,contract_address\nfrom {{ ref('silver__logs') }}\nwhere topics [0]::string = '0x6e853a5fd6b51d773691f542ebac8513c9992a51380d4c342031056a64114228'\n{% if is_incremental() %}\nAND _inserted_timestamp::DATE >= (\n  SELECT\n    MAX(_inserted_timestamp) ::DATE - 2\n  FROM\n    {{ this }}\n)\n{% endif %}\n),\n\nLending as (\nselect  block_timestamp,\n        block_number,\n        tx_hash, \n        'Deposit' as action, \n        origin_from_address,\n        origin_to_address,\n        origin_function_signature,\n        event_index,\n        CONCAT('0x', SUBSTR(topics [1] :: STRING, 27, 40)) as asset, \n        CONCAT('0x', SUBSTR(topics [3] :: STRING, 27, 40)) as Lending_pool_address, \n        origin_from_address as Lender, \n        CONCAT('0x', SUBSTR(topics [2] :: STRING, 27, 40)) as Lender2, \n        TRY_TO_NUMBER(\n            public.udf_hex_to_int(SUBSTR(DATA, 3, len(DATA)))::integer\n        ) as amount,\n        case when Lender = Lender2 then 'no' \n        else 'yes' end as Lender_is_a_contract,\n        _log_id,\n        _inserted_timestamp\nfrom {{ ref('silver__logs') }}\nwhere topics [0] :: STRING = '0x6eabe333476233fd382224f233210cb808a7bc4c4de64f9d76628bf63c677b1a' and tx_hash in (select tx_hash from lending_txns)\nand CONCAT('0x', SUBSTR(topics [3] :: STRING, 27, 40)) in (select pair_address from {{ ref('sushi__dim_kashi_pairs') }} )\n{% if is_incremental() %}\nAND _inserted_timestamp::DATE >= (\n  SELECT\n    MAX(_inserted_timestamp) ::DATE - 2\n  FROM\n    {{ this }}\n)\n{% endif %}\n\n),\n\nWithdraw as (\nselect  block_timestamp, \n        block_number,\n        tx_hash, \n        'Withdraw' as action,\n        origin_from_address,\n        origin_to_address,\n        origin_function_signature, \n        event_index,\n        CONCAT('0x', SUBSTR(topics [1] :: STRING, 27, 40)) as asset, \n        CONCAT('0x', SUBSTR(topics [2] :: STRING, 27, 40)) as Lending_pool_address, \n        origin_from_address as Lender, \n        CONCAT('0x', SUBSTR(topics [3] :: STRING, 27, 40)) as Lender2, \n        TRY_TO_NUMBER(\n            public.udf_hex_to_int(SUBSTR(DATA, 3, len(DATA)))::integer\n        ) as amount,\n        case when Lender = Lender2 then 'no' \n        else 'yes' end as Lender_is_a_contract,\n        _log_id,\n        _inserted_timestamp\nfrom {{ ref('silver__logs') }}\nwhere topics [0] :: STRING = '0x6eabe333476233fd382224f233210cb808a7bc4c4de64f9d76628bf63c677b1a' and tx_hash in (select tx_hash from unlending_txns)\nand CONCAT('0x', SUBSTR(topics [2] :: STRING, 27, 40)) in (select pair_address from {{ ref('sushi__dim_kashi_pairs') }} ) \n{% if is_incremental() %}\nAND _inserted_timestamp::DATE >= (\n  SELECT\n    MAX(_inserted_timestamp) ::DATE - 2\n  FROM\n    {{ this }}\n)\n{% endif %}\n),\n\nFinal as (\nselect * from Lending\nunion all\nselect * from Withdraw\n),\n\n\n\neth_prices AS (\n    SELECT\n        token_address,\n        HOUR,\n        symbol,\n        AVG(price) AS price\n    FROM\n        {{ source(\n            'ethereum',\n            'fact_hourly_token_prices'\n        ) }}\n    WHERE\n        1 = 1\n\n{% if is_incremental() %}\nAND HOUR :: DATE IN (\n    SELECT\n        DISTINCT block_timestamp :: DATE\n    FROM\n        Final\n)\n{% else %}\n    AND HOUR :: DATE >= '2020-05-05'\n{% endif %}\nGROUP BY\n    token_address,\n    HOUR,\n    symbol\n),\npolygon_eth_crosstab AS (\n    SELECT\n        NAME,\n        symbol,\n        MAX (\n            CASE\n                WHEN platform_id = 'polygon-pos' THEN token_address\n                ELSE ''\n            END\n        ) AS polygon_address,\n        MAX (\n            CASE\n                WHEN platform = 'ethereum' THEN token_address\n                ELSE ''\n            END\n        ) AS eth_address\n    FROM\n        {{ source(\n            'symbols_cross_tab',\n            'MARKET_ASSET_METADATA'\n        ) }}\n    GROUP BY\n        1,\n        2\n    HAVING\n        polygon_address <> ''\n        AND eth_address <> ''\n    ORDER BY\n        1,\n        2\n),\npolygon_prices AS (\n    SELECT\n        DISTINCT ep.token_address,\n        ep.hour,\n        ep.symbol,\n        ep.price,\n        case when pec.polygon_address = '0x0000000000000000000000000000000000001010' then '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270' \nelse pec.polygon_address end AS polygon_address\n    FROM\n        eth_prices ep\n        LEFT JOIN polygon_eth_crosstab pec\n        ON ep.token_address = pec.eth_Address\n),\n\n\n\n\nlabels as (\nselect *\nfrom {{ ref('sushi__dim_kashi_pairs') }}\n)\n\nselect \na.block_timestamp,\na.block_number,\na.tx_hash,\na.action,\na.origin_from_address,\na.origin_to_address,\na.origin_function_signature,\na.asset,\na.Lender2 as depositor,\na.lender_is_a_contract,\na.lending_pool_address,\na.event_index,\ncase when b.asset_decimals is null then a.amount else (a.amount/pow(10,b.asset_decimals)) end as amount,\n(a.amount* c.price)/pow(10,b.asset_decimals) as amount_USD,\nb.pair_name as lending_pool,\nb.asset_symbol as symbol,\na._log_id,\n_inserted_timestamp\nfrom FINAL a\nLEFT JOIN polygon_prices c\nON LOWER(a.asset) = LOWER(\n    c.polygon_address\n)\nAND DATE_TRUNC(\n    'hour',\n    a.block_timestamp\n) = c.hour\nleft join labels b \non a.Lending_pool_address = b.pair_address", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.polygon_models.ethereum.fact_hourly_token_prices", "source.polygon_models.symbols_cross_tab.MARKET_ASSET_METADATA", "model.polygon_models.silver__logs", "model.polygon_models.silver__logs", "model.polygon_models.silver__logs", "model.polygon_models.sushi__dim_kashi_pairs", "model.polygon_models.silver__logs", "model.polygon_models.sushi__dim_kashi_pairs", "model.polygon_models.sushi__dim_kashi_pairs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_log_id", "on_schema_change": "ignore", "grants": {}, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "POLYGON_DEV", "schema": "sushi", "fqn": ["polygon_models", "sushi", "sushi__ez_lending"], "unique_id": "model.polygon_models.sushi__ez_lending", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "sushi/sushi__ez_lending.sql", "original_file_path": "models/sushi/sushi__ez_lending.sql", "name": "sushi__ez_lending", "alias": "ez_lending", "checksum": {"name": "sha256", "checksum": "a03880acd5bcb9e283895432050b27635cceb75095767e9ca8e7bc235ee05fb2"}, "tags": [], "refs": [["silver__logs"], ["silver__logs"], ["silver__logs"], ["sushi__dim_kashi_pairs"], ["silver__logs"], ["sushi__dim_kashi_pairs"], ["sushi__dim_kashi_pairs"]], "sources": [["ethereum", "fact_hourly_token_prices"], ["symbols_cross_tab", "MARKET_ASSET_METADATA"]], "metrics": [], "description": "This is a table that shows all the events on polygon that are related to providing capital for depositing/withdrawing capital to/from sushi lending pools", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "Also known as block height. The block number, which indicates the length of the blockchain, increases after the addition of each new block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block was produced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "Transaction hash is a unique 66-character identifier that is generated when a transaction is executed. This field will not be unique in this table, as a given transaction can include multiple events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LENDING_POOL_ADDRESS": {"name": "LENDING_POOL_ADDRESS", "description": "The address of the lending pool. For sushi this will be the address of the kashi pair.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACTION": {"name": "ACTION", "description": "The action that the user is taking.\n Deposit: user is depositing funds to be used for lending\n Withdraw: user has changed their mind and are no longer willing to lend, so they withdraw their asset", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT": {"name": "AMOUNT", "description": "The amount of the asset that the user is depositing or withdrawing, depending on the action.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT_USD": {"name": "AMOUNT_USD", "description": "The amount of the asset that the user is depositing or withdrawing, depending on the action.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "The address of the asset (token) that is being deposited/withdrawn, depending on the action", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYMBOL": {"name": "SYMBOL", "description": "The symbol of the asset that is lent or withdrawn, depending on the action", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DEPOSITOR": {"name": "DEPOSITOR", "description": "Its the address of the user who is depositing for lending or withdrawing, depending on the action.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_INDEX": {"name": "EVENT_INDEX", "description": "Event number within a transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_LOG_ID": {"name": "_LOG_ID", "description": "This is the primary key for this table. This is a concatenation of the transaction hash and the event index at which the event occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FROM_ADDRESS": {"name": "ORIGIN_FROM_ADDRESS", "description": "The address of the user who initiates the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_TO_ADDRESS": {"name": "ORIGIN_TO_ADDRESS", "description": "The person who initiates the depositing transaction has to interact with this address. This address belongs to the lending platform or directs the transactio there.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LENDING_POOL": {"name": "LENDING_POOL", "description": "The name of the lending pool.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LENDER_IS_A_CONTRACT": {"name": "LENDER_IS_A_CONTRACT", "description": "If the depositor is a contract then its a Yes, if the depositor is a normal address it is a No.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "polygon_models://models/sushi/sushi__ez_lending.yml", "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_lending.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "incremental_strategy": "delete+insert", "persist_docs": {"relation": true, "columns": true}, "unique_key": "_log_id", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1669126490.005086, "compiled_sql": "\n\nwith lending_txns as (\nselect distinct tx_hash,contract_address\nfrom POLYGON_DEV.silver.logs\nwhere topics [0]::string = '0x30a8c4f9ab5af7e1309ca87c32377d1a83366c5990472dbf9d262450eae14e38'\n\nAND _inserted_timestamp::DATE >= (\n  SELECT\n    MAX(_inserted_timestamp) ::DATE - 2\n  FROM\n    POLYGON_DEV.sushi.ez_lending\n)\n\n),\n\nunlending_txns as (\nselect distinct tx_hash,contract_address\nfrom POLYGON_DEV.silver.logs\nwhere topics [0]::string = '0x6e853a5fd6b51d773691f542ebac8513c9992a51380d4c342031056a64114228'\n\nAND _inserted_timestamp::DATE >= (\n  SELECT\n    MAX(_inserted_timestamp) ::DATE - 2\n  FROM\n    POLYGON_DEV.sushi.ez_lending\n)\n\n),\n\nLending as (\nselect  block_timestamp,\n        block_number,\n        tx_hash, \n        'Deposit' as action, \n        origin_from_address,\n        origin_to_address,\n        origin_function_signature,\n        event_index,\n        CONCAT('0x', SUBSTR(topics [1] :: STRING, 27, 40)) as asset, \n        CONCAT('0x', SUBSTR(topics [3] :: STRING, 27, 40)) as Lending_pool_address, \n        origin_from_address as Lender, \n        CONCAT('0x', SUBSTR(topics [2] :: STRING, 27, 40)) as Lender2, \n        TRY_TO_NUMBER(\n            public.udf_hex_to_int(SUBSTR(DATA, 3, len(DATA)))::integer\n        ) as amount,\n        case when Lender = Lender2 then 'no' \n        else 'yes' end as Lender_is_a_contract,\n        _log_id,\n        _inserted_timestamp\nfrom POLYGON_DEV.silver.logs\nwhere topics [0] :: STRING = '0x6eabe333476233fd382224f233210cb808a7bc4c4de64f9d76628bf63c677b1a' and tx_hash in (select tx_hash from lending_txns)\nand CONCAT('0x', SUBSTR(topics [3] :: STRING, 27, 40)) in (select pair_address from POLYGON_DEV.sushi.dim_kashi_pairs )\n\nAND _inserted_timestamp::DATE >= (\n  SELECT\n    MAX(_inserted_timestamp) ::DATE - 2\n  FROM\n    POLYGON_DEV.sushi.ez_lending\n)\n\n\n),\n\nWithdraw as (\nselect  block_timestamp, \n        block_number,\n        tx_hash, \n        'Withdraw' as action,\n        origin_from_address,\n        origin_to_address,\n        origin_function_signature, \n        event_index,\n        CONCAT('0x', SUBSTR(topics [1] :: STRING, 27, 40)) as asset, \n        CONCAT('0x', SUBSTR(topics [2] :: STRING, 27, 40)) as Lending_pool_address, \n        origin_from_address as Lender, \n        CONCAT('0x', SUBSTR(topics [3] :: STRING, 27, 40)) as Lender2, \n        TRY_TO_NUMBER(\n            public.udf_hex_to_int(SUBSTR(DATA, 3, len(DATA)))::integer\n        ) as amount,\n        case when Lender = Lender2 then 'no' \n        else 'yes' end as Lender_is_a_contract,\n        _log_id,\n        _inserted_timestamp\nfrom POLYGON_DEV.silver.logs\nwhere topics [0] :: STRING = '0x6eabe333476233fd382224f233210cb808a7bc4c4de64f9d76628bf63c677b1a' and tx_hash in (select tx_hash from unlending_txns)\nand CONCAT('0x', SUBSTR(topics [2] :: STRING, 27, 40)) in (select pair_address from POLYGON_DEV.sushi.dim_kashi_pairs ) \n\nAND _inserted_timestamp::DATE >= (\n  SELECT\n    MAX(_inserted_timestamp) ::DATE - 2\n  FROM\n    POLYGON_DEV.sushi.ez_lending\n)\n\n),\n\nFinal as (\nselect * from Lending\nunion all\nselect * from Withdraw\n),\n\n\n\neth_prices AS (\n    SELECT\n        token_address,\n        HOUR,\n        symbol,\n        AVG(price) AS price\n    FROM\n        ethereum.core.fact_hourly_token_prices\n    WHERE\n        1 = 1\n\n\nAND HOUR :: DATE IN (\n    SELECT\n        DISTINCT block_timestamp :: DATE\n    FROM\n        Final\n)\n\nGROUP BY\n    token_address,\n    HOUR,\n    symbol\n),\npolygon_eth_crosstab AS (\n    SELECT\n        NAME,\n        symbol,\n        MAX (\n            CASE\n                WHEN platform_id = 'polygon-pos' THEN token_address\n                ELSE ''\n            END\n        ) AS polygon_address,\n        MAX (\n            CASE\n                WHEN platform = 'ethereum' THEN token_address\n                ELSE ''\n            END\n        ) AS eth_address\n    FROM\n        FLIPSIDE_PROD_DB.SILVER.MARKET_ASSET_METADATA\n    GROUP BY\n        1,\n        2\n    HAVING\n        polygon_address <> ''\n        AND eth_address <> ''\n    ORDER BY\n        1,\n        2\n),\npolygon_prices AS (\n    SELECT\n        DISTINCT ep.token_address,\n        ep.hour,\n        ep.symbol,\n        ep.price,\n        case when pec.polygon_address = '0x0000000000000000000000000000000000001010' then '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270' \nelse pec.polygon_address end AS polygon_address\n    FROM\n        eth_prices ep\n        LEFT JOIN polygon_eth_crosstab pec\n        ON ep.token_address = pec.eth_Address\n),\n\n\n\n\nlabels as (\nselect *\nfrom POLYGON_DEV.sushi.dim_kashi_pairs\n)\n\nselect \na.block_timestamp,\na.block_number,\na.tx_hash,\na.action,\na.origin_from_address,\na.origin_to_address,\na.origin_function_signature,\na.asset,\na.Lender2 as depositor,\na.lender_is_a_contract,\na.lending_pool_address,\na.event_index,\ncase when b.asset_decimals is null then a.amount else (a.amount/pow(10,b.asset_decimals)) end as amount,\n(a.amount* c.price)/pow(10,b.asset_decimals) as amount_USD,\nb.pair_name as lending_pool,\nb.asset_symbol as symbol,\na._log_id,\n_inserted_timestamp\nfrom FINAL a\nLEFT JOIN polygon_prices c\nON LOWER(a.asset) = LOWER(\n    c.polygon_address\n)\nAND DATE_TRUNC(\n    'hour',\n    a.block_timestamp\n) = c.hour\nleft join labels b \non a.Lending_pool_address = b.pair_address", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.sushi.ez_lending"}, "model.polygon_models.sushi__ez_swaps": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    persist_docs ={ \"relation\": true,\n    \"columns\": true },\n    unique_key = '_log_id',\n    cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH swap_events AS (\n\n    SELECT\n        block_number,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        block_timestamp,\n        tx_hash,\n        contract_address,\n        event_name,\n        regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,\n        TRY_TO_NUMBER(\n            public.udf_hex_to_int(segmented_data[0]::string)::integer\n        ) AS amount0In,\n        TRY_TO_NUMBER(\n            public.udf_hex_to_int(segmented_data[1]::string)::integer\n        ) AS amount1In,\n        TRY_TO_NUMBER(\n            public.udf_hex_to_int(segmented_data[2]::string)::integer\n        ) AS amount0Out,\n        TRY_TO_NUMBER(\n            public.udf_hex_to_int(segmented_data[3]::string)::integer \n        ) AS amount1Out,\n        CONCAT('0x', SUBSTR(topics [1] :: STRING, 27, 40)) AS sender,\n        CONCAT('0x', SUBSTR(topics [2] :: STRING, 27, 40)) AS tx_to,\n        event_index,\n        _log_id,\n        _inserted_timestamp\n    FROM\n        {{ ref('silver__logs') }}\n    WHERE\n        topics[0]::string = '0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822'\n        AND tx_status = 'SUCCESS'\n        AND contract_address IN (\n            SELECT\n                DISTINCT pool_address\n            FROM\n                {{ ref('sushi__dim_dex_pools') }}\n        )\n\n{% if is_incremental() %}\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp) :: DATE - 2\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\nFINAL AS (\n    SELECT\n        block_number,\n        block_timestamp,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        tx_hash,\n        contract_address,\n        event_name,\n        CASE\n            WHEN amount0In <> 0\n            AND amount1In <> 0\n            AND token1_decimals IS NOT NULL THEN amount1In / power(\n                10,\n                token1_decimals\n            ) :: FLOAT\n            WHEN amount0In <> 0\n            AND token0_decimals IS NOT NULL THEN amount0In / power(\n                10,\n                token0_decimals\n            ) :: FLOAT\n            WHEN amount1In <> 0\n            AND token1_decimals IS NOT NULL THEN amount1In / power(\n                10,\n                token1_decimals\n            ) :: FLOAT\n            WHEN amount0In <> 0\n            AND token0_decimals IS NULL THEN amount0In\n            WHEN amount1In <> 0\n            AND token1_decimals IS NULL THEN amount1In\n        END AS amount_in,\n        CASE\n            WHEN amount0Out <> 0\n            AND token0_decimals IS NOT NULL THEN amount0Out / power(\n                10,\n                token0_decimals\n            ) :: FLOAT\n            WHEN amount1Out <> 0\n            AND token1_decimals IS NOT NULL THEN amount1Out / power(\n                10,\n                token1_decimals\n            ) :: FLOAT\n            WHEN amount0Out <> 0\n            AND token0_decimals IS NULL THEN amount0Out\n            WHEN amount1Out <> 0\n            AND token1_decimals IS NULL THEN amount1Out\n        END AS amount_out,\n        sender,\n        tx_to,\n        event_index,\n        _log_id,\n        CASE\n            WHEN amount0In <> 0\n            AND amount1In <> 0 THEN token1_address\n            WHEN amount0In <> 0 THEN token0_address\n            WHEN amount1In <> 0 THEN token1_address\n        END AS token_in,\n        CASE\n            WHEN amount0Out <> 0 THEN token0_address\n            WHEN amount1Out <> 0 THEN token1_address\n        END AS token_out,\n        CASE\n            WHEN amount0In <> 0\n            AND amount1In <> 0 THEN token1_symbol\n            WHEN amount0In <> 0 THEN token0_symbol\n            WHEN amount1In <> 0 THEN token1_symbol\n        END AS symbol_in,\n        CASE\n            WHEN amount0Out <> 0 THEN token0_symbol\n            WHEN amount1Out <> 0 THEN token1_symbol\n        END AS symbol_out,\n        CASE\n            WHEN amount0In <> 0\n            AND amount1In <> 0 THEN token1_decimals\n            WHEN amount0In <> 0 THEN token0_decimals\n            WHEN amount1In <> 0 THEN token1_decimals\n        END AS decimals_in,\n        CASE\n            WHEN amount0Out <> 0 THEN token0_decimals\n            WHEN amount1Out <> 0 THEN token1_decimals\n        END AS decimals_out,\n        token0_decimals,\n        token1_decimals,\n        token0_symbol,\n        token1_symbol,\n        pool_name,\n        _inserted_timestamp\n    FROM\n        swap_events\n        LEFT JOIN {{ ref('sushi__dim_dex_pools') }}\n        bb\n        ON swap_events.contract_address = bb.pool_address\n),\neth_prices AS (\n    SELECT\n        token_address,\n        HOUR,\n        symbol,\n        AVG(price) AS price\n    FROM\n        {{ source(\n            'ethereum',\n            'fact_hourly_token_prices'\n        ) }}\n    WHERE\n        1 = 1\n\n{% if is_incremental() %}\nAND HOUR :: DATE IN (\n    SELECT\n        DISTINCT block_timestamp :: DATE\n    FROM\n        swap_events\n)\n{% else %}\n    AND HOUR :: DATE >= '2020-05-05'\n{% endif %}\nGROUP BY\n    token_address,\n    HOUR,\n    symbol\n),\npolygon_eth_crosstab AS (\n    SELECT\n        NAME,\n        symbol,\n        MAX (\n            CASE\n                WHEN platform_id = 'polygon-pos' THEN token_address\n                ELSE ''\n            END\n        ) AS polygon_address,\n        MAX (\n            CASE\n                WHEN platform = 'ethereum' THEN token_address\n                ELSE ''\n            END\n        ) AS eth_address\n    FROM\n        {{ source(\n            'symbols_cross_tab',\n            'MARKET_ASSET_METADATA'\n        ) }}\n    GROUP BY\n        1,\n        2\n    HAVING\n        polygon_address <> ''\n        AND eth_address <> ''\n    ORDER BY\n        1,\n        2\n),\npolygon_prices AS (\n    SELECT\n        DISTINCT ep.token_address,\n        ep.hour,\n        ep.symbol,\n        ep.price,\n        pec.polygon_address AS polygon_address\n    FROM\n        eth_prices ep\n        LEFT JOIN polygon_eth_crosstab pec\n        ON ep.token_address = pec.eth_Address\n)\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    contract_address,\n    'sushiswap' AS platform,\n    pool_name,\n    event_name,\n    amount_in,\n    CASE\n        WHEN decimals_in IS NOT NULL\n        AND amount_in * pIn.price <= 5 * amount_out * pOut.price\n        AND amount_out * pOut.price <= 5 * amount_in * pIn.price THEN amount_in * pIn.price\n        WHEN decimals_in IS NOT NULL and decimals_out is null then amount_in * pIn.price\n        ELSE NULL\n    END AS amount_in_usd,\n    amount_out,\n    CASE\n        WHEN decimals_out IS NOT NULL\n        AND amount_in * pIn.price <= 5 * amount_out * pOut.price\n        AND amount_out * pOut.price <= 5 * amount_in * pIn.price THEN amount_out * pOut.price\n        WHEN decimals_out IS NOT NULL and decimals_in is null then amount_out * pOut.price\n        ELSE NULL\n    END AS amount_out_usd,\n    sender,\n    tx_to,\n    event_index,\n    token_in,\n    token_out,\n    symbol_in,\n    symbol_out,\n    _log_id,\n    _inserted_timestamp\nFROM\n    FINAL wp\n    LEFT JOIN polygon_prices pIn\n    ON LOWER(token_in) = LOWER(\n        pIn.polygon_address\n    )\n    AND DATE_TRUNC(\n        'hour',\n        wp.block_timestamp\n    ) = pIn.hour\n    LEFT JOIN polygon_prices pOut\n    ON LOWER(token_out) = LOWER(\n        pOut.polygon_address\n    )\n    AND DATE_TRUNC(\n        'hour',\n        wp.block_timestamp\n    ) = pOut.hour", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.polygon_models.ethereum.fact_hourly_token_prices", "source.polygon_models.symbols_cross_tab.MARKET_ASSET_METADATA", "model.polygon_models.silver__logs", "model.polygon_models.sushi__dim_dex_pools", "model.polygon_models.sushi__dim_dex_pools"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_log_id", "on_schema_change": "ignore", "grants": {}, "cluster_by": ["block_timestamp::DATE"], "post-hook": [], "pre-hook": []}, "database": "POLYGON_DEV", "schema": "sushi", "fqn": ["polygon_models", "sushi", "sushi__ez_swaps"], "unique_id": "model.polygon_models.sushi__ez_swaps", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "sushi/sushi__ez_swaps.sql", "original_file_path": "models/sushi/sushi__ez_swaps.sql", "name": "sushi__ez_swaps", "alias": "ez_swaps", "checksum": {"name": "sha256", "checksum": "80138be1a7d61d6673aebaf3ed0c7fa417c2ca83b5b48cee72c43128465fa79a"}, "tags": [], "refs": [["silver__logs"], ["sushi__dim_dex_pools"], ["sushi__dim_dex_pools"]], "sources": [["ethereum", "fact_hourly_token_prices"], ["symbols_cross_tab", "MARKET_ASSET_METADATA"]], "metrics": [], "description": "This table currently contains swap events from the ```fact_event_logs``` table for SushiSwap, along with other helpful columns including an amount USD where possible. \nNote: A rule has been put in place to null out the amount_USD if that number is too divergent between amount_in_USD and amount_out_usd. This can happen for swaps of less liquid tokens during very high fluctuation of price.", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "Also known as block height. The block number, which indicates the length of the blockchain, increases after the addition of each new block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block was produced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "Transaction hash is a unique 66-character identifier that is generated when a transaction is executed. This field will not be unique in this table, as a given transaction can include multiple events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_ADDRESS": {"name": "CONTRACT_ADDRESS", "description": "The address interacted with for a given event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_NAME": {"name": "EVENT_NAME", "description": "The decoded event name for a given event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT_IN": {"name": "AMOUNT_IN", "description": "The amount of tokens put into the swap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT_OUT": {"name": "AMOUNT_OUT", "description": "The amount of tokens taken out of or received from the swap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT_IN_USD": {"name": "AMOUNT_IN_USD", "description": "The amount of tokens put into the swap converted to USD using the price of the token.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT_OUT_USD": {"name": "AMOUNT_OUT_USD", "description": "The amount of tokens taken out of or received from the swap converted to USD using the price of the token.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_IN": {"name": "TOKEN_IN", "description": "The address of the token sent for swap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_OUT": {"name": "TOKEN_OUT", "description": "The address of the token being swapped to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYMBOL_IN": {"name": "SYMBOL_IN", "description": "The symbol of the token sent for swap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYMBOL_OUT": {"name": "SYMBOL_OUT", "description": "The symbol of the token being swapped to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SENDER": {"name": "SENDER", "description": "The Router is the Sender in the swap function.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_TO": {"name": "TX_TO", "description": "The tx_to is the address who receives the swapped token. This corresponds to the \"to\" field in the swap function.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLATFORM": {"name": "PLATFORM", "description": "This field denotes which application the liquidity pool belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_INDEX": {"name": "EVENT_INDEX", "description": "Event number within a transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_LOG_ID": {"name": "_LOG_ID", "description": "This is the primary key for this table. This is a concatenation of the transaction hash and the event index at which the event occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "The function signature of the contract call.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FROM_ADDRESS": {"name": "ORIGIN_FROM_ADDRESS", "description": "The from address of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_TO_ADDRESS": {"name": "ORIGIN_TO_ADDRESS", "description": "The to address of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "polygon_models://models/sushi/sushi__ez_swaps.yml", "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_swaps.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "unique_key": "_log_id", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1669126490.121551, "compiled_sql": "\n\nWITH swap_events AS (\n\n    SELECT\n        block_number,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        block_timestamp,\n        tx_hash,\n        contract_address,\n        event_name,\n        regexp_substr_all(SUBSTR(DATA, 3, len(DATA)), '.{64}') AS segmented_data,\n        TRY_TO_NUMBER(\n            public.udf_hex_to_int(segmented_data[0]::string)::integer\n        ) AS amount0In,\n        TRY_TO_NUMBER(\n            public.udf_hex_to_int(segmented_data[1]::string)::integer\n        ) AS amount1In,\n        TRY_TO_NUMBER(\n            public.udf_hex_to_int(segmented_data[2]::string)::integer\n        ) AS amount0Out,\n        TRY_TO_NUMBER(\n            public.udf_hex_to_int(segmented_data[3]::string)::integer \n        ) AS amount1Out,\n        CONCAT('0x', SUBSTR(topics [1] :: STRING, 27, 40)) AS sender,\n        CONCAT('0x', SUBSTR(topics [2] :: STRING, 27, 40)) AS tx_to,\n        event_index,\n        _log_id,\n        _inserted_timestamp\n    FROM\n        POLYGON_DEV.silver.logs\n    WHERE\n        topics[0]::string = '0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822'\n        AND tx_status = 'SUCCESS'\n        AND contract_address IN (\n            SELECT\n                DISTINCT pool_address\n            FROM\n                POLYGON_DEV.sushi.dim_dex_pools\n        )\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(_inserted_timestamp) :: DATE - 2\n    FROM\n        POLYGON_DEV.sushi.ez_swaps\n)\n\n),\nFINAL AS (\n    SELECT\n        block_number,\n        block_timestamp,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        tx_hash,\n        contract_address,\n        event_name,\n        CASE\n            WHEN amount0In <> 0\n            AND amount1In <> 0\n            AND token1_decimals IS NOT NULL THEN amount1In / power(\n                10,\n                token1_decimals\n            ) :: FLOAT\n            WHEN amount0In <> 0\n            AND token0_decimals IS NOT NULL THEN amount0In / power(\n                10,\n                token0_decimals\n            ) :: FLOAT\n            WHEN amount1In <> 0\n            AND token1_decimals IS NOT NULL THEN amount1In / power(\n                10,\n                token1_decimals\n            ) :: FLOAT\n            WHEN amount0In <> 0\n            AND token0_decimals IS NULL THEN amount0In\n            WHEN amount1In <> 0\n            AND token1_decimals IS NULL THEN amount1In\n        END AS amount_in,\n        CASE\n            WHEN amount0Out <> 0\n            AND token0_decimals IS NOT NULL THEN amount0Out / power(\n                10,\n                token0_decimals\n            ) :: FLOAT\n            WHEN amount1Out <> 0\n            AND token1_decimals IS NOT NULL THEN amount1Out / power(\n                10,\n                token1_decimals\n            ) :: FLOAT\n            WHEN amount0Out <> 0\n            AND token0_decimals IS NULL THEN amount0Out\n            WHEN amount1Out <> 0\n            AND token1_decimals IS NULL THEN amount1Out\n        END AS amount_out,\n        sender,\n        tx_to,\n        event_index,\n        _log_id,\n        CASE\n            WHEN amount0In <> 0\n            AND amount1In <> 0 THEN token1_address\n            WHEN amount0In <> 0 THEN token0_address\n            WHEN amount1In <> 0 THEN token1_address\n        END AS token_in,\n        CASE\n            WHEN amount0Out <> 0 THEN token0_address\n            WHEN amount1Out <> 0 THEN token1_address\n        END AS token_out,\n        CASE\n            WHEN amount0In <> 0\n            AND amount1In <> 0 THEN token1_symbol\n            WHEN amount0In <> 0 THEN token0_symbol\n            WHEN amount1In <> 0 THEN token1_symbol\n        END AS symbol_in,\n        CASE\n            WHEN amount0Out <> 0 THEN token0_symbol\n            WHEN amount1Out <> 0 THEN token1_symbol\n        END AS symbol_out,\n        CASE\n            WHEN amount0In <> 0\n            AND amount1In <> 0 THEN token1_decimals\n            WHEN amount0In <> 0 THEN token0_decimals\n            WHEN amount1In <> 0 THEN token1_decimals\n        END AS decimals_in,\n        CASE\n            WHEN amount0Out <> 0 THEN token0_decimals\n            WHEN amount1Out <> 0 THEN token1_decimals\n        END AS decimals_out,\n        token0_decimals,\n        token1_decimals,\n        token0_symbol,\n        token1_symbol,\n        pool_name,\n        _inserted_timestamp\n    FROM\n        swap_events\n        LEFT JOIN POLYGON_DEV.sushi.dim_dex_pools\n        bb\n        ON swap_events.contract_address = bb.pool_address\n),\neth_prices AS (\n    SELECT\n        token_address,\n        HOUR,\n        symbol,\n        AVG(price) AS price\n    FROM\n        ethereum.core.fact_hourly_token_prices\n    WHERE\n        1 = 1\n\n\nAND HOUR :: DATE IN (\n    SELECT\n        DISTINCT block_timestamp :: DATE\n    FROM\n        swap_events\n)\n\nGROUP BY\n    token_address,\n    HOUR,\n    symbol\n),\npolygon_eth_crosstab AS (\n    SELECT\n        NAME,\n        symbol,\n        MAX (\n            CASE\n                WHEN platform_id = 'polygon-pos' THEN token_address\n                ELSE ''\n            END\n        ) AS polygon_address,\n        MAX (\n            CASE\n                WHEN platform = 'ethereum' THEN token_address\n                ELSE ''\n            END\n        ) AS eth_address\n    FROM\n        FLIPSIDE_PROD_DB.SILVER.MARKET_ASSET_METADATA\n    GROUP BY\n        1,\n        2\n    HAVING\n        polygon_address <> ''\n        AND eth_address <> ''\n    ORDER BY\n        1,\n        2\n),\npolygon_prices AS (\n    SELECT\n        DISTINCT ep.token_address,\n        ep.hour,\n        ep.symbol,\n        ep.price,\n        pec.polygon_address AS polygon_address\n    FROM\n        eth_prices ep\n        LEFT JOIN polygon_eth_crosstab pec\n        ON ep.token_address = pec.eth_Address\n)\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    contract_address,\n    'sushiswap' AS platform,\n    pool_name,\n    event_name,\n    amount_in,\n    CASE\n        WHEN decimals_in IS NOT NULL\n        AND amount_in * pIn.price <= 5 * amount_out * pOut.price\n        AND amount_out * pOut.price <= 5 * amount_in * pIn.price THEN amount_in * pIn.price\n        WHEN decimals_in IS NOT NULL and decimals_out is null then amount_in * pIn.price\n        ELSE NULL\n    END AS amount_in_usd,\n    amount_out,\n    CASE\n        WHEN decimals_out IS NOT NULL\n        AND amount_in * pIn.price <= 5 * amount_out * pOut.price\n        AND amount_out * pOut.price <= 5 * amount_in * pIn.price THEN amount_out * pOut.price\n        WHEN decimals_out IS NOT NULL and decimals_in is null then amount_out * pOut.price\n        ELSE NULL\n    END AS amount_out_usd,\n    sender,\n    tx_to,\n    event_index,\n    token_in,\n    token_out,\n    symbol_in,\n    symbol_out,\n    _log_id,\n    _inserted_timestamp\nFROM\n    FINAL wp\n    LEFT JOIN polygon_prices pIn\n    ON LOWER(token_in) = LOWER(\n        pIn.polygon_address\n    )\n    AND DATE_TRUNC(\n        'hour',\n        wp.block_timestamp\n    ) = pIn.hour\n    LEFT JOIN polygon_prices pOut\n    ON LOWER(token_out) = LOWER(\n        pOut.polygon_address\n    )\n    AND DATE_TRUNC(\n        'hour',\n        wp.block_timestamp\n    ) = pOut.hour", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.sushi.ez_swaps"}, "model.polygon_models.sushi__dim_dex_pools": {"raw_sql": "{{ config(\n    materialized = 'table'\n) }}\n\n    SELECT\n        pair_address as pool_address,\n        pair_name as pool_name,\n        tokens_0_address as token0_address,\n        tokens_0_name as token0_symbol,\n        tokens_1_address as token1_address,\n        tokens_1_name as token1_symbol,\n        Case when tokens_0_name in (select distinct b.symbol\n                                from ETHEREUM.CORE.DIM_DEX_LIQUIDITY_POOLS a\n                                left join ETHEREUM.CORE.DIM_CONTRACTS b\n                                on a.token0 = b.address\n                                where platform = 'sushiswap'\n                                and b.decimals is not null and b.decimals = 18) then 18\n            when tokens_0_name = 'WMATIC' then 18\n            when tokens_0_name = 'WBTC' then 8\n            when tokens_0_name in ('USDC','USDC','USDR','USDT') then 6\n        End as token0_decimals,\n        Case when tokens_1_name in (select distinct b.symbol\n                            from ETHEREUM.CORE.DIM_DEX_LIQUIDITY_POOLS a\n                            left join ETHEREUM.CORE.DIM_CONTRACTS b\n                            on a.token0 = b.address\n                            where platform = 'sushiswap'\n                            and b.decimals is not null and b.decimals = 18) then 18\n        when tokens_0_name = 'WMATIC' then 18\n        when tokens_1_name = 'WBTC' then 8\n        when tokens_1_name in ('USDC','USDC','USDR','USDT') then 6\n        End as token1_decimals  \n    FROM\n         {{ source(\n            'polygon_dex_pools',\n            'SUSHI_DIM_DEX_POOLS'\n        ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.polygon_models.polygon_dex_pools.SUSHI_DIM_DEX_POOLS"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "POLYGON_DEV", "schema": "sushi", "fqn": ["polygon_models", "sushi", "sushi__dim_dex_pools"], "unique_id": "model.polygon_models.sushi__dim_dex_pools", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "sushi/sushi__dim_dex_pools.sql", "original_file_path": "models/sushi/sushi__dim_dex_pools.sql", "name": "sushi__dim_dex_pools", "alias": "dim_dex_pools", "checksum": {"name": "sha256", "checksum": "6ffa84637a2f15043f868c2f1bbefe5c1dcdc818334047d1714c557104c1a3ad"}, "tags": [], "refs": [], "sources": [["polygon_dex_pools", "SUSHI_DIM_DEX_POOLS"]], "metrics": [], "description": "This table contains details on different Liquidity Pools belonging to sushiswap on the Polygon blockchain", "columns": {"POOL_ADDRESS": {"name": "POOL_ADDRESS", "description": "The contract address for the liquidity pool.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "The name of the liquidity pool, where possible.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN0_ADDRESS": {"name": "TOKEN0_ADDRESS", "description": "Token 0 is the first token in the pair, and will show up first within the event logs for relevant transactions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN1_ADDRESS": {"name": "TOKEN1_ADDRESS", "description": "Token 1 is the second token in the pair, and will show up second within the event logs for relevant transactions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN0_SYMBOL": {"name": "TOKEN0_SYMBOL", "description": "The symbol belonging to the address of the token", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN1_SYMBOL": {"name": "TOKEN1_SYMBOL", "description": "The symbol belonging to the address of the token", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN0_DECIMALS": {"name": "TOKEN0_DECIMALS", "description": "The number of decimal places this contract needs adjusted where token values exist. For example, use the decimal field to correctly transform raw amounts in ```fact_transactions```.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN1_DECIMALS": {"name": "TOKEN1_DECIMALS", "description": "The number of decimal places this contract needs adjusted where token values exist. For example, use the decimal field to correctly transform raw amounts in ```fact_transactions```.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "polygon_models://models/sushi/sushi__dim_dex_pools.yml", "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__dim_dex_pools.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1669126490.375606, "compiled_sql": "\n\n    SELECT\n        pair_address as pool_address,\n        pair_name as pool_name,\n        tokens_0_address as token0_address,\n        tokens_0_name as token0_symbol,\n        tokens_1_address as token1_address,\n        tokens_1_name as token1_symbol,\n        Case when tokens_0_name in (select distinct b.symbol\n                                from ETHEREUM.CORE.DIM_DEX_LIQUIDITY_POOLS a\n                                left join ETHEREUM.CORE.DIM_CONTRACTS b\n                                on a.token0 = b.address\n                                where platform = 'sushiswap'\n                                and b.decimals is not null and b.decimals = 18) then 18\n            when tokens_0_name = 'WMATIC' then 18\n            when tokens_0_name = 'WBTC' then 8\n            when tokens_0_name in ('USDC','USDC','USDR','USDT') then 6\n        End as token0_decimals,\n        Case when tokens_1_name in (select distinct b.symbol\n                            from ETHEREUM.CORE.DIM_DEX_LIQUIDITY_POOLS a\n                            left join ETHEREUM.CORE.DIM_CONTRACTS b\n                            on a.token0 = b.address\n                            where platform = 'sushiswap'\n                            and b.decimals is not null and b.decimals = 18) then 18\n        when tokens_0_name = 'WMATIC' then 18\n        when tokens_1_name = 'WBTC' then 8\n        when tokens_1_name in ('USDC','USDC','USDR','USDT') then 6\n        End as token1_decimals  \n    FROM\n         polygon.bronze.SUSHI_DIM_DEX_POOLS", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.sushi.dim_dex_pools"}, "model.polygon_models.sushi__ez_borrowing": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  incremental_strategy = 'delete+insert',\n  persist_docs ={ \"relation\": true,\n  \"columns\": true },\n  unique_key = '_log_id',\n  cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH borrow_txns AS (\n\n  SELECT\n    DISTINCT tx_hash,\n    contract_address\n  FROM\n    {{ ref('silver__logs') }}\n  WHERE\n    topics [0] :: STRING = '0x3a5151e57d3bc9798e7853034ac52293d1a0e12a2b44725e75b03b21f86477a6'\n\n{% if is_incremental() %}\nAND _inserted_timestamp :: DATE >= (\n  SELECT\n    MAX(_inserted_timestamp) :: DATE - 2\n  FROM\n    {{ this }}\n)\n{% endif %}\n),\nrepay_txns AS (\n  SELECT\n    DISTINCT tx_hash,\n    contract_address\n  FROM\n    {{ ref('silver__logs') }}\n  WHERE\n    topics [0] :: STRING = '0xc8e512d8f188ca059984b5853d2bf653da902696b8512785b182b2c813789a6e'\n\n{% if is_incremental() %}\nAND _inserted_timestamp :: DATE >= (\n  SELECT\n    MAX(_inserted_timestamp) :: DATE - 2\n  FROM\n    {{ this }}\n)\n{% endif %}\n),\nadd_asset AS (\n  SELECT\n    DISTINCT tx_hash,\n    contract_address\n  FROM\n    {{ ref('silver__logs') }}\n  WHERE\n    topics [0] :: STRING = '0x30a8c4f9ab5af7e1309ca87c32377d1a83366c5990472dbf9d262450eae14e38'\n\n{% if is_incremental() %}\nAND _inserted_timestamp :: DATE >= (\n  SELECT\n    MAX(_inserted_timestamp) :: DATE - 2\n  FROM\n    {{ this }}\n)\n{% endif %}\n),\nremove_asset AS (\n  SELECT\n    DISTINCT tx_hash,\n    contract_address\n  FROM\n    {{ ref('silver__logs') }}\n  WHERE\n    topics [0] :: STRING = '0x6e853a5fd6b51d773691f542ebac8513c9992a51380d4c342031056a64114228'\n\n{% if is_incremental() %}\nAND _inserted_timestamp :: DATE >= (\n  SELECT\n    MAX(_inserted_timestamp) :: DATE - 2\n  FROM\n    {{ this }}\n)\n{% endif %}\n),\nborrow AS (\n  SELECT\n    block_timestamp,\n    block_number,\n    tx_hash,\n    'Borrow' AS action,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature,\n    CONCAT ('0x', SUBSTR(topics [1] :: STRING, 27, 40)) AS asset,\n    CONCAT ('0x', SUBSTR(topics [2] :: STRING, 27, 40)) AS lending_pool_address,\n    origin_from_address AS borrower,\n    CONCAT ('0x', SUBSTR(topics [3] :: STRING, 27, 40)) AS borrower2,\n    TRY_TO_NUMBER(\n      PUBLIC.udf_hex_to_int(SUBSTR(DATA, 3, len(DATA))) :: INTEGER) AS amount,\n      CASE\n        WHEN borrower = borrower2 THEN 'no'\n        ELSE 'yes'\n      END AS borrower_is_a_contract,\n      _log_id,\n      _inserted_timestamp\n      FROM\n        {{ ref('silver__logs') }}\n      WHERE\n        topics [0] :: STRING = '0x6eabe333476233fd382224f233210cb808a7bc4c4de64f9d76628bf63c677b1a'\n        AND tx_hash IN (\n          SELECT\n            tx_hash\n          FROM\n            borrow_txns\n        )\n        AND CONCAT('0x', SUBSTR(topics [2] :: STRING, 27, 40)) IN (\n          SELECT\n            pair_address\n          FROM\n            {{ ref('sushi__dim_kashi_pairs') }}\n        )\n\n{% if is_incremental() %}\nAND _inserted_timestamp :: DATE >= (\n  SELECT\n    MAX(_inserted_timestamp) :: DATE - 2\n  FROM\n    {{ this }}\n)\n{% endif %}\n),\nadd_coll_same_txn AS (\n  SELECT\n    block_timestamp,\n    block_number,\n    tx_hash,\n    'add collateral' AS action,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature,\n    CONCAT ('0x', SUBSTR(topics [1] :: STRING, 27, 40)) AS asset,\n    CONCAT('0x', SUBSTR(topics [3] :: STRING, 27, 40)) AS lending_pool_address,\n    origin_from_address AS borrower,\n    CONCAT ('0x', SUBSTR(topics [2] :: STRING, 27, 40)) AS borrower2,\n    TRY_TO_NUMBER(\n      PUBLIC.udf_hex_to_int(SUBSTR(DATA, 3, len(DATA))) :: INTEGER) AS amount,\n      CASE\n        WHEN borrower = borrower2 THEN 'no'\n        ELSE 'yes'\n      END AS borrower_is_a_contract,\n      _log_id,\n      _inserted_timestamp\n      FROM\n        {{ ref('silver__logs') }}\n      WHERE\n        topics [0] :: STRING = '0x6eabe333476233fd382224f233210cb808a7bc4c4de64f9d76628bf63c677b1a'\n        AND tx_hash IN (\n          SELECT\n            tx_hash\n          FROM\n            borrow_txns\n        )\n        AND CONCAT('0x', SUBSTR(topics [3] :: STRING, 27, 40)) IN (\n          SELECT\n            pair_address\n          FROM\n            {{ ref('sushi__dim_kashi_pairs') }}\n        )\n\n{% if is_incremental() %}\nAND _inserted_timestamp :: DATE >= (\n  SELECT\n    MAX(_inserted_timestamp) :: DATE - 2\n  FROM\n    {{ this }}\n)\n{% endif %}\n),\nrepay AS (\n  SELECT\n    block_timestamp,\n    block_number,\n    tx_hash,\n    'Repay' AS action,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature,\n    CONCAT ('0x', SUBSTR(topics [1] :: STRING, 27, 40)) AS asset,\n    CONCAT ('0x', SUBSTR(topics [3] :: STRING, 27, 40)) AS lending_pool_address,\n    origin_from_address AS borrower,\n    CONCAT ('0x', SUBSTR(topics [2] :: STRING, 27, 40)) AS borrower2,\n    TRY_TO_NUMBER(\n      PUBLIC.udf_hex_to_int(SUBSTR(DATA, 3, len(DATA))) :: INTEGER) AS amount,\n      CASE\n        WHEN borrower = borrower2 THEN 'no'\n        ELSE 'yes'\n      END AS lender_is_a_contract,\n      _log_id,\n      _inserted_timestamp\n      FROM\n        {{ ref('silver__logs') }}\n      WHERE\n        topics [0] :: STRING = '0x6eabe333476233fd382224f233210cb808a7bc4c4de64f9d76628bf63c677b1a'\n        AND tx_hash IN (\n          SELECT\n            tx_hash\n          FROM\n            repay_txns\n        )\n        AND CONCAT('0x', SUBSTR(topics [3] :: STRING, 27, 40)) IN (\n          SELECT\n            pair_address\n          FROM\n            {{ ref('sushi__dim_kashi_pairs') }}\n        )\n\n{% if is_incremental() %}\nAND _inserted_timestamp :: DATE >= (\n  SELECT\n    MAX(_inserted_timestamp) :: DATE - 2\n  FROM\n    {{ this }}\n)\n{% endif %}\n),\nremove_coll_same_txn AS (\n  SELECT\n    block_timestamp,\n    block_number,\n    tx_hash,\n    'Remove collateral' AS action,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature,\n    CONCAT('0x', SUBSTR(topics [1] :: STRING, 27, 40)) AS asset,\n    CONCAT('0x', SUBSTR(topics [2] :: STRING, 27, 40)) AS lending_pool_address,\n    origin_from_address AS borrower,\n    CONCAT('0x', SUBSTR(topics [3] :: STRING, 27, 40)) AS borrower2,\n    TRY_TO_NUMBER(\n      PUBLIC.udf_hex_to_int(SUBSTR(DATA, 3, len(DATA))) :: INTEGER) AS amount,\n      CASE\n        WHEN borrower = borrower2 THEN 'no'\n        ELSE 'yes'\n      END AS borrower_is_a_contract,\n      _log_id,\n      _inserted_timestamp\n      FROM\n        {{ ref('silver__logs') }}\n      WHERE\n        topics [0] :: STRING = '0x6eabe333476233fd382224f233210cb808a7bc4c4de64f9d76628bf63c677b1a'\n        AND tx_hash IN (\n          SELECT\n            tx_hash\n          FROM\n            repay_txns\n        )\n        AND CONCAT('0x', SUBSTR(topics [2] :: STRING, 27, 40)) IN (\n          SELECT\n            pair_address\n          FROM\n            {{ ref('sushi__dim_kashi_pairs') }}\n        )\n\n{% if is_incremental() %}\nAND _inserted_timestamp :: DATE >= (\n  SELECT\n    MAX(_inserted_timestamp) :: DATE - 2\n  FROM\n    {{ this }}\n)\n{% endif %}\n),\nadd_coll_in_separate_txn AS (\n  SELECT\n    block_timestamp,\n    block_number,\n    tx_hash,\n    'add collateral' AS action,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature,\n    CONCAT('0x', SUBSTR(topics [1] :: STRING, 27, 40)) AS asset,\n    CONCAT('0x', SUBSTR(topics [3] :: STRING, 27, 40)) AS lending_pool_address,\n    origin_from_address AS borrower,\n    CONCAT('0x', SUBSTR(topics [2] :: STRING, 27, 40)) AS borrower2,\n    TRY_TO_NUMBER(\n      PUBLIC.udf_hex_to_int(SUBSTR(DATA, 3, len(DATA))) :: INTEGER) AS amount,\n      CASE\n        WHEN borrower = borrower2 THEN 'no'\n        ELSE 'yes'\n      END AS borrower_is_a_contract,\n      _log_id,\n      _inserted_timestamp\n      FROM\n        {{ ref('silver__logs') }}\n      WHERE\n        topics [0] :: STRING = '0x6eabe333476233fd382224f233210cb808a7bc4c4de64f9d76628bf63c677b1a'\n        AND tx_hash NOT IN (\n          SELECT\n            tx_hash\n          FROM\n            borrow_txns\n        )\n        AND tx_hash NOT IN (\n          SELECT\n            tx_hash\n          FROM\n            repay_txns\n        )\n        AND tx_hash NOT IN (\n          SELECT\n            tx_hash\n          FROM\n            add_asset\n        )\n        AND CONCAT('0x', SUBSTR(topics [3] :: STRING, 27, 40)) IN (\n          SELECT\n            pair_address\n          FROM\n            {{ ref('sushi__dim_kashi_pairs') }}\n        )\n\n{% if is_incremental() %}\nAND _inserted_timestamp :: DATE >= (\n  SELECT\n    MAX(_inserted_timestamp) :: DATE - 2\n  FROM\n    {{ this }}\n)\n{% endif %}\n),\nremove_coll_in_separate_txn AS (\n  SELECT\n    block_timestamp,\n    block_number,\n    tx_hash,\n    'Remove collateral' AS action,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature,\n    CONCAT('0x', SUBSTR(topics [1] :: STRING, 27, 40)) AS asset,\n    CONCAT('0x', SUBSTR(topics [2] :: STRING, 27, 40)) AS lending_pool_address,\n    origin_from_address AS borrower,\n    CONCAT('0x', SUBSTR(topics [3] :: STRING, 27, 40)) AS borrower2,\n    TRY_TO_NUMBER(\n      PUBLIC.udf_hex_to_int(SUBSTR(DATA, 3, len(DATA))) :: INTEGER) AS amount,\n      CASE\n        WHEN borrower = borrower2 THEN 'no'\n        ELSE 'yes'\n      END AS borrower_is_a_contract,\n      _log_id,\n      _inserted_timestamp\n      FROM\n        {{ ref('silver__logs') }}\n      WHERE\n        topics [0] :: STRING = '0x6eabe333476233fd382224f233210cb808a7bc4c4de64f9d76628bf63c677b1a'\n        AND tx_hash NOT IN (\n          SELECT\n            tx_hash\n          FROM\n            borrow_txns\n        )\n        AND tx_hash NOT IN (\n          SELECT\n            tx_hash\n          FROM\n            repay_txns\n        )\n        AND tx_hash NOT IN (\n          SELECT\n            tx_hash\n          FROM\n            remove_asset\n        )\n        AND CONCAT('0x', SUBSTR(topics [2] :: STRING, 27, 40)) IN (\n          SELECT\n            pair_address\n          FROM\n            {{ ref('sushi__dim_kashi_pairs') }}\n        )\n\n{% if is_incremental() %}\nAND _inserted_timestamp :: DATE >= (\n  SELECT\n    MAX(_inserted_timestamp) :: DATE - 2\n  FROM\n    {{ this }}\n)\n{% endif %}\n),\ntotal AS (\n  SELECT\n    *\n  FROM\n    borrow\n  UNION ALL\n  SELECT\n    *\n  FROM\n    add_coll_same_txn\n  UNION ALL\n  SELECT\n    *\n  FROM\n    remove_coll_same_txn\n  UNION ALL\n  SELECT\n    *\n  FROM\n    repay\n  UNION ALL\n  SELECT\n    *\n  FROM\n    add_coll_in_separate_txn\n  UNION ALL\n  SELECT\n    *\n  FROM\n    remove_coll_in_separate_txn\n),\neth_prices AS (\n  SELECT\n    token_address,\n    HOUR,\n    symbol,\n    AVG(price) AS price\n  FROM\n    {{ source(\n      'ethereum',\n      'fact_hourly_token_prices'\n    ) }}\n  WHERE\n    1 = 1\n\n{% if is_incremental() %}\nAND HOUR :: DATE IN (\n  SELECT\n    DISTINCT block_timestamp :: DATE\n  FROM\n    total\n)\n{% else %}\n  AND HOUR :: DATE >= '2020-05-05'\n{% endif %}\nGROUP BY\n  token_address,\n  HOUR,\n  symbol\n),\npolygon_eth_crosstab AS (\n  SELECT\n    NAME,\n    symbol,\n    MAX (\n      CASE\n        WHEN platform_id = 'polygon-pos' THEN token_address\n        ELSE ''\n      END\n    ) AS polygon_address,\n    MAX (\n      CASE\n        WHEN platform = 'ethereum' THEN token_address\n        ELSE ''\n      END\n    ) AS eth_address\n  FROM\n    {{ source(\n      'symbols_cross_tab',\n      'MARKET_ASSET_METADATA'\n    ) }}\n  GROUP BY\n    1,\n    2\n  HAVING\n    polygon_address <> ''\n    AND eth_address <> ''\n  ORDER BY\n    1,\n    2\n),\npolygon_prices AS (\n  SELECT\n    DISTINCT ep.token_address,\n    ep.hour,\n    ep.symbol,\n    ep.price,\n    CASE\n      WHEN pec.polygon_address = '0x0000000000000000000000000000000000001010' THEN '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270'\n      ELSE pec.polygon_address\n    END AS polygon_address\n  FROM\n    eth_prices ep\n    LEFT JOIN polygon_eth_crosstab pec\n    ON ep.token_address = pec.eth_Address\n),\nlabels AS (\n  SELECT\n    *\n  FROM\n    {{ ref('sushi__dim_kashi_pairs') }}\n)\nSELECT\n  A.block_timestamp,\n  A.block_number,\n  A.tx_hash,\n  A.action,\n  A.origin_from_address,\n  A.origin_to_address,\n  A.origin_function_signature,\n  A.borrower2 AS borrower,\n  A.borrower_is_a_contract,\n  A.lending_pool_address,\n  b.pair_name AS lending_pool,\n  A.asset,\n  CASE\n  when action in ('add collateral','Remove collateral') then b.collateral_symbol\n  else b.asset_symbol \n  end AS symbol,\n  CASE\n  when b.collateral_decimals is null THEN a.amount\n  when b.asset_decimals is null then a.amount\n  WHEN b.collateral_decimals is not null and action = 'add collateral' THEN (A.amount/ pow(10, b.collateral_decimals))\n  WHEN b.collateral_decimals is not null and action = 'Remove collateral' THEN (A.amount/ pow(10, b.collateral_decimals))\n  WHEN b.asset_decimals is not null and action = 'Borrow' then (A.amount/ pow(10, b.asset_decimals))\n  WHEN b.asset_decimals is not null and action = 'Repay' then (A.amount/ pow(10, b.asset_decimals))\n  END AS amount,\n  CASE\n    WHEN action = 'add collateral' THEN (\n      A.amount * C.price / pow(\n        10,\n        b.collateral_decimals\n      )\n    )\n    WHEN action = 'Remove collateral' THEN (\n      A.amount * C.price / pow(\n        10,\n        b.collateral_decimals\n      )\n    )\n    ELSE (A.amount * C.price / pow(10, b.asset_decimals))\n  END AS amount_USD,\n  A._log_id,\n  _inserted_timestamp\nFROM\n  total A\n  LEFT JOIN polygon_prices C\n  ON LOWER(\n    A.asset\n  ) = LOWER(\n    C.polygon_address\n  )\n  AND DATE_TRUNC(\n    'hour',\n    A.block_timestamp\n  ) = C.hour\n  LEFT JOIN labels b\n  ON A.lending_pool_address = b.pair_address", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.polygon_models.ethereum.fact_hourly_token_prices", "source.polygon_models.symbols_cross_tab.MARKET_ASSET_METADATA", "model.polygon_models.silver__logs", "model.polygon_models.silver__logs", "model.polygon_models.silver__logs", "model.polygon_models.silver__logs", "model.polygon_models.silver__logs", "model.polygon_models.sushi__dim_kashi_pairs", "model.polygon_models.silver__logs", "model.polygon_models.sushi__dim_kashi_pairs", "model.polygon_models.silver__logs", "model.polygon_models.sushi__dim_kashi_pairs", "model.polygon_models.silver__logs", "model.polygon_models.sushi__dim_kashi_pairs", "model.polygon_models.silver__logs", "model.polygon_models.sushi__dim_kashi_pairs", "model.polygon_models.silver__logs", "model.polygon_models.sushi__dim_kashi_pairs", "model.polygon_models.sushi__dim_kashi_pairs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_log_id", "on_schema_change": "ignore", "grants": {}, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "POLYGON_DEV", "schema": "sushi", "fqn": ["polygon_models", "sushi", "sushi__ez_borrowing"], "unique_id": "model.polygon_models.sushi__ez_borrowing", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "sushi/sushi__ez_borrowing.sql", "original_file_path": "models/sushi/sushi__ez_borrowing.sql", "name": "sushi__ez_borrowing", "alias": "ez_borrowing", "checksum": {"name": "sha256", "checksum": "d7e7c300ea22df31e8e17057b54b5e18958d87dc54e219997459d9c239663e21"}, "tags": [], "refs": [["silver__logs"], ["silver__logs"], ["silver__logs"], ["silver__logs"], ["silver__logs"], ["sushi__dim_kashi_pairs"], ["silver__logs"], ["sushi__dim_kashi_pairs"], ["silver__logs"], ["sushi__dim_kashi_pairs"], ["silver__logs"], ["sushi__dim_kashi_pairs"], ["silver__logs"], ["sushi__dim_kashi_pairs"], ["silver__logs"], ["sushi__dim_kashi_pairs"], ["sushi__dim_kashi_pairs"]], "sources": [["ethereum", "fact_hourly_token_prices"], ["symbols_cross_tab", "MARKET_ASSET_METADATA"]], "metrics": [], "description": "This is a table that shows all the events on polygon that are related to Borrowing or repaying the loan for sushi", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "Also known as block height. The block number, which indicates the length of the blockchain, increases after the addition of each new block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block was produced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "Transaction hash is a unique 66-character identifier that is generated when a transaction is executed. This field will not be unique in this table, as a given transaction can include multiple events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LENDING_POOL_ADDRESS": {"name": "LENDING_POOL_ADDRESS", "description": "The address of the lending pool. For sushi this will be the address of the kashi pair.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ACTION": {"name": "ACTION", "description": "The action that the user is taking.\n Borrow: user is borrowing an asset\n Repay: user is repaying the asset that they have borrowed in a previous loan\n Add collateral: user is depositing collateral for their loan. This happens some times in the same transaction as the borrowing transaction and some times in a separate transaction. \n Remove collateral: user is withdrawing collateral. This happens some times in the same transaction as the borrowing transaction and some times in a separate transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT": {"name": "AMOUNT", "description": "The meaning depends on the action:\nBorrow: The amount of the asset that the user is borrowing or\nRepay: The amount of the asset that the user is repaying\nAdd collateral: The amount of collateral that the user is depositing\nRemove collateral: The amount of collateral that the user is withdrawing", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT_USD": {"name": "AMOUNT_USD", "description": "The meaning depends on the action:\nBorrow: The amount of the asset in USD that the user is borrowing or\nRepay: The amount of the asset in USD that the user is repaying\nAdd collateral: The amount of collateral in USD that the user is depositing\nRemove collateral: The amount of collateral in USD that the user is withdrawing", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET": {"name": "ASSET", "description": "The address of the asset/collateral token that is being borrowed/repayed/deposited etc. depending on the action", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYMBOL": {"name": "SYMBOL", "description": "The symbol of the asset/collateral that is payed or received, depending on the action", "meta": {}, "data_type": null, "quote": null, "tags": []}, "Borrower": {"name": "Borrower", "description": "Its the address of the user who is Borrowing or repaying the loan, depending on the action.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_LOG_ID": {"name": "_LOG_ID", "description": "This is the primary key for this table. This is a concatenation of the transaction hash and the event index at which the event occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FROM_ADDRESS": {"name": "ORIGIN_FROM_ADDRESS", "description": "The address of the user who initiates the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_TO_ADDRESS": {"name": "ORIGIN_TO_ADDRESS", "description": "The person who initiates the depositing transaction has to interact with this address. This address belongs to the lending platform or directs the transactio there.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LENDING_POOL": {"name": "LENDING_POOL", "description": "The name of the lending pool.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BORROWER_IS_A_CONTRACT": {"name": "BORROWER_IS_A_CONTRACT", "description": "If the depositor of collateral is a contract then its a Yes, if the depositor of collateral is a normal address it is a No.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "polygon_models://models/sushi/sushi__ez_borrowing.yml", "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_borrowing.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "incremental_strategy": "delete+insert", "persist_docs": {"relation": true, "columns": true}, "unique_key": "_log_id", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1669126490.254121, "compiled_sql": "\n\nWITH borrow_txns AS (\n\n  SELECT\n    DISTINCT tx_hash,\n    contract_address\n  FROM\n    POLYGON_DEV.silver.logs\n  WHERE\n    topics [0] :: STRING = '0x3a5151e57d3bc9798e7853034ac52293d1a0e12a2b44725e75b03b21f86477a6'\n\n\nAND _inserted_timestamp :: DATE >= (\n  SELECT\n    MAX(_inserted_timestamp) :: DATE - 2\n  FROM\n    POLYGON_DEV.sushi.ez_borrowing\n)\n\n),\nrepay_txns AS (\n  SELECT\n    DISTINCT tx_hash,\n    contract_address\n  FROM\n    POLYGON_DEV.silver.logs\n  WHERE\n    topics [0] :: STRING = '0xc8e512d8f188ca059984b5853d2bf653da902696b8512785b182b2c813789a6e'\n\n\nAND _inserted_timestamp :: DATE >= (\n  SELECT\n    MAX(_inserted_timestamp) :: DATE - 2\n  FROM\n    POLYGON_DEV.sushi.ez_borrowing\n)\n\n),\nadd_asset AS (\n  SELECT\n    DISTINCT tx_hash,\n    contract_address\n  FROM\n    POLYGON_DEV.silver.logs\n  WHERE\n    topics [0] :: STRING = '0x30a8c4f9ab5af7e1309ca87c32377d1a83366c5990472dbf9d262450eae14e38'\n\n\nAND _inserted_timestamp :: DATE >= (\n  SELECT\n    MAX(_inserted_timestamp) :: DATE - 2\n  FROM\n    POLYGON_DEV.sushi.ez_borrowing\n)\n\n),\nremove_asset AS (\n  SELECT\n    DISTINCT tx_hash,\n    contract_address\n  FROM\n    POLYGON_DEV.silver.logs\n  WHERE\n    topics [0] :: STRING = '0x6e853a5fd6b51d773691f542ebac8513c9992a51380d4c342031056a64114228'\n\n\nAND _inserted_timestamp :: DATE >= (\n  SELECT\n    MAX(_inserted_timestamp) :: DATE - 2\n  FROM\n    POLYGON_DEV.sushi.ez_borrowing\n)\n\n),\nborrow AS (\n  SELECT\n    block_timestamp,\n    block_number,\n    tx_hash,\n    'Borrow' AS action,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature,\n    CONCAT ('0x', SUBSTR(topics [1] :: STRING, 27, 40)) AS asset,\n    CONCAT ('0x', SUBSTR(topics [2] :: STRING, 27, 40)) AS lending_pool_address,\n    origin_from_address AS borrower,\n    CONCAT ('0x', SUBSTR(topics [3] :: STRING, 27, 40)) AS borrower2,\n    TRY_TO_NUMBER(\n      PUBLIC.udf_hex_to_int(SUBSTR(DATA, 3, len(DATA))) :: INTEGER) AS amount,\n      CASE\n        WHEN borrower = borrower2 THEN 'no'\n        ELSE 'yes'\n      END AS borrower_is_a_contract,\n      _log_id,\n      _inserted_timestamp\n      FROM\n        POLYGON_DEV.silver.logs\n      WHERE\n        topics [0] :: STRING = '0x6eabe333476233fd382224f233210cb808a7bc4c4de64f9d76628bf63c677b1a'\n        AND tx_hash IN (\n          SELECT\n            tx_hash\n          FROM\n            borrow_txns\n        )\n        AND CONCAT('0x', SUBSTR(topics [2] :: STRING, 27, 40)) IN (\n          SELECT\n            pair_address\n          FROM\n            POLYGON_DEV.sushi.dim_kashi_pairs\n        )\n\n\nAND _inserted_timestamp :: DATE >= (\n  SELECT\n    MAX(_inserted_timestamp) :: DATE - 2\n  FROM\n    POLYGON_DEV.sushi.ez_borrowing\n)\n\n),\nadd_coll_same_txn AS (\n  SELECT\n    block_timestamp,\n    block_number,\n    tx_hash,\n    'add collateral' AS action,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature,\n    CONCAT ('0x', SUBSTR(topics [1] :: STRING, 27, 40)) AS asset,\n    CONCAT('0x', SUBSTR(topics [3] :: STRING, 27, 40)) AS lending_pool_address,\n    origin_from_address AS borrower,\n    CONCAT ('0x', SUBSTR(topics [2] :: STRING, 27, 40)) AS borrower2,\n    TRY_TO_NUMBER(\n      PUBLIC.udf_hex_to_int(SUBSTR(DATA, 3, len(DATA))) :: INTEGER) AS amount,\n      CASE\n        WHEN borrower = borrower2 THEN 'no'\n        ELSE 'yes'\n      END AS borrower_is_a_contract,\n      _log_id,\n      _inserted_timestamp\n      FROM\n        POLYGON_DEV.silver.logs\n      WHERE\n        topics [0] :: STRING = '0x6eabe333476233fd382224f233210cb808a7bc4c4de64f9d76628bf63c677b1a'\n        AND tx_hash IN (\n          SELECT\n            tx_hash\n          FROM\n            borrow_txns\n        )\n        AND CONCAT('0x', SUBSTR(topics [3] :: STRING, 27, 40)) IN (\n          SELECT\n            pair_address\n          FROM\n            POLYGON_DEV.sushi.dim_kashi_pairs\n        )\n\n\nAND _inserted_timestamp :: DATE >= (\n  SELECT\n    MAX(_inserted_timestamp) :: DATE - 2\n  FROM\n    POLYGON_DEV.sushi.ez_borrowing\n)\n\n),\nrepay AS (\n  SELECT\n    block_timestamp,\n    block_number,\n    tx_hash,\n    'Repay' AS action,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature,\n    CONCAT ('0x', SUBSTR(topics [1] :: STRING, 27, 40)) AS asset,\n    CONCAT ('0x', SUBSTR(topics [3] :: STRING, 27, 40)) AS lending_pool_address,\n    origin_from_address AS borrower,\n    CONCAT ('0x', SUBSTR(topics [2] :: STRING, 27, 40)) AS borrower2,\n    TRY_TO_NUMBER(\n      PUBLIC.udf_hex_to_int(SUBSTR(DATA, 3, len(DATA))) :: INTEGER) AS amount,\n      CASE\n        WHEN borrower = borrower2 THEN 'no'\n        ELSE 'yes'\n      END AS lender_is_a_contract,\n      _log_id,\n      _inserted_timestamp\n      FROM\n        POLYGON_DEV.silver.logs\n      WHERE\n        topics [0] :: STRING = '0x6eabe333476233fd382224f233210cb808a7bc4c4de64f9d76628bf63c677b1a'\n        AND tx_hash IN (\n          SELECT\n            tx_hash\n          FROM\n            repay_txns\n        )\n        AND CONCAT('0x', SUBSTR(topics [3] :: STRING, 27, 40)) IN (\n          SELECT\n            pair_address\n          FROM\n            POLYGON_DEV.sushi.dim_kashi_pairs\n        )\n\n\nAND _inserted_timestamp :: DATE >= (\n  SELECT\n    MAX(_inserted_timestamp) :: DATE - 2\n  FROM\n    POLYGON_DEV.sushi.ez_borrowing\n)\n\n),\nremove_coll_same_txn AS (\n  SELECT\n    block_timestamp,\n    block_number,\n    tx_hash,\n    'Remove collateral' AS action,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature,\n    CONCAT('0x', SUBSTR(topics [1] :: STRING, 27, 40)) AS asset,\n    CONCAT('0x', SUBSTR(topics [2] :: STRING, 27, 40)) AS lending_pool_address,\n    origin_from_address AS borrower,\n    CONCAT('0x', SUBSTR(topics [3] :: STRING, 27, 40)) AS borrower2,\n    TRY_TO_NUMBER(\n      PUBLIC.udf_hex_to_int(SUBSTR(DATA, 3, len(DATA))) :: INTEGER) AS amount,\n      CASE\n        WHEN borrower = borrower2 THEN 'no'\n        ELSE 'yes'\n      END AS borrower_is_a_contract,\n      _log_id,\n      _inserted_timestamp\n      FROM\n        POLYGON_DEV.silver.logs\n      WHERE\n        topics [0] :: STRING = '0x6eabe333476233fd382224f233210cb808a7bc4c4de64f9d76628bf63c677b1a'\n        AND tx_hash IN (\n          SELECT\n            tx_hash\n          FROM\n            repay_txns\n        )\n        AND CONCAT('0x', SUBSTR(topics [2] :: STRING, 27, 40)) IN (\n          SELECT\n            pair_address\n          FROM\n            POLYGON_DEV.sushi.dim_kashi_pairs\n        )\n\n\nAND _inserted_timestamp :: DATE >= (\n  SELECT\n    MAX(_inserted_timestamp) :: DATE - 2\n  FROM\n    POLYGON_DEV.sushi.ez_borrowing\n)\n\n),\nadd_coll_in_separate_txn AS (\n  SELECT\n    block_timestamp,\n    block_number,\n    tx_hash,\n    'add collateral' AS action,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature,\n    CONCAT('0x', SUBSTR(topics [1] :: STRING, 27, 40)) AS asset,\n    CONCAT('0x', SUBSTR(topics [3] :: STRING, 27, 40)) AS lending_pool_address,\n    origin_from_address AS borrower,\n    CONCAT('0x', SUBSTR(topics [2] :: STRING, 27, 40)) AS borrower2,\n    TRY_TO_NUMBER(\n      PUBLIC.udf_hex_to_int(SUBSTR(DATA, 3, len(DATA))) :: INTEGER) AS amount,\n      CASE\n        WHEN borrower = borrower2 THEN 'no'\n        ELSE 'yes'\n      END AS borrower_is_a_contract,\n      _log_id,\n      _inserted_timestamp\n      FROM\n        POLYGON_DEV.silver.logs\n      WHERE\n        topics [0] :: STRING = '0x6eabe333476233fd382224f233210cb808a7bc4c4de64f9d76628bf63c677b1a'\n        AND tx_hash NOT IN (\n          SELECT\n            tx_hash\n          FROM\n            borrow_txns\n        )\n        AND tx_hash NOT IN (\n          SELECT\n            tx_hash\n          FROM\n            repay_txns\n        )\n        AND tx_hash NOT IN (\n          SELECT\n            tx_hash\n          FROM\n            add_asset\n        )\n        AND CONCAT('0x', SUBSTR(topics [3] :: STRING, 27, 40)) IN (\n          SELECT\n            pair_address\n          FROM\n            POLYGON_DEV.sushi.dim_kashi_pairs\n        )\n\n\nAND _inserted_timestamp :: DATE >= (\n  SELECT\n    MAX(_inserted_timestamp) :: DATE - 2\n  FROM\n    POLYGON_DEV.sushi.ez_borrowing\n)\n\n),\nremove_coll_in_separate_txn AS (\n  SELECT\n    block_timestamp,\n    block_number,\n    tx_hash,\n    'Remove collateral' AS action,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature,\n    CONCAT('0x', SUBSTR(topics [1] :: STRING, 27, 40)) AS asset,\n    CONCAT('0x', SUBSTR(topics [2] :: STRING, 27, 40)) AS lending_pool_address,\n    origin_from_address AS borrower,\n    CONCAT('0x', SUBSTR(topics [3] :: STRING, 27, 40)) AS borrower2,\n    TRY_TO_NUMBER(\n      PUBLIC.udf_hex_to_int(SUBSTR(DATA, 3, len(DATA))) :: INTEGER) AS amount,\n      CASE\n        WHEN borrower = borrower2 THEN 'no'\n        ELSE 'yes'\n      END AS borrower_is_a_contract,\n      _log_id,\n      _inserted_timestamp\n      FROM\n        POLYGON_DEV.silver.logs\n      WHERE\n        topics [0] :: STRING = '0x6eabe333476233fd382224f233210cb808a7bc4c4de64f9d76628bf63c677b1a'\n        AND tx_hash NOT IN (\n          SELECT\n            tx_hash\n          FROM\n            borrow_txns\n        )\n        AND tx_hash NOT IN (\n          SELECT\n            tx_hash\n          FROM\n            repay_txns\n        )\n        AND tx_hash NOT IN (\n          SELECT\n            tx_hash\n          FROM\n            remove_asset\n        )\n        AND CONCAT('0x', SUBSTR(topics [2] :: STRING, 27, 40)) IN (\n          SELECT\n            pair_address\n          FROM\n            POLYGON_DEV.sushi.dim_kashi_pairs\n        )\n\n\nAND _inserted_timestamp :: DATE >= (\n  SELECT\n    MAX(_inserted_timestamp) :: DATE - 2\n  FROM\n    POLYGON_DEV.sushi.ez_borrowing\n)\n\n),\ntotal AS (\n  SELECT\n    *\n  FROM\n    borrow\n  UNION ALL\n  SELECT\n    *\n  FROM\n    add_coll_same_txn\n  UNION ALL\n  SELECT\n    *\n  FROM\n    remove_coll_same_txn\n  UNION ALL\n  SELECT\n    *\n  FROM\n    repay\n  UNION ALL\n  SELECT\n    *\n  FROM\n    add_coll_in_separate_txn\n  UNION ALL\n  SELECT\n    *\n  FROM\n    remove_coll_in_separate_txn\n),\neth_prices AS (\n  SELECT\n    token_address,\n    HOUR,\n    symbol,\n    AVG(price) AS price\n  FROM\n    ethereum.core.fact_hourly_token_prices\n  WHERE\n    1 = 1\n\n\nAND HOUR :: DATE IN (\n  SELECT\n    DISTINCT block_timestamp :: DATE\n  FROM\n    total\n)\n\nGROUP BY\n  token_address,\n  HOUR,\n  symbol\n),\npolygon_eth_crosstab AS (\n  SELECT\n    NAME,\n    symbol,\n    MAX (\n      CASE\n        WHEN platform_id = 'polygon-pos' THEN token_address\n        ELSE ''\n      END\n    ) AS polygon_address,\n    MAX (\n      CASE\n        WHEN platform = 'ethereum' THEN token_address\n        ELSE ''\n      END\n    ) AS eth_address\n  FROM\n    FLIPSIDE_PROD_DB.SILVER.MARKET_ASSET_METADATA\n  GROUP BY\n    1,\n    2\n  HAVING\n    polygon_address <> ''\n    AND eth_address <> ''\n  ORDER BY\n    1,\n    2\n),\npolygon_prices AS (\n  SELECT\n    DISTINCT ep.token_address,\n    ep.hour,\n    ep.symbol,\n    ep.price,\n    CASE\n      WHEN pec.polygon_address = '0x0000000000000000000000000000000000001010' THEN '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270'\n      ELSE pec.polygon_address\n    END AS polygon_address\n  FROM\n    eth_prices ep\n    LEFT JOIN polygon_eth_crosstab pec\n    ON ep.token_address = pec.eth_Address\n),\nlabels AS (\n  SELECT\n    *\n  FROM\n    POLYGON_DEV.sushi.dim_kashi_pairs\n)\nSELECT\n  A.block_timestamp,\n  A.block_number,\n  A.tx_hash,\n  A.action,\n  A.origin_from_address,\n  A.origin_to_address,\n  A.origin_function_signature,\n  A.borrower2 AS borrower,\n  A.borrower_is_a_contract,\n  A.lending_pool_address,\n  b.pair_name AS lending_pool,\n  A.asset,\n  CASE\n  when action in ('add collateral','Remove collateral') then b.collateral_symbol\n  else b.asset_symbol \n  end AS symbol,\n  CASE\n  when b.collateral_decimals is null THEN a.amount\n  when b.asset_decimals is null then a.amount\n  WHEN b.collateral_decimals is not null and action = 'add collateral' THEN (A.amount/ pow(10, b.collateral_decimals))\n  WHEN b.collateral_decimals is not null and action = 'Remove collateral' THEN (A.amount/ pow(10, b.collateral_decimals))\n  WHEN b.asset_decimals is not null and action = 'Borrow' then (A.amount/ pow(10, b.asset_decimals))\n  WHEN b.asset_decimals is not null and action = 'Repay' then (A.amount/ pow(10, b.asset_decimals))\n  END AS amount,\n  CASE\n    WHEN action = 'add collateral' THEN (\n      A.amount * C.price / pow(\n        10,\n        b.collateral_decimals\n      )\n    )\n    WHEN action = 'Remove collateral' THEN (\n      A.amount * C.price / pow(\n        10,\n        b.collateral_decimals\n      )\n    )\n    ELSE (A.amount * C.price / pow(10, b.asset_decimals))\n  END AS amount_USD,\n  A._log_id,\n  _inserted_timestamp\nFROM\n  total A\n  LEFT JOIN polygon_prices C\n  ON LOWER(\n    A.asset\n  ) = LOWER(\n    C.polygon_address\n  )\n  AND DATE_TRUNC(\n    'hour',\n    A.block_timestamp\n  ) = C.hour\n  LEFT JOIN labels b\n  ON A.lending_pool_address = b.pair_address", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.sushi.ez_borrowing"}, "model.polygon_models.sushi__dim_kashi_pairs": {"raw_sql": "{{ config(\n    materialized = 'table'\n) }}\n\n    SELECT\n        pair_address, \n        pair_symbol as pair_name,\n        pair_decimal as pair_decimals,\n        asset_symbol,\n        asset_address,\n        collateral_symbol,\n        collateral_address,\n        asset_decimal as asset_decimals,\n        collateral_decimal as collateral_decimals  \n    FROM\n         {{ source(\n            'polygon_dex_pools',\n            'SUSHI_DIM_KASHI_PAIRS'\n        ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.polygon_models.polygon_dex_pools.SUSHI_DIM_KASHI_PAIRS"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "POLYGON_DEV", "schema": "sushi", "fqn": ["polygon_models", "sushi", "sushi__dim_kashi_pairs"], "unique_id": "model.polygon_models.sushi__dim_kashi_pairs", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "sushi/sushi__dim_kashi_pairs.sql", "original_file_path": "models/sushi/sushi__dim_kashi_pairs.sql", "name": "sushi__dim_kashi_pairs", "alias": "dim_kashi_pairs", "checksum": {"name": "sha256", "checksum": "2d23759184da53ffbc9f8355db13c02efbd4c3d7382cd470ed782b615693c75e"}, "tags": [], "refs": [], "sources": [["polygon_dex_pools", "SUSHI_DIM_KASHI_PAIRS"]], "metrics": [], "description": "This table contains details on different Kashi pairs belonging to sushiswap on the polygon blockchain", "columns": {"PAIR_ADDRESS": {"name": "PAIR_ADDRESS", "description": "The address of the lending pool. For sushi this will be the address of the kashi pair.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PAIR_NAME": {"name": "PAIR_NAME", "description": "The name of the lending pool.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_SYMBOL": {"name": "ASSET_SYMBOL", "description": "The symbol of the asset that is lent or withdrawn, depending on the action", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_ADDRESS": {"name": "ASSET_ADDRESS", "description": "The address of the asset in the token pair. This asset is either deposited ot withdrawn for lending purposes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COLLATERAL_SYMBOL": {"name": "COLLATERAL_SYMBOL", "description": "The symbol of the asset that is used for collateral when borrowing funds.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COLLATERAL_ADDRESS": {"name": "COLLATERAL_ADDRESS", "description": "The address of the asset that is used for collateral when borrowing funds.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ASSET_DECIMALS": {"name": "ASSET_DECIMALS", "description": "The number of decimal places this contract needs adjusted where token values exist. For example, use the decimal field to correctly transform raw amounts in ```fact_transactions```.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "COLLATERAL_DECIMALS": {"name": "COLLATERAL_DECIMALS", "description": "The number of decimal places this contract needs adjusted where token values exist. For example, use the decimal field to correctly transform raw amounts in ```fact_transactions```.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "polygon_models://models/sushi/sushi__dim_kashi_pairs.yml", "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__dim_kashi_pairs.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1669126490.373079, "compiled_sql": "\n\n    SELECT\n        pair_address, \n        pair_symbol as pair_name,\n        pair_decimal as pair_decimals,\n        asset_symbol,\n        asset_address,\n        collateral_symbol,\n        collateral_address,\n        asset_decimal as asset_decimals,\n        collateral_decimal as collateral_decimals  \n    FROM\n         polygon.bronze.SUSHI_DIM_KASHI_PAIRS", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.sushi.dim_kashi_pairs"}, "seed.polygon_models.bronze__sushi_dim_dex_pools": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "POLYGON_DEV", "schema": "bronze", "fqn": ["polygon_models", "bronze__sushi_dim_dex_pools"], "unique_id": "seed.polygon_models.bronze__sushi_dim_dex_pools", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "bronze__sushi_dim_dex_pools.csv", "original_file_path": "data/bronze__sushi_dim_dex_pools.csv", "name": "bronze__sushi_dim_dex_pools", "alias": "sushi_dim_dex_pools", "checksum": {"name": "sha256", "checksum": "2e9f62bdb2c4cb3093156b13a1d2b265b61e0209d229e275cdbac64c53d68fa0"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1669126488.938228, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.bronze.sushi_dim_dex_pools"}, "seed.polygon_models.bronze__sushi_dim_kashi_pairs": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "POLYGON_DEV", "schema": "bronze", "fqn": ["polygon_models", "bronze__sushi_dim_kashi_pairs"], "unique_id": "seed.polygon_models.bronze__sushi_dim_kashi_pairs", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "bronze__sushi_dim_kashi_pairs.csv", "original_file_path": "data/bronze__sushi_dim_kashi_pairs.csv", "name": "bronze__sushi_dim_kashi_pairs", "alias": "sushi_dim_kashi_pairs", "checksum": {"name": "sha256", "checksum": "901b209a74f0c5ef7e8a432e2ff0a63b0206fd17b6c951161e3fa2ec1c7f0fd0"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1669126488.939927, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.bronze.sushi_dim_kashi_pairs"}, "operation.polygon_models.polygon_models-on-run-start-0": {"raw_sql": "{{ create_sps() }}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.polygon_models.create_sps"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "POLYGON_DEV", "schema": "polygon_models-on-run-start-0", "fqn": ["polygon_models", "hooks", "polygon_models-on-run-start-0"], "unique_id": "operation.polygon_models.polygon_models-on-run-start-0", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "hooks/polygon_models-on-run-start-0.sql", "original_file_path": "./dbt_project.yml", "name": "polygon_models-on-run-start-0", "alias": "", "checksum": {"name": "sha256", "checksum": "06319979aa7f14438184bff0eef3d1e78cec12ce22f1b201c37322eebaaec1eb"}, "tags": ["on-run-start"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/./dbt_project.yml/hooks/polygon_models-on-run-start-0.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1669126488.959427, "compiled_sql": "\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 0}, "operation.polygon_models.polygon_models-on-run-start-1": {"raw_sql": "{{ create_udfs() }}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.polygon_models.create_udfs"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "POLYGON_DEV", "schema": "polygon_models-on-run-start-1", "fqn": ["polygon_models", "hooks", "polygon_models-on-run-start-1"], "unique_id": "operation.polygon_models.polygon_models-on-run-start-1", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "hooks/polygon_models-on-run-start-1.sql", "original_file_path": "./dbt_project.yml", "name": "polygon_models-on-run-start-1", "alias": "", "checksum": {"name": "sha256", "checksum": "06319979aa7f14438184bff0eef3d1e78cec12ce22f1b201c37322eebaaec1eb"}, "tags": ["on-run-start"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/./dbt_project.yml/hooks/polygon_models-on-run-start-1.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1669126488.9661582, "compiled_sql": "\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 1}, "operation.polygon_models.polygon_models-on-run-start-2": {"raw_sql": "{{ create_tasks() }}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.polygon_models.create_tasks"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "POLYGON_DEV", "schema": "polygon_models-on-run-start-2", "fqn": ["polygon_models", "hooks", "polygon_models-on-run-start-2"], "unique_id": "operation.polygon_models.polygon_models-on-run-start-2", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "hooks/polygon_models-on-run-start-2.sql", "original_file_path": "./dbt_project.yml", "name": "polygon_models-on-run-start-2", "alias": "", "checksum": {"name": "sha256", "checksum": "06319979aa7f14438184bff0eef3d1e78cec12ce22f1b201c37322eebaaec1eb"}, "tags": ["on-run-start"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/./dbt_project.yml/hooks/polygon_models-on-run-start-2.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1669126488.97711, "compiled_sql": "\n  \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 2}, "test.polygon_models.not_null_silver__logs_BLOCK_NUMBER.f98b235d4c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__logs_BLOCK_NUMBER"], "unique_id": "test.polygon_models.not_null_silver__logs_BLOCK_NUMBER.f98b235d4c", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__logs_BLOCK_NUMBER.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "not_null_silver__logs_BLOCK_NUMBER", "alias": "logs_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__logs.yml/not_null_silver__logs_BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.1284459, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.logs\nwhere BLOCK_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.logs_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__logs"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_BLOCK_NUMBER__NUMBER.73461cc432": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6bced39dcb284fa8dad23c0b49df1248\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__logs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6bced39dcb284fa8dad23c0b49df1248", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_BLOCK_NUMBER__NUMBER"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_BLOCK_NUMBER__NUMBER.73461cc432", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_6bced39dcb284fa8dad23c0b49df1248.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_BLOCK_NUMBER__NUMBER", "alias": "logs_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__logs.yml/dbt_expectations_expect_column_6bced39dcb284fa8dad23c0b49df1248.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_6bced39dcb284fa8dad23c0b49df1248"}, "created_at": 1669126489.1303208, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('_LOG_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INPUTS' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOPICS' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_REMOVED' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_STATUS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_NUMBER'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.logs_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__logs"}, "test.polygon_models.not_null_silver__logs_BLOCK_TIMESTAMP.ca6209335c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__logs_BLOCK_TIMESTAMP"], "unique_id": "test.polygon_models.not_null_silver__logs_BLOCK_TIMESTAMP.ca6209335c", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__logs_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "not_null_silver__logs_BLOCK_TIMESTAMP", "alias": "logs_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__logs.yml/not_null_silver__logs_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.142781, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.logs\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.logs_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__logs"}, "test.polygon_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__logs_BLOCK_TIMESTAMP__day__1.79d0ca0413": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_246437673a44a698488babf02633f091\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__logs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_246437673a44a698488babf02633f091", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__logs_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.polygon_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__logs_BLOCK_TIMESTAMP__day__1.79d0ca0413", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_row_va_246437673a44a698488babf02633f091.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__logs_BLOCK_TIMESTAMP__day__1", "alias": "logs_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__logs.yml/dbt_expectations_expect_row_va_246437673a44a698488babf02633f091.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_246437673a44a698488babf02633f091"}, "created_at": 1669126489.144726, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as TIMESTAMP)) as max_timestamp\n    from\n        POLYGON_DEV.silver.logs\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as TIMESTAMP) <= convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as TIMESTAMP))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        )\n\n as TIMESTAMP)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.logs_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__logs"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c39585c6f3": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3a3eb74bc46de42ee273692cd9b3a7df\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__logs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3a3eb74bc46de42ee273692cd9b3a7df", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c39585c6f3", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_3a3eb74bc46de42ee273692cd9b3a7df.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "logs_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__logs.yml/dbt_expectations_expect_column_3a3eb74bc46de42ee273692cd9b3a7df.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_3a3eb74bc46de42ee273692cd9b3a7df"}, "created_at": 1669126489.189261, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('_LOG_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INPUTS' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOPICS' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_REMOVED' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_STATUS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.logs_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__logs"}, "test.polygon_models.not_null_silver__logs_TX_HASH.18b09ee14d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__logs_TX_HASH"], "unique_id": "test.polygon_models.not_null_silver__logs_TX_HASH.18b09ee14d", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__logs_TX_HASH.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "not_null_silver__logs_TX_HASH", "alias": "logs_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__logs.yml/not_null_silver__logs_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.195662, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.logs\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.logs_TX_HASH", "column_name": "TX_HASH", "file_key_name": "models.silver__logs"}, "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_TX_HASH__0_xX_0_9a_fA_F_.0eee0960b6": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6030dcae62096d3ca68fc728e3d15a65\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__logs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6030dcae62096d3ca68fc728e3d15a65", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__logs_TX_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_TX_HASH__0_xX_0_9a_fA_F_.0eee0960b6", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_6030dcae62096d3ca68fc728e3d15a65.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__logs_TX_HASH__0_xX_0_9a_fA_F_", "alias": "logs_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__logs.yml/dbt_expectations_expect_column_6030dcae62096d3ca68fc728e3d15a65.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_6030dcae62096d3ca68fc728e3d15a65"}, "created_at": 1669126489.197526, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(TX_HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from POLYGON_DEV.silver.logs\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.logs_TX_HASH", "column_name": "TX_HASH", "file_key_name": "models.silver__logs"}, "test.polygon_models.not_null_silver__logs_EVENT_INDEX.b97eeb39d7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EVENT_INDEX", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__logs_EVENT_INDEX"], "unique_id": "test.polygon_models.not_null_silver__logs_EVENT_INDEX.b97eeb39d7", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__logs_EVENT_INDEX.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "not_null_silver__logs_EVENT_INDEX", "alias": "logs_EVENT_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__logs.yml/not_null_silver__logs_EVENT_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.217268, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.logs\nwhere EVENT_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.logs_EVENT_INDEX", "column_name": "EVENT_INDEX", "file_key_name": "models.silver__logs"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_INDEX__NUMBER__FLOAT.d0df352178": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c696cc611f4a35c037364ebeebfefb43\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "EVENT_INDEX", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__logs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c696cc611f4a35c037364ebeebfefb43", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_INDEX__NUMBER__FLOAT"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_INDEX__NUMBER__FLOAT.d0df352178", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_c696cc611f4a35c037364ebeebfefb43.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_INDEX__NUMBER__FLOAT", "alias": "logs_EVENT_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__logs.yml/dbt_expectations_expect_column_c696cc611f4a35c037364ebeebfefb43.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c696cc611f4a35c037364ebeebfefb43"}, "created_at": 1669126489.221041, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('_LOG_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INPUTS' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOPICS' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_REMOVED' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_STATUS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'EVENT_INDEX'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.logs_EVENT_INDEX", "column_name": "EVENT_INDEX", "file_key_name": "models.silver__logs"}, "test.polygon_models.not_null_silver__logs_CONTRACT_ADDRESS.b78d8c86eb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CONTRACT_ADDRESS", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__logs_CONTRACT_ADDRESS"], "unique_id": "test.polygon_models.not_null_silver__logs_CONTRACT_ADDRESS.b78d8c86eb", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__logs_CONTRACT_ADDRESS.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "not_null_silver__logs_CONTRACT_ADDRESS", "alias": "logs_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__logs.yml/not_null_silver__logs_CONTRACT_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.230201, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.logs\nwhere CONTRACT_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.logs_CONTRACT_ADDRESS", "column_name": "CONTRACT_ADDRESS", "file_key_name": "models.silver__logs"}, "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.28bc84b2ae": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8bbb281f525daefe2f856f6c8b08e8e9\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "CONTRACT_ADDRESS", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__logs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8bbb281f525daefe2f856f6c8b08e8e9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__logs_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.28bc84b2ae", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_8bbb281f525daefe2f856f6c8b08e8e9.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__logs_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_", "alias": "logs_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__logs.yml/dbt_expectations_expect_column_8bbb281f525daefe2f856f6c8b08e8e9.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_8bbb281f525daefe2f856f6c8b08e8e9"}, "created_at": 1669126489.232648, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(CONTRACT_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from POLYGON_DEV.silver.logs\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.logs_CONTRACT_ADDRESS", "column_name": "CONTRACT_ADDRESS", "file_key_name": "models.silver__logs"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_NAME__STRING__VARCHAR.7af2bc20cd": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3cd4d6e1b11a2401af32000858f05ab5\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "EVENT_NAME", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__logs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3cd4d6e1b11a2401af32000858f05ab5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_NAME__STRING__VARCHAR"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_NAME__STRING__VARCHAR.7af2bc20cd", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_3cd4d6e1b11a2401af32000858f05ab5.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_NAME__STRING__VARCHAR", "alias": "logs_EVENT_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__logs.yml/dbt_expectations_expect_column_3cd4d6e1b11a2401af32000858f05ab5.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_3cd4d6e1b11a2401af32000858f05ab5"}, "created_at": 1669126489.239041, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('_LOG_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INPUTS' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOPICS' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_REMOVED' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_STATUS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'EVENT_NAME'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.logs_EVENT_NAME", "column_name": "EVENT_NAME", "file_key_name": "models.silver__logs"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_INPUTS__OBJECT.a903a96237": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ca48036c47d26b7d96bf136183f6f6a5\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["OBJECT"], "column_name": "EVENT_INPUTS", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__logs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ca48036c47d26b7d96bf136183f6f6a5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_INPUTS__OBJECT"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_INPUTS__OBJECT.a903a96237", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_ca48036c47d26b7d96bf136183f6f6a5.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_INPUTS__OBJECT", "alias": "logs_EVENT_INPUTS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__logs.yml/dbt_expectations_expect_column_ca48036c47d26b7d96bf136183f6f6a5.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_ca48036c47d26b7d96bf136183f6f6a5"}, "created_at": 1669126489.246262, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('_LOG_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INPUTS' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOPICS' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_REMOVED' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_STATUS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'EVENT_INPUTS'\n            and\n            relation_column_type not in ('OBJECT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.logs_EVENT_INPUTS", "column_name": "EVENT_INPUTS", "file_key_name": "models.silver__logs"}, "test.polygon_models.not_null_silver__logs_TOPICS.f042e94d85": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOPICS", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__logs_TOPICS"], "unique_id": "test.polygon_models.not_null_silver__logs_TOPICS.f042e94d85", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__logs_TOPICS.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "not_null_silver__logs_TOPICS", "alias": "logs_TOPICS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__logs.yml/not_null_silver__logs_TOPICS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.2519538, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.logs\nwhere TOPICS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.logs_TOPICS", "column_name": "TOPICS", "file_key_name": "models.silver__logs"}, "test.polygon_models.not_null_silver__logs_DATA.c5fac5c4a4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DATA", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__logs_DATA"], "unique_id": "test.polygon_models.not_null_silver__logs_DATA.c5fac5c4a4", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__logs_DATA.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "not_null_silver__logs_DATA", "alias": "logs_DATA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__logs.yml/not_null_silver__logs_DATA.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.25482, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.logs\nwhere DATA is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.logs_DATA", "column_name": "DATA", "file_key_name": "models.silver__logs"}, "test.polygon_models.not_null_silver__logs_EVENT_REMOVED.4f302d08e0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EVENT_REMOVED", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__logs_EVENT_REMOVED"], "unique_id": "test.polygon_models.not_null_silver__logs_EVENT_REMOVED.4f302d08e0", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__logs_EVENT_REMOVED.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "not_null_silver__logs_EVENT_REMOVED", "alias": "logs_EVENT_REMOVED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__logs.yml/not_null_silver__logs_EVENT_REMOVED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.2575932, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.logs\nwhere EVENT_REMOVED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.logs_EVENT_REMOVED", "column_name": "EVENT_REMOVED", "file_key_name": "models.silver__logs"}, "test.polygon_models.not_null_silver__logs__LOG_ID.8c3f196b2a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_LOG_ID", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__logs__LOG_ID"], "unique_id": "test.polygon_models.not_null_silver__logs__LOG_ID.8c3f196b2a", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__logs__LOG_ID.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "not_null_silver__logs__LOG_ID", "alias": "logs", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__logs.yml/not_null_silver__logs__LOG_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.259742, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.logs\nwhere _LOG_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.logs", "column_name": "_LOG_ID", "file_key_name": "models.silver__logs"}, "test.polygon_models.not_null_silver__logs_ORIGIN_FUNCTION_SIGNATURE.ed647f3e17": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FUNCTION_SIGNATURE", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__logs_ORIGIN_FUNCTION_SIGNATURE"], "unique_id": "test.polygon_models.not_null_silver__logs_ORIGIN_FUNCTION_SIGNATURE.ed647f3e17", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__logs_ORIGIN_FUNCTION_SIGNATURE.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "not_null_silver__logs_ORIGIN_FUNCTION_SIGNATURE", "alias": "logs_ORIGIN_FUNCTION_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__logs.yml/not_null_silver__logs_ORIGIN_FUNCTION_SIGNATURE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.2620108, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.logs\nwhere ORIGIN_FUNCTION_SIGNATURE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.logs_ORIGIN_FUNCTION_SIGNATURE", "column_name": "ORIGIN_FUNCTION_SIGNATURE", "file_key_name": "models.silver__logs"}, "test.polygon_models.not_null_silver__logs_ORIGIN_FROM_ADDRESS.1759538d91": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__logs_ORIGIN_FROM_ADDRESS"], "unique_id": "test.polygon_models.not_null_silver__logs_ORIGIN_FROM_ADDRESS.1759538d91", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__logs_ORIGIN_FROM_ADDRESS.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "not_null_silver__logs_ORIGIN_FROM_ADDRESS", "alias": "logs_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__logs.yml/not_null_silver__logs_ORIGIN_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.263556, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.logs\nwhere ORIGIN_FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.logs_ORIGIN_FROM_ADDRESS", "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.silver__logs"}, "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.a59d6ffc6a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e1301d0c4df2c6cf4bb726a830884900\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__logs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e1301d0c4df2c6cf4bb726a830884900", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__logs_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.a59d6ffc6a", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_e1301d0c4df2c6cf4bb726a830884900.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__logs_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "logs_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__logs.yml/dbt_expectations_expect_column_e1301d0c4df2c6cf4bb726a830884900.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_e1301d0c4df2c6cf4bb726a830884900"}, "created_at": 1669126489.265057, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(ORIGIN_FROM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from POLYGON_DEV.silver.logs\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.logs_ORIGIN_FROM_ADDRESS", "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.silver__logs"}, "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.869407dadd": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_505e723dd043eda11bc88c8bb8ae33f6\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__logs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_505e723dd043eda11bc88c8bb8ae33f6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__logs_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.869407dadd", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_505e723dd043eda11bc88c8bb8ae33f6.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__logs_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_", "alias": "logs_ORIGIN_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__logs.yml/dbt_expectations_expect_column_505e723dd043eda11bc88c8bb8ae33f6.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_505e723dd043eda11bc88c8bb8ae33f6"}, "created_at": 1669126489.270335, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(ORIGIN_TO_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from POLYGON_DEV.silver.logs\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.logs_ORIGIN_TO_ADDRESS", "column_name": "ORIGIN_TO_ADDRESS", "file_key_name": "models.silver__logs"}, "test.polygon_models.dbt_utils_unique_combination_of_columns_silver__logs__LOG_ID.780efa90bd": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_LOG_ID"], "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["polygon_models", "silver", "dbt_utils_unique_combination_of_columns_silver__logs__LOG_ID"], "unique_id": "test.polygon_models.dbt_utils_unique_combination_of_columns_silver__logs__LOG_ID.780efa90bd", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_utils_unique_combination_of_columns_silver__logs__LOG_ID.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "dbt_utils_unique_combination_of_columns_silver__logs__LOG_ID", "alias": "logs", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__logs.yml/dbt_utils_unique_combination_of_columns_silver__logs__LOG_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.2760918, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _LOG_ID\n    from POLYGON_DEV.silver.logs\n    group by _LOG_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_utils_unique_combination_of_columns_silver.logs", "column_name": null, "file_key_name": "models.silver__logs"}, "test.polygon_models.sequence_gaps_silver__logs_EVENT_INDEX__BLOCK_NUMBER__TX_HASH.8b3582ee4a": {"raw_sql": "{{ test_sequence_gaps(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP < CURRENT_DATE\") }}", "test_metadata": {"name": "sequence_gaps", "kwargs": {"partition_by": ["BLOCK_NUMBER", "TX_HASH"], "column_name": "EVENT_INDEX", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.polygon_models.test_sequence_gaps", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "BLOCK_TIMESTAMP < CURRENT_DATE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "sequence_gaps_silver", "fqn": ["polygon_models", "silver", "sequence_gaps_silver__logs_EVENT_INDEX__BLOCK_NUMBER__TX_HASH"], "unique_id": "test.polygon_models.sequence_gaps_silver__logs_EVENT_INDEX__BLOCK_NUMBER__TX_HASH.8b3582ee4a", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "sequence_gaps_silver__logs_EVENT_INDEX__BLOCK_NUMBER__TX_HASH.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "sequence_gaps_silver__logs_EVENT_INDEX__BLOCK_NUMBER__TX_HASH", "alias": "logs_EVENT_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__logs.yml/sequence_gaps_silver__logs_EVENT_INDEX__BLOCK_NUMBER__TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "BLOCK_TIMESTAMP < CURRENT_DATE"}, "created_at": 1669126489.286027, "compiled_sql": "WITH source AS (\n    SELECT\n        BLOCK_NUMBER, TX_HASH,\n        EVENT_INDEX,\n        LAG(\n            EVENT_INDEX,\n            1\n        ) over (\n            PARTITION BY BLOCK_NUMBER, TX_HASH\n            ORDER BY\n                EVENT_INDEX ASC\n        ) AS prev_EVENT_INDEX\n    FROM\n        (select * from POLYGON_DEV.silver.logs where BLOCK_TIMESTAMP < CURRENT_DATE) dbt_subquery\n)\nSELECT\n    BLOCK_NUMBER, TX_HASH,\n    prev_EVENT_INDEX,\n    EVENT_INDEX,\n    EVENT_INDEX - prev_EVENT_INDEX\n    - 1 AS gap\nFROM\n    source\nWHERE\n    EVENT_INDEX - prev_EVENT_INDEX <> 1\nORDER BY\n    gap DESC ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.sequence_gaps_silver.logs_EVENT_INDEX", "column_name": null, "file_key_name": "models.silver__logs"}, "test.polygon_models.not_null_silver__traces_BLOCK_NUMBER.9dcd1525b2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__traces')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__traces"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__traces_BLOCK_NUMBER"], "unique_id": "test.polygon_models.not_null_silver__traces_BLOCK_NUMBER.9dcd1525b2", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__traces_BLOCK_NUMBER.sql", "original_file_path": "models/silver/silver__traces.yml", "name": "not_null_silver__traces_BLOCK_NUMBER", "alias": "traces_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__traces"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__traces.yml/not_null_silver__traces_BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.297529, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.traces\nwhere BLOCK_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.traces_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__traces"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__traces_BLOCK_NUMBER__NUMBER__FLOAT.ccd2c156a6": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_43321ed6b77eca5b45f709f9d684bdc9\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__traces')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__traces"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_43321ed6b77eca5b45f709f9d684bdc9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__traces_BLOCK_NUMBER__NUMBER__FLOAT"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__traces_BLOCK_NUMBER__NUMBER__FLOAT.ccd2c156a6", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_43321ed6b77eca5b45f709f9d684bdc9.sql", "original_file_path": "models/silver/silver__traces.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__traces_BLOCK_NUMBER__NUMBER__FLOAT", "alias": "traces_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__traces"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__traces.yml/dbt_expectations_expect_column_43321ed6b77eca5b45f709f9d684bdc9.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_43321ed6b77eca5b45f709f9d684bdc9"}, "created_at": 1669126489.2993941, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MATIC_VALUE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('INPUT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('OUTPUT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('IDENTIFIER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_CALL_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_STATUS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SUB_TRACES' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_NUMBER'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.traces_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__traces"}, "test.polygon_models.not_null_silver__traces_BLOCK_TIMESTAMP.4053e07c73": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__traces')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__traces"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__traces_BLOCK_TIMESTAMP"], "unique_id": "test.polygon_models.not_null_silver__traces_BLOCK_TIMESTAMP.4053e07c73", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__traces_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__traces.yml", "name": "not_null_silver__traces_BLOCK_TIMESTAMP", "alias": "traces_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__traces"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__traces.yml/not_null_silver__traces_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.3052428, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.traces\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.traces_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__traces"}, "test.polygon_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__traces_BLOCK_TIMESTAMP__day__1.0589c5d87f": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_d59c36b69ea35df3a2a1dec4ddbc34f0\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__traces')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__traces"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_d59c36b69ea35df3a2a1dec4ddbc34f0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__traces_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.polygon_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__traces_BLOCK_TIMESTAMP__day__1.0589c5d87f", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_row_va_d59c36b69ea35df3a2a1dec4ddbc34f0.sql", "original_file_path": "models/silver/silver__traces.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__traces_BLOCK_TIMESTAMP__day__1", "alias": "traces_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__traces"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__traces.yml/dbt_expectations_expect_row_va_d59c36b69ea35df3a2a1dec4ddbc34f0.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_d59c36b69ea35df3a2a1dec4ddbc34f0"}, "created_at": 1669126489.307276, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as TIMESTAMP)) as max_timestamp\n    from\n        POLYGON_DEV.silver.traces\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as TIMESTAMP) <= convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as TIMESTAMP))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        )\n\n as TIMESTAMP)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.traces_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__traces"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__traces_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.3ffecd9044": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_628e3bea29d28ae73049f876d7c18590\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__traces')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__traces"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_628e3bea29d28ae73049f876d7c18590", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__traces_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__traces_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.3ffecd9044", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_628e3bea29d28ae73049f876d7c18590.sql", "original_file_path": "models/silver/silver__traces.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__traces_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "traces_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__traces"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__traces.yml/dbt_expectations_expect_column_628e3bea29d28ae73049f876d7c18590.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_628e3bea29d28ae73049f876d7c18590"}, "created_at": 1669126489.3189409, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MATIC_VALUE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('INPUT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('OUTPUT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('IDENTIFIER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_CALL_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DATA' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_STATUS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SUB_TRACES' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.traces_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__traces"}, "test.polygon_models.not_null_silver__traces_TX_HASH.ccbdeb5e91": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__traces')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__traces"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__traces_TX_HASH"], "unique_id": "test.polygon_models.not_null_silver__traces_TX_HASH.ccbdeb5e91", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__traces_TX_HASH.sql", "original_file_path": "models/silver/silver__traces.yml", "name": "not_null_silver__traces_TX_HASH", "alias": "traces_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__traces"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__traces.yml/not_null_silver__traces_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.32478, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.traces\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.traces_TX_HASH", "column_name": "TX_HASH", "file_key_name": "models.silver__traces"}, "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__traces_TX_HASH__0_xX_0_9a_fA_F_.14f576932b": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_579eb36993ea514537ff9fdd9ab01060\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__traces')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__traces"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_579eb36993ea514537ff9fdd9ab01060", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__traces_TX_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__traces_TX_HASH__0_xX_0_9a_fA_F_.14f576932b", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_579eb36993ea514537ff9fdd9ab01060.sql", "original_file_path": "models/silver/silver__traces.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__traces_TX_HASH__0_xX_0_9a_fA_F_", "alias": "traces_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__traces"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__traces.yml/dbt_expectations_expect_column_579eb36993ea514537ff9fdd9ab01060.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_579eb36993ea514537ff9fdd9ab01060"}, "created_at": 1669126489.326942, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(TX_HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from POLYGON_DEV.silver.traces\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.traces_TX_HASH", "column_name": "TX_HASH", "file_key_name": "models.silver__traces"}, "test.polygon_models.not_null_silver__traces_FROM_ADDRESS.285ef0c05b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"TYPE <> 'SELFDESTRUCT'\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__traces')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__traces"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "TYPE <> 'SELFDESTRUCT'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__traces_FROM_ADDRESS"], "unique_id": "test.polygon_models.not_null_silver__traces_FROM_ADDRESS.285ef0c05b", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__traces_FROM_ADDRESS.sql", "original_file_path": "models/silver/silver__traces.yml", "name": "not_null_silver__traces_FROM_ADDRESS", "alias": "traces_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__traces"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__traces.yml/not_null_silver__traces_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "TYPE <> 'SELFDESTRUCT'"}, "created_at": 1669126489.332614, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from POLYGON_DEV.silver.traces where TYPE <> 'SELFDESTRUCT') dbt_subquery\nwhere FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.traces_FROM_ADDRESS", "column_name": "FROM_ADDRESS", "file_key_name": "models.silver__traces"}, "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__traces_FROM_ADDRESS__0_xX_0_9a_fA_F_.b404693575": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9a525672490a2311a5e69fded19fee5f\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__traces')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__traces"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9a525672490a2311a5e69fded19fee5f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__traces_FROM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__traces_FROM_ADDRESS__0_xX_0_9a_fA_F_.b404693575", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_9a525672490a2311a5e69fded19fee5f.sql", "original_file_path": "models/silver/silver__traces.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__traces_FROM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "traces_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__traces"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__traces.yml/dbt_expectations_expect_column_9a525672490a2311a5e69fded19fee5f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_9a525672490a2311a5e69fded19fee5f"}, "created_at": 1669126489.334294, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(FROM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from POLYGON_DEV.silver.traces\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.traces_FROM_ADDRESS", "column_name": "FROM_ADDRESS", "file_key_name": "models.silver__traces"}, "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__traces_TO_ADDRESS__0_xX_0_9a_fA_F_.3af876962e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(where=\"TO_ADDRESS IS NOT NULL\",alias=\"dbt_expectations_expect_column_5136f4a73886b056486a516d60d01feb\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__traces')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__traces"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5136f4a73886b056486a516d60d01feb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "TO_ADDRESS IS NOT NULL", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__traces_TO_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__traces_TO_ADDRESS__0_xX_0_9a_fA_F_.3af876962e", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_5136f4a73886b056486a516d60d01feb.sql", "original_file_path": "models/silver/silver__traces.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__traces_TO_ADDRESS__0_xX_0_9a_fA_F_", "alias": "traces_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__traces"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__traces.yml/dbt_expectations_expect_column_5136f4a73886b056486a516d60d01feb.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "TO_ADDRESS IS NOT NULL", "alias": "dbt_expectations_expect_column_5136f4a73886b056486a516d60d01feb"}, "created_at": 1669126489.341653, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(TO_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from (select * from POLYGON_DEV.silver.traces where TO_ADDRESS IS NOT NULL) dbt_subquery\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.traces_TO_ADDRESS", "column_name": "TO_ADDRESS", "file_key_name": "models.silver__traces"}, "test.polygon_models.not_null_silver__traces_IDENTIFIER.ee73127ec0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "IDENTIFIER", "model": "{{ get_where_subquery(ref('silver__traces')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__traces"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__traces_IDENTIFIER"], "unique_id": "test.polygon_models.not_null_silver__traces_IDENTIFIER.ee73127ec0", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__traces_IDENTIFIER.sql", "original_file_path": "models/silver/silver__traces.yml", "name": "not_null_silver__traces_IDENTIFIER", "alias": "traces_IDENTIFIER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__traces"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__traces.yml/not_null_silver__traces_IDENTIFIER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.347853, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.traces\nwhere IDENTIFIER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.traces_IDENTIFIER", "column_name": "IDENTIFIER", "file_key_name": "models.silver__traces"}, "test.polygon_models.not_null_silver__traces_MATIC_VALUE.16932a2346": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MATIC_VALUE", "model": "{{ get_where_subquery(ref('silver__traces')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__traces"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__traces_MATIC_VALUE"], "unique_id": "test.polygon_models.not_null_silver__traces_MATIC_VALUE.16932a2346", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__traces_MATIC_VALUE.sql", "original_file_path": "models/silver/silver__traces.yml", "name": "not_null_silver__traces_MATIC_VALUE", "alias": "traces_MATIC_VALUE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__traces"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__traces.yml/not_null_silver__traces_MATIC_VALUE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.349463, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.traces\nwhere MATIC_VALUE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.traces_MATIC_VALUE", "column_name": "MATIC_VALUE", "file_key_name": "models.silver__traces"}, "test.polygon_models.not_null_silver__traces_GAS.53d7bbcf6a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "GAS", "model": "{{ get_where_subquery(ref('silver__traces')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__traces"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__traces_GAS"], "unique_id": "test.polygon_models.not_null_silver__traces_GAS.53d7bbcf6a", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__traces_GAS.sql", "original_file_path": "models/silver/silver__traces.yml", "name": "not_null_silver__traces_GAS", "alias": "traces_GAS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__traces"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__traces.yml/not_null_silver__traces_GAS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.352015, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.traces\nwhere GAS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.traces_GAS", "column_name": "GAS", "file_key_name": "models.silver__traces"}, "test.polygon_models.not_null_silver__traces_GAS_USED.eb9bf97ca1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "GAS_USED", "model": "{{ get_where_subquery(ref('silver__traces')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__traces"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__traces_GAS_USED"], "unique_id": "test.polygon_models.not_null_silver__traces_GAS_USED.eb9bf97ca1", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__traces_GAS_USED.sql", "original_file_path": "models/silver/silver__traces.yml", "name": "not_null_silver__traces_GAS_USED", "alias": "traces_GAS_USED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__traces"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__traces.yml/not_null_silver__traces_GAS_USED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.355135, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.traces\nwhere GAS_USED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.traces_GAS_USED", "column_name": "GAS_USED", "file_key_name": "models.silver__traces"}, "test.polygon_models.dbt_utils_unique_combination_of_columns_silver__traces__CALL_ID.2854a11c5a": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_CALL_ID"], "model": "{{ get_where_subquery(ref('silver__traces')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__traces"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["polygon_models", "silver", "dbt_utils_unique_combination_of_columns_silver__traces__CALL_ID"], "unique_id": "test.polygon_models.dbt_utils_unique_combination_of_columns_silver__traces__CALL_ID.2854a11c5a", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_utils_unique_combination_of_columns_silver__traces__CALL_ID.sql", "original_file_path": "models/silver/silver__traces.yml", "name": "dbt_utils_unique_combination_of_columns_silver__traces__CALL_ID", "alias": "traces", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__traces"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__traces.yml/dbt_utils_unique_combination_of_columns_silver__traces__CALL_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.3574998, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _CALL_ID\n    from POLYGON_DEV.silver.traces\n    group by _CALL_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_utils_unique_combination_of_columns_silver.traces", "column_name": null, "file_key_name": "models.silver__traces"}, "test.polygon_models.not_null_silver__blocks_BLOCK_NUMBER.3ed5bd5a97": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__blocks_BLOCK_NUMBER"], "unique_id": "test.polygon_models.not_null_silver__blocks_BLOCK_NUMBER.3ed5bd5a97", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__blocks_BLOCK_NUMBER.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_BLOCK_NUMBER", "alias": "blocks_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__blocks.yml/not_null_silver__blocks_BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.371874, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.blocks\nwhere BLOCK_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.blocks_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__blocks"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_NUMBER__NUMBER__FLOAT.5e6997665c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7e05ea22080deb3c6bc0a6264fd73f41\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7e05ea22080deb3c6bc0a6264fd73f41", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_NUMBER__NUMBER__FLOAT"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_NUMBER__NUMBER__FLOAT.5e6997665c", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_7e05ea22080deb3c6bc0a6264fd73f41.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_NUMBER__NUMBER__FLOAT", "alias": "blocks_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_7e05ea22080deb3c6bc0a6264fd73f41.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_7e05ea22080deb3c6bc0a6264fd73f41"}, "created_at": 1669126489.374687, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NETWORK' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DIFFICULTY' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_DIFFICULTY' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EXTRA_DATA' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PARENT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPTS_ROOT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SHA3_UNCLES' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SIZE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UNCLE_BLOCKS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEADER_JSON' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_NUMBER'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__blocks"}, "test.polygon_models.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__blocks_BLOCK_TIMESTAMP"], "unique_id": "test.polygon_models.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__blocks_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_BLOCK_TIMESTAMP", "alias": "blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__blocks.yml/not_null_silver__blocks_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.379776, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.blocks\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.blocks_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__blocks"}, "test.polygon_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1.3844f6e7d3": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_59f17192e0f2a3ba8e68b2c9a7ff0692\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_59f17192e0f2a3ba8e68b2c9a7ff0692", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.polygon_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1.3844f6e7d3", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_row_va_59f17192e0f2a3ba8e68b2c9a7ff0692.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1", "alias": "blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__blocks.yml/dbt_expectations_expect_row_va_59f17192e0f2a3ba8e68b2c9a7ff0692.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_59f17192e0f2a3ba8e68b2c9a7ff0692"}, "created_at": 1669126489.3813188, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as TIMESTAMP)) as max_timestamp\n    from\n        POLYGON_DEV.silver.blocks\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as TIMESTAMP) <= convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as TIMESTAMP))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        )\n\n as TIMESTAMP)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.blocks_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__blocks"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2a22373751": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2ee4d8ce0368be721e1f5e161b194f27\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2ee4d8ce0368be721e1f5e161b194f27", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2a22373751", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_2ee4d8ce0368be721e1f5e161b194f27.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_2ee4d8ce0368be721e1f5e161b194f27.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_2ee4d8ce0368be721e1f5e161b194f27"}, "created_at": 1669126489.394401, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NETWORK' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DIFFICULTY' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_DIFFICULTY' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EXTRA_DATA' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PARENT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPTS_ROOT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SHA3_UNCLES' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SIZE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UNCLE_BLOCKS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEADER_JSON' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__blocks"}, "test.polygon_models.not_null_silver__blocks_NETWORK.65d2a5d7b1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NETWORK", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__blocks_NETWORK"], "unique_id": "test.polygon_models.not_null_silver__blocks_NETWORK.65d2a5d7b1", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__blocks_NETWORK.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_NETWORK", "alias": "blocks_NETWORK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__blocks.yml/not_null_silver__blocks_NETWORK.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.400259, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.blocks\nwhere NETWORK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.blocks_NETWORK", "column_name": "NETWORK", "file_key_name": "models.silver__blocks"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NETWORK__STRING__VARCHAR.31e2a1e5bd": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1cef2f83b795118726572883c9991bd1\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "NETWORK", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1cef2f83b795118726572883c9991bd1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NETWORK__STRING__VARCHAR"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NETWORK__STRING__VARCHAR.31e2a1e5bd", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_1cef2f83b795118726572883c9991bd1.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NETWORK__STRING__VARCHAR", "alias": "blocks_NETWORK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_1cef2f83b795118726572883c9991bd1.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_1cef2f83b795118726572883c9991bd1"}, "created_at": 1669126489.4022982, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NETWORK' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DIFFICULTY' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_DIFFICULTY' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EXTRA_DATA' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PARENT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPTS_ROOT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SHA3_UNCLES' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SIZE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UNCLE_BLOCKS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEADER_JSON' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'NETWORK'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_NETWORK", "column_name": "NETWORK", "file_key_name": "models.silver__blocks"}, "test.polygon_models.not_null_silver__blocks_BLOCKCHAIN.c3e6e8be96": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__blocks_BLOCKCHAIN"], "unique_id": "test.polygon_models.not_null_silver__blocks_BLOCKCHAIN.c3e6e8be96", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__blocks_BLOCKCHAIN.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_BLOCKCHAIN", "alias": "blocks_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__blocks.yml/not_null_silver__blocks_BLOCKCHAIN.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.4090502, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.blocks\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.blocks_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__blocks"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCKCHAIN__STRING__VARCHAR.01a66b1dcd": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c04728f705e33131533b5963a999d26d\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c04728f705e33131533b5963a999d26d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCKCHAIN__STRING__VARCHAR"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCKCHAIN__STRING__VARCHAR.01a66b1dcd", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_c04728f705e33131533b5963a999d26d.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCKCHAIN__STRING__VARCHAR", "alias": "blocks_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_c04728f705e33131533b5963a999d26d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c04728f705e33131533b5963a999d26d"}, "created_at": 1669126489.411414, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NETWORK' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DIFFICULTY' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_DIFFICULTY' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EXTRA_DATA' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PARENT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPTS_ROOT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SHA3_UNCLES' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SIZE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UNCLE_BLOCKS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEADER_JSON' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCKCHAIN'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__blocks"}, "test.polygon_models.not_null_silver__blocks_TX_COUNT.34525b51e6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_COUNT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__blocks_TX_COUNT"], "unique_id": "test.polygon_models.not_null_silver__blocks_TX_COUNT.34525b51e6", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__blocks_TX_COUNT.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_TX_COUNT", "alias": "blocks_TX_COUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__blocks.yml/not_null_silver__blocks_TX_COUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.416204, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.blocks\nwhere TX_COUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.blocks_TX_COUNT", "column_name": "TX_COUNT", "file_key_name": "models.silver__blocks"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER__FLOAT.9486c781f5": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_57647135d3191ca6bcc33dccc86d30b7\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TX_COUNT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_57647135d3191ca6bcc33dccc86d30b7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER__FLOAT"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER__FLOAT.9486c781f5", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_57647135d3191ca6bcc33dccc86d30b7.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER__FLOAT", "alias": "blocks_TX_COUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_57647135d3191ca6bcc33dccc86d30b7.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_57647135d3191ca6bcc33dccc86d30b7"}, "created_at": 1669126489.4182458, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NETWORK' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DIFFICULTY' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_DIFFICULTY' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EXTRA_DATA' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PARENT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPTS_ROOT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SHA3_UNCLES' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SIZE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UNCLE_BLOCKS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEADER_JSON' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_COUNT'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_TX_COUNT", "column_name": "TX_COUNT", "file_key_name": "models.silver__blocks"}, "test.polygon_models.not_null_silver__blocks_DIFFICULTY.dfd6bb7310": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DIFFICULTY", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__blocks_DIFFICULTY"], "unique_id": "test.polygon_models.not_null_silver__blocks_DIFFICULTY.dfd6bb7310", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__blocks_DIFFICULTY.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_DIFFICULTY", "alias": "blocks_DIFFICULTY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__blocks.yml/not_null_silver__blocks_DIFFICULTY.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.4248, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.blocks\nwhere DIFFICULTY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.blocks_DIFFICULTY", "column_name": "DIFFICULTY", "file_key_name": "models.silver__blocks"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_DIFFICULTY__NUMBER__FLOAT.4b5343dd2c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ed68d3dda75fcab39e15e42c73e545ac\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "DIFFICULTY", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ed68d3dda75fcab39e15e42c73e545ac", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_DIFFICULTY__NUMBER__FLOAT"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_DIFFICULTY__NUMBER__FLOAT.4b5343dd2c", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_ed68d3dda75fcab39e15e42c73e545ac.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_DIFFICULTY__NUMBER__FLOAT", "alias": "blocks_DIFFICULTY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_ed68d3dda75fcab39e15e42c73e545ac.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_ed68d3dda75fcab39e15e42c73e545ac"}, "created_at": 1669126489.426816, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NETWORK' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DIFFICULTY' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_DIFFICULTY' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EXTRA_DATA' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PARENT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPTS_ROOT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SHA3_UNCLES' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SIZE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UNCLE_BLOCKS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEADER_JSON' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DIFFICULTY'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_DIFFICULTY", "column_name": "DIFFICULTY", "file_key_name": "models.silver__blocks"}, "test.polygon_models.not_null_silver__blocks_TOTAL_DIFFICULTY.64edc4b2a9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_DIFFICULTY", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__blocks_TOTAL_DIFFICULTY"], "unique_id": "test.polygon_models.not_null_silver__blocks_TOTAL_DIFFICULTY.64edc4b2a9", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__blocks_TOTAL_DIFFICULTY.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_TOTAL_DIFFICULTY", "alias": "blocks_TOTAL_DIFFICULTY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__blocks.yml/not_null_silver__blocks_TOTAL_DIFFICULTY.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.4325829, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.blocks\nwhere TOTAL_DIFFICULTY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.blocks_TOTAL_DIFFICULTY", "column_name": "TOTAL_DIFFICULTY", "file_key_name": "models.silver__blocks"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TOTAL_DIFFICULTY__NUMBER__FLOAT.4a0213cf40": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2ff09b420fb96365118952812fcba5b0\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TOTAL_DIFFICULTY", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2ff09b420fb96365118952812fcba5b0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TOTAL_DIFFICULTY__NUMBER__FLOAT"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TOTAL_DIFFICULTY__NUMBER__FLOAT.4a0213cf40", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_2ff09b420fb96365118952812fcba5b0.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TOTAL_DIFFICULTY__NUMBER__FLOAT", "alias": "blocks_TOTAL_DIFFICULTY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_2ff09b420fb96365118952812fcba5b0.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_2ff09b420fb96365118952812fcba5b0"}, "created_at": 1669126489.434232, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NETWORK' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DIFFICULTY' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_DIFFICULTY' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EXTRA_DATA' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PARENT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPTS_ROOT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SHA3_UNCLES' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SIZE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UNCLE_BLOCKS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEADER_JSON' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TOTAL_DIFFICULTY'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_TOTAL_DIFFICULTY", "column_name": "TOTAL_DIFFICULTY", "file_key_name": "models.silver__blocks"}, "test.polygon_models.not_null_silver__blocks_EXTRA_DATA.7b7824f6ea": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EXTRA_DATA", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__blocks_EXTRA_DATA"], "unique_id": "test.polygon_models.not_null_silver__blocks_EXTRA_DATA.7b7824f6ea", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__blocks_EXTRA_DATA.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_EXTRA_DATA", "alias": "blocks_EXTRA_DATA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__blocks.yml/not_null_silver__blocks_EXTRA_DATA.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.440952, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.blocks\nwhere EXTRA_DATA is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.blocks_EXTRA_DATA", "column_name": "EXTRA_DATA", "file_key_name": "models.silver__blocks"}, "test.polygon_models.not_null_silver__blocks_GAS_LIMIT.a66366ccf7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "GAS_LIMIT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__blocks_GAS_LIMIT"], "unique_id": "test.polygon_models.not_null_silver__blocks_GAS_LIMIT.a66366ccf7", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__blocks_GAS_LIMIT.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_GAS_LIMIT", "alias": "blocks_GAS_LIMIT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__blocks.yml/not_null_silver__blocks_GAS_LIMIT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.4430258, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.blocks\nwhere GAS_LIMIT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.blocks_GAS_LIMIT", "column_name": "GAS_LIMIT", "file_key_name": "models.silver__blocks"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_LIMIT__NUMBER__FLOAT.c009cca74d": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1daa86559d61b508d00b01f9f99af80a\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "GAS_LIMIT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1daa86559d61b508d00b01f9f99af80a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_LIMIT__NUMBER__FLOAT"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_LIMIT__NUMBER__FLOAT.c009cca74d", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_1daa86559d61b508d00b01f9f99af80a.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_LIMIT__NUMBER__FLOAT", "alias": "blocks_GAS_LIMIT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_1daa86559d61b508d00b01f9f99af80a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_1daa86559d61b508d00b01f9f99af80a"}, "created_at": 1669126489.444849, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NETWORK' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DIFFICULTY' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_DIFFICULTY' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EXTRA_DATA' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PARENT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPTS_ROOT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SHA3_UNCLES' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SIZE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UNCLE_BLOCKS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEADER_JSON' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'GAS_LIMIT'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_GAS_LIMIT", "column_name": "GAS_LIMIT", "file_key_name": "models.silver__blocks"}, "test.polygon_models.not_null_silver__blocks_GAS_USED.637b37099a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "GAS_USED", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__blocks_GAS_USED"], "unique_id": "test.polygon_models.not_null_silver__blocks_GAS_USED.637b37099a", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__blocks_GAS_USED.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_GAS_USED", "alias": "blocks_GAS_USED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__blocks.yml/not_null_silver__blocks_GAS_USED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.449047, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.blocks\nwhere GAS_USED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.blocks_GAS_USED", "column_name": "GAS_USED", "file_key_name": "models.silver__blocks"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_USED__NUMBER__FLOAT.bde7aa758f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f415928bbbf31687059ff7dbbfbd150b\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "GAS_USED", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f415928bbbf31687059ff7dbbfbd150b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_USED__NUMBER__FLOAT"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_USED__NUMBER__FLOAT.bde7aa758f", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_f415928bbbf31687059ff7dbbfbd150b.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_USED__NUMBER__FLOAT", "alias": "blocks_GAS_USED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_f415928bbbf31687059ff7dbbfbd150b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_f415928bbbf31687059ff7dbbfbd150b"}, "created_at": 1669126489.450963, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NETWORK' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DIFFICULTY' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_DIFFICULTY' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EXTRA_DATA' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PARENT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPTS_ROOT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SHA3_UNCLES' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SIZE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UNCLE_BLOCKS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEADER_JSON' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'GAS_USED'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_GAS_USED", "column_name": "GAS_USED", "file_key_name": "models.silver__blocks"}, "test.polygon_models.not_null_silver__blocks_HASH.bc44a39f94": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__blocks_HASH"], "unique_id": "test.polygon_models.not_null_silver__blocks_HASH.bc44a39f94", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__blocks_HASH.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_HASH", "alias": "blocks_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__blocks.yml/not_null_silver__blocks_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.457508, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.blocks\nwhere HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.blocks_HASH", "column_name": "HASH", "file_key_name": "models.silver__blocks"}, "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_HASH__0_xX_0_9a_fA_F_.923a822bca": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c1de592817bfb7ff003239c7e695b890\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c1de592817bfb7ff003239c7e695b890", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__blocks_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_HASH__0_xX_0_9a_fA_F_.923a822bca", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_c1de592817bfb7ff003239c7e695b890.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__blocks_HASH__0_xX_0_9a_fA_F_", "alias": "blocks_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_c1de592817bfb7ff003239c7e695b890.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c1de592817bfb7ff003239c7e695b890"}, "created_at": 1669126489.459332, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from POLYGON_DEV.silver.blocks\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.blocks_HASH", "column_name": "HASH", "file_key_name": "models.silver__blocks"}, "test.polygon_models.not_null_silver__blocks_PARENT_HASH.a17a399346": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PARENT_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__blocks_PARENT_HASH"], "unique_id": "test.polygon_models.not_null_silver__blocks_PARENT_HASH.a17a399346", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__blocks_PARENT_HASH.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_PARENT_HASH", "alias": "blocks_PARENT_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__blocks.yml/not_null_silver__blocks_PARENT_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.464402, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.blocks\nwhere PARENT_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.blocks_PARENT_HASH", "column_name": "PARENT_HASH", "file_key_name": "models.silver__blocks"}, "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_PARENT_HASH__0_xX_0_9a_fA_F_.164fb6eb16": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5ab97ce7ef94821c9e7507b522f5063b\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "PARENT_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5ab97ce7ef94821c9e7507b522f5063b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__blocks_PARENT_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_PARENT_HASH__0_xX_0_9a_fA_F_.164fb6eb16", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_5ab97ce7ef94821c9e7507b522f5063b.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__blocks_PARENT_HASH__0_xX_0_9a_fA_F_", "alias": "blocks_PARENT_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_5ab97ce7ef94821c9e7507b522f5063b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_5ab97ce7ef94821c9e7507b522f5063b"}, "created_at": 1669126489.4659672, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(PARENT_HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from POLYGON_DEV.silver.blocks\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.blocks_PARENT_HASH", "column_name": "PARENT_HASH", "file_key_name": "models.silver__blocks"}, "test.polygon_models.not_null_silver__blocks_MINER.c17f6cbb87": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MINER", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__blocks_MINER"], "unique_id": "test.polygon_models.not_null_silver__blocks_MINER.c17f6cbb87", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__blocks_MINER.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_MINER", "alias": "blocks_MINER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__blocks.yml/not_null_silver__blocks_MINER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.4718149, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.blocks\nwhere MINER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.blocks_MINER", "column_name": "MINER", "file_key_name": "models.silver__blocks"}, "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_MINER__0_xX_0_9a_fA_F_.7e8cc9ca0b": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a2ff9e6809e3f772c0d4c8ca8112dd8e\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "MINER", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a2ff9e6809e3f772c0d4c8ca8112dd8e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__blocks_MINER__0_xX_0_9a_fA_F_"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_MINER__0_xX_0_9a_fA_F_.7e8cc9ca0b", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_a2ff9e6809e3f772c0d4c8ca8112dd8e.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__blocks_MINER__0_xX_0_9a_fA_F_", "alias": "blocks_MINER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_a2ff9e6809e3f772c0d4c8ca8112dd8e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_a2ff9e6809e3f772c0d4c8ca8112dd8e"}, "created_at": 1669126489.474231, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(MINER, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from POLYGON_DEV.silver.blocks\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.blocks_MINER", "column_name": "MINER", "file_key_name": "models.silver__blocks"}, "test.polygon_models.not_null_silver__blocks_NONCE.10c0698884": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NONCE", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__blocks_NONCE"], "unique_id": "test.polygon_models.not_null_silver__blocks_NONCE.10c0698884", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__blocks_NONCE.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_NONCE", "alias": "blocks_NONCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__blocks.yml/not_null_silver__blocks_NONCE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.4791198, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.blocks\nwhere NONCE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.blocks_NONCE", "column_name": "NONCE", "file_key_name": "models.silver__blocks"}, "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_NONCE__0_xX_0_9a_fA_F_.0f55c64955": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9f1652571b7ac6fa920df47a87242455\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "NONCE", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9f1652571b7ac6fa920df47a87242455", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__blocks_NONCE__0_xX_0_9a_fA_F_"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_NONCE__0_xX_0_9a_fA_F_.0f55c64955", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_9f1652571b7ac6fa920df47a87242455.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__blocks_NONCE__0_xX_0_9a_fA_F_", "alias": "blocks_NONCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_9f1652571b7ac6fa920df47a87242455.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_9f1652571b7ac6fa920df47a87242455"}, "created_at": 1669126489.480717, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(NONCE, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from POLYGON_DEV.silver.blocks\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.blocks_NONCE", "column_name": "NONCE", "file_key_name": "models.silver__blocks"}, "test.polygon_models.not_null_silver__blocks_RECEIPTS_ROOT.cd3163505f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RECEIPTS_ROOT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__blocks_RECEIPTS_ROOT"], "unique_id": "test.polygon_models.not_null_silver__blocks_RECEIPTS_ROOT.cd3163505f", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__blocks_RECEIPTS_ROOT.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_RECEIPTS_ROOT", "alias": "blocks_RECEIPTS_ROOT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__blocks.yml/not_null_silver__blocks_RECEIPTS_ROOT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.4853408, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.blocks\nwhere RECEIPTS_ROOT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.blocks_RECEIPTS_ROOT", "column_name": "RECEIPTS_ROOT", "file_key_name": "models.silver__blocks"}, "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_RECEIPTS_ROOT__0_xX_0_9a_fA_F_.6964f6dc30": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_928c7d0ac4503aa3fba357dc439448d3\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "RECEIPTS_ROOT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_928c7d0ac4503aa3fba357dc439448d3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__blocks_RECEIPTS_ROOT__0_xX_0_9a_fA_F_"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_RECEIPTS_ROOT__0_xX_0_9a_fA_F_.6964f6dc30", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_928c7d0ac4503aa3fba357dc439448d3.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__blocks_RECEIPTS_ROOT__0_xX_0_9a_fA_F_", "alias": "blocks_RECEIPTS_ROOT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_928c7d0ac4503aa3fba357dc439448d3.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_928c7d0ac4503aa3fba357dc439448d3"}, "created_at": 1669126489.487246, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(RECEIPTS_ROOT, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from POLYGON_DEV.silver.blocks\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.blocks_RECEIPTS_ROOT", "column_name": "RECEIPTS_ROOT", "file_key_name": "models.silver__blocks"}, "test.polygon_models.not_null_silver__blocks_SHA3_UNCLES.e7c903103e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SHA3_UNCLES", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__blocks_SHA3_UNCLES"], "unique_id": "test.polygon_models.not_null_silver__blocks_SHA3_UNCLES.e7c903103e", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__blocks_SHA3_UNCLES.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_SHA3_UNCLES", "alias": "blocks_SHA3_UNCLES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__blocks.yml/not_null_silver__blocks_SHA3_UNCLES.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.4918349, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.blocks\nwhere SHA3_UNCLES is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.blocks_SHA3_UNCLES", "column_name": "SHA3_UNCLES", "file_key_name": "models.silver__blocks"}, "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_SHA3_UNCLES__0_xX_0_9a_fA_F_.c74b2fa922": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_154155f901daaab522c7c97e397e6479\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "SHA3_UNCLES", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_154155f901daaab522c7c97e397e6479", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__blocks_SHA3_UNCLES__0_xX_0_9a_fA_F_"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_SHA3_UNCLES__0_xX_0_9a_fA_F_.c74b2fa922", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_154155f901daaab522c7c97e397e6479.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__blocks_SHA3_UNCLES__0_xX_0_9a_fA_F_", "alias": "blocks_SHA3_UNCLES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_154155f901daaab522c7c97e397e6479.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_154155f901daaab522c7c97e397e6479"}, "created_at": 1669126489.4934652, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(SHA3_UNCLES, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from POLYGON_DEV.silver.blocks\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.blocks_SHA3_UNCLES", "column_name": "SHA3_UNCLES", "file_key_name": "models.silver__blocks"}, "test.polygon_models.not_null_silver__blocks_SIZE.f1fa8f466b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SIZE", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__blocks_SIZE"], "unique_id": "test.polygon_models.not_null_silver__blocks_SIZE.f1fa8f466b", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__blocks_SIZE.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_SIZE", "alias": "blocks_SIZE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__blocks.yml/not_null_silver__blocks_SIZE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.4984179, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.blocks\nwhere SIZE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.blocks_SIZE", "column_name": "SIZE", "file_key_name": "models.silver__blocks"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_SIZE__NUMBER.7f2a8fc982": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c12c48f401fb508673d875e88736b875\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "SIZE", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c12c48f401fb508673d875e88736b875", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_SIZE__NUMBER"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_SIZE__NUMBER.7f2a8fc982", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_c12c48f401fb508673d875e88736b875.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_SIZE__NUMBER", "alias": "blocks_SIZE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_c12c48f401fb508673d875e88736b875.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c12c48f401fb508673d875e88736b875"}, "created_at": 1669126489.5001879, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NETWORK' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DIFFICULTY' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_DIFFICULTY' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EXTRA_DATA' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PARENT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPTS_ROOT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SHA3_UNCLES' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SIZE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UNCLE_BLOCKS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEADER_JSON' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SIZE'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_SIZE", "column_name": "SIZE", "file_key_name": "models.silver__blocks"}, "test.polygon_models.not_null_silver__blocks_BLOCK_HEADER_JSON.98268f8f2b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_HEADER_JSON", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__blocks_BLOCK_HEADER_JSON"], "unique_id": "test.polygon_models.not_null_silver__blocks_BLOCK_HEADER_JSON.98268f8f2b", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__blocks_BLOCK_HEADER_JSON.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_BLOCK_HEADER_JSON", "alias": "blocks_BLOCK_HEADER_JSON", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__blocks.yml/not_null_silver__blocks_BLOCK_HEADER_JSON.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.504086, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.blocks\nwhere BLOCK_HEADER_JSON is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.blocks_BLOCK_HEADER_JSON", "column_name": "BLOCK_HEADER_JSON", "file_key_name": "models.silver__blocks"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HEADER_JSON__OBJECT.1be6a88f28": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3ef449a2e3d542bf9a2fb0d78d544691\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["OBJECT"], "column_name": "BLOCK_HEADER_JSON", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3ef449a2e3d542bf9a2fb0d78d544691", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HEADER_JSON__OBJECT"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HEADER_JSON__OBJECT.1be6a88f28", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_3ef449a2e3d542bf9a2fb0d78d544691.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HEADER_JSON__OBJECT", "alias": "blocks_BLOCK_HEADER_JSON", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_3ef449a2e3d542bf9a2fb0d78d544691.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_3ef449a2e3d542bf9a2fb0d78d544691"}, "created_at": 1669126489.506261, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NETWORK' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DIFFICULTY' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_DIFFICULTY' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EXTRA_DATA' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PARENT_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MINER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPTS_ROOT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SHA3_UNCLES' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SIZE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UNCLE_BLOCKS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEADER_JSON' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_HEADER_JSON'\n            and\n            relation_column_type not in ('OBJECT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.blocks_BLOCK_HEADER_JSON", "column_name": "BLOCK_HEADER_JSON", "file_key_name": "models.silver__blocks"}, "test.polygon_models.dbt_utils_unique_combination_of_columns_silver__blocks_BLOCK_NUMBER.58d43342ca": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_29324c86efadd806a7aa4bc13c3aac08\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_NUMBER"], "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_29324c86efadd806a7aa4bc13c3aac08", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["polygon_models", "silver", "dbt_utils_unique_combination_of_columns_silver__blocks_BLOCK_NUMBER"], "unique_id": "test.polygon_models.dbt_utils_unique_combination_of_columns_silver__blocks_BLOCK_NUMBER.58d43342ca", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_utils_unique_combination_o_29324c86efadd806a7aa4bc13c3aac08.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_utils_unique_combination_of_columns_silver__blocks_BLOCK_NUMBER", "alias": "blocks_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__blocks.yml/dbt_utils_unique_combination_o_29324c86efadd806a7aa4bc13c3aac08.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_29324c86efadd806a7aa4bc13c3aac08"}, "created_at": 1669126489.511018, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_NUMBER\n    from POLYGON_DEV.silver.blocks\n    group by BLOCK_NUMBER\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_utils_unique_combination_of_columns_silver.blocks_BLOCK_NUMBER", "column_name": null, "file_key_name": "models.silver__blocks"}, "test.polygon_models.not_null_silver__transactions_BLOCK_NUMBER.574ebe21b0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__transactions_BLOCK_NUMBER"], "unique_id": "test.polygon_models.not_null_silver__transactions_BLOCK_NUMBER.574ebe21b0", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__transactions_BLOCK_NUMBER.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_BLOCK_NUMBER", "alias": "transactions_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transactions.yml/not_null_silver__transactions_BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.522035, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.transactions\nwhere BLOCK_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.transactions_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__transactions"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_NUMBER__NUMBER__FLOAT.c48e941615": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_05e071a30a52fe01bd86c5f0b2b8b265\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_05e071a30a52fe01bd86c5f0b2b8b265", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_NUMBER__NUMBER__FLOAT"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_NUMBER__NUMBER__FLOAT.c48e941615", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_05e071a30a52fe01bd86c5f0b2b8b265.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_NUMBER__NUMBER__FLOAT", "alias": "transactions_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_05e071a30a52fe01bd86c5f0b2b8b265.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_05e071a30a52fe01bd86c5f0b2b8b265"}, "created_at": 1669126489.5238678, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POSITION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MATIC_VALUE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('INPUT_DATA' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CUMULATIVE_GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EFFECTIVE_GAS_PRICE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_JSON' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_NUMBER'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transactions_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__transactions"}, "test.polygon_models.not_null_silver__transactions_BLOCK_TIMESTAMP.3ffe21fe8d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__transactions_BLOCK_TIMESTAMP"], "unique_id": "test.polygon_models.not_null_silver__transactions_BLOCK_TIMESTAMP.3ffe21fe8d", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__transactions_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_BLOCK_TIMESTAMP", "alias": "transactions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transactions.yml/not_null_silver__transactions_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.527786, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.transactions\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.transactions_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transactions"}, "test.polygon_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__1.cf074498fc": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_7e7ddbc9b4a7dbd76c2af79a27effcdb\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_7e7ddbc9b4a7dbd76c2af79a27effcdb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.polygon_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__1.cf074498fc", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_row_va_7e7ddbc9b4a7dbd76c2af79a27effcdb.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__1", "alias": "transactions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transactions.yml/dbt_expectations_expect_row_va_7e7ddbc9b4a7dbd76c2af79a27effcdb.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_7e7ddbc9b4a7dbd76c2af79a27effcdb"}, "created_at": 1669126489.529493, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as TIMESTAMP)) as max_timestamp\n    from\n        POLYGON_DEV.silver.transactions\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as TIMESTAMP) <= convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as TIMESTAMP))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        )\n\n as TIMESTAMP)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.transactions_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transactions"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.bc42693f6e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_867039df339fcae87e7a780c6020a0eb\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_867039df339fcae87e7a780c6020a0eb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.bc42693f6e", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_867039df339fcae87e7a780c6020a0eb.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "transactions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_867039df339fcae87e7a780c6020a0eb.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_867039df339fcae87e7a780c6020a0eb"}, "created_at": 1669126489.542176, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POSITION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MATIC_VALUE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('INPUT_DATA' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CUMULATIVE_GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EFFECTIVE_GAS_PRICE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_JSON' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transactions_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transactions"}, "test.polygon_models.not_null_silver__transactions_TX_HASH.8a2cc32062": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__transactions_TX_HASH"], "unique_id": "test.polygon_models.not_null_silver__transactions_TX_HASH.8a2cc32062", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__transactions_TX_HASH.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_TX_HASH", "alias": "transactions_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transactions.yml/not_null_silver__transactions_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.548527, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.transactions\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.transactions_TX_HASH", "column_name": "TX_HASH", "file_key_name": "models.silver__transactions"}, "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_TX_HASH__0_xX_0_9a_fA_F_.558497d3b6": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_084333e99c2867404db31712b1bd21ec\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_084333e99c2867404db31712b1bd21ec", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__transactions_TX_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_TX_HASH__0_xX_0_9a_fA_F_.558497d3b6", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_084333e99c2867404db31712b1bd21ec.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__transactions_TX_HASH__0_xX_0_9a_fA_F_", "alias": "transactions_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_084333e99c2867404db31712b1bd21ec.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_084333e99c2867404db31712b1bd21ec"}, "created_at": 1669126489.550105, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(TX_HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from POLYGON_DEV.silver.transactions\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.transactions_TX_HASH", "column_name": "TX_HASH", "file_key_name": "models.silver__transactions"}, "test.polygon_models.not_null_silver__transactions_NONCE.3eac435cf9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NONCE", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__transactions_NONCE"], "unique_id": "test.polygon_models.not_null_silver__transactions_NONCE.3eac435cf9", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__transactions_NONCE.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_NONCE", "alias": "transactions_NONCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transactions.yml/not_null_silver__transactions_NONCE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.556833, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.transactions\nwhere NONCE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.transactions_NONCE", "column_name": "NONCE", "file_key_name": "models.silver__transactions"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_NONCE__NUMBER__FLOAT.e9f3267e00": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_62dca8692bf0a9aa5386914ec2196f2f\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "NONCE", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_62dca8692bf0a9aa5386914ec2196f2f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_NONCE__NUMBER__FLOAT"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_NONCE__NUMBER__FLOAT.e9f3267e00", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_62dca8692bf0a9aa5386914ec2196f2f.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_NONCE__NUMBER__FLOAT", "alias": "transactions_NONCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_62dca8692bf0a9aa5386914ec2196f2f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_62dca8692bf0a9aa5386914ec2196f2f"}, "created_at": 1669126489.5588422, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POSITION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MATIC_VALUE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('INPUT_DATA' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CUMULATIVE_GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EFFECTIVE_GAS_PRICE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_JSON' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'NONCE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transactions_NONCE", "column_name": "NONCE", "file_key_name": "models.silver__transactions"}, "test.polygon_models.not_null_silver__transactions_POSITION.6be7c293c7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POSITION", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__transactions_POSITION"], "unique_id": "test.polygon_models.not_null_silver__transactions_POSITION.6be7c293c7", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__transactions_POSITION.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_POSITION", "alias": "transactions_POSITION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transactions.yml/not_null_silver__transactions_POSITION.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.564276, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.transactions\nwhere POSITION is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.transactions_POSITION", "column_name": "POSITION", "file_key_name": "models.silver__transactions"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_POSITION__NUMBER.5d920e939f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_555689e62c9d439cab0c03d27abf490d\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "POSITION", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_555689e62c9d439cab0c03d27abf490d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_POSITION__NUMBER"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_POSITION__NUMBER.5d920e939f", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_555689e62c9d439cab0c03d27abf490d.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_POSITION__NUMBER", "alias": "transactions_POSITION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_555689e62c9d439cab0c03d27abf490d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_555689e62c9d439cab0c03d27abf490d"}, "created_at": 1669126489.565878, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POSITION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MATIC_VALUE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('INPUT_DATA' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CUMULATIVE_GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EFFECTIVE_GAS_PRICE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_JSON' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'POSITION'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transactions_POSITION", "column_name": "POSITION", "file_key_name": "models.silver__transactions"}, "test.polygon_models.not_null_silver__transactions_FROM_ADDRESS.002109da43": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__transactions_FROM_ADDRESS"], "unique_id": "test.polygon_models.not_null_silver__transactions_FROM_ADDRESS.002109da43", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__transactions_FROM_ADDRESS.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_FROM_ADDRESS", "alias": "transactions_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transactions.yml/not_null_silver__transactions_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.571058, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.transactions\nwhere FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.transactions_FROM_ADDRESS", "column_name": "FROM_ADDRESS", "file_key_name": "models.silver__transactions"}, "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_FROM_ADDRESS__0_xX_0_9a_fA_F_.48157e7169": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ace827f4f78564d52ce5e48d294e6787\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ace827f4f78564d52ce5e48d294e6787", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__transactions_FROM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_FROM_ADDRESS__0_xX_0_9a_fA_F_.48157e7169", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_ace827f4f78564d52ce5e48d294e6787.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__transactions_FROM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "transactions_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_ace827f4f78564d52ce5e48d294e6787.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_ace827f4f78564d52ce5e48d294e6787"}, "created_at": 1669126489.5734248, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(FROM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from POLYGON_DEV.silver.transactions\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.transactions_FROM_ADDRESS", "column_name": "FROM_ADDRESS", "file_key_name": "models.silver__transactions"}, "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_TO_ADDRESS__0_xX_0_9a_fA_F_.6729f77190": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(where=\"TO_ADDRESS IS NOT NULL\",alias=\"dbt_expectations_expect_column_dc2d30f7c379dd83ac67adf5ebd5bf14\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_dc2d30f7c379dd83ac67adf5ebd5bf14", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "TO_ADDRESS IS NOT NULL", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__transactions_TO_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_TO_ADDRESS__0_xX_0_9a_fA_F_.6729f77190", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_dc2d30f7c379dd83ac67adf5ebd5bf14.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__transactions_TO_ADDRESS__0_xX_0_9a_fA_F_", "alias": "transactions_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_dc2d30f7c379dd83ac67adf5ebd5bf14.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "TO_ADDRESS IS NOT NULL", "alias": "dbt_expectations_expect_column_dc2d30f7c379dd83ac67adf5ebd5bf14"}, "created_at": 1669126489.581266, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(TO_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from (select * from POLYGON_DEV.silver.transactions where TO_ADDRESS IS NOT NULL) dbt_subquery\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.transactions_TO_ADDRESS", "column_name": "TO_ADDRESS", "file_key_name": "models.silver__transactions"}, "test.polygon_models.not_null_silver__transactions_MATIC_VALUE.e723701716": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MATIC_VALUE", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__transactions_MATIC_VALUE"], "unique_id": "test.polygon_models.not_null_silver__transactions_MATIC_VALUE.e723701716", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__transactions_MATIC_VALUE.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_MATIC_VALUE", "alias": "transactions_MATIC_VALUE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transactions.yml/not_null_silver__transactions_MATIC_VALUE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.5870562, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.transactions\nwhere MATIC_VALUE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.transactions_MATIC_VALUE", "column_name": "MATIC_VALUE", "file_key_name": "models.silver__transactions"}, "test.polygon_models.not_null_silver__transactions_BLOCK_HASH.2c918b73f5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_HASH", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__transactions_BLOCK_HASH"], "unique_id": "test.polygon_models.not_null_silver__transactions_BLOCK_HASH.2c918b73f5", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__transactions_BLOCK_HASH.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_BLOCK_HASH", "alias": "transactions_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transactions.yml/not_null_silver__transactions_BLOCK_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.5891058, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.transactions\nwhere BLOCK_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.transactions_BLOCK_HASH", "column_name": "BLOCK_HASH", "file_key_name": "models.silver__transactions"}, "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_BLOCK_HASH__0_xX_0_9a_fA_F_.6a7999ad31": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_edb379d8ec7579800d3cdbbe1bc0c0ef\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "BLOCK_HASH", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_edb379d8ec7579800d3cdbbe1bc0c0ef", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__transactions_BLOCK_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_BLOCK_HASH__0_xX_0_9a_fA_F_.6a7999ad31", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_edb379d8ec7579800d3cdbbe1bc0c0ef.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__transactions_BLOCK_HASH__0_xX_0_9a_fA_F_", "alias": "transactions_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_edb379d8ec7579800d3cdbbe1bc0c0ef.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_edb379d8ec7579800d3cdbbe1bc0c0ef"}, "created_at": 1669126489.591573, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(BLOCK_HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from POLYGON_DEV.silver.transactions\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.transactions_BLOCK_HASH", "column_name": "BLOCK_HASH", "file_key_name": "models.silver__transactions"}, "test.polygon_models.not_null_silver__transactions_GAS_PRICE.9ee195e584": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "GAS_PRICE", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__transactions_GAS_PRICE"], "unique_id": "test.polygon_models.not_null_silver__transactions_GAS_PRICE.9ee195e584", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__transactions_GAS_PRICE.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_GAS_PRICE", "alias": "transactions_GAS_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transactions.yml/not_null_silver__transactions_GAS_PRICE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.5962398, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.transactions\nwhere GAS_PRICE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.transactions_GAS_PRICE", "column_name": "GAS_PRICE", "file_key_name": "models.silver__transactions"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_PRICE__NUMBER__FLOAT.7ff329f632": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b1991aaa0f0ac7849860fbbb2c14be39\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "GAS_PRICE", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b1991aaa0f0ac7849860fbbb2c14be39", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_PRICE__NUMBER__FLOAT"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_PRICE__NUMBER__FLOAT.7ff329f632", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_b1991aaa0f0ac7849860fbbb2c14be39.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_PRICE__NUMBER__FLOAT", "alias": "transactions_GAS_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_b1991aaa0f0ac7849860fbbb2c14be39.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_b1991aaa0f0ac7849860fbbb2c14be39"}, "created_at": 1669126489.597975, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POSITION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MATIC_VALUE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('INPUT_DATA' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CUMULATIVE_GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EFFECTIVE_GAS_PRICE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_JSON' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'GAS_PRICE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transactions_GAS_PRICE", "column_name": "GAS_PRICE", "file_key_name": "models.silver__transactions"}, "test.polygon_models.not_null_silver__transactions_GAS_LIMIT.b5ac619228": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "GAS_LIMIT", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__transactions_GAS_LIMIT"], "unique_id": "test.polygon_models.not_null_silver__transactions_GAS_LIMIT.b5ac619228", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__transactions_GAS_LIMIT.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_GAS_LIMIT", "alias": "transactions_GAS_LIMIT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transactions.yml/not_null_silver__transactions_GAS_LIMIT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.602858, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.transactions\nwhere GAS_LIMIT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.transactions_GAS_LIMIT", "column_name": "GAS_LIMIT", "file_key_name": "models.silver__transactions"}, "test.polygon_models.not_null_silver__transactions_INPUT_DATA.3cc998f5b1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INPUT_DATA", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__transactions_INPUT_DATA"], "unique_id": "test.polygon_models.not_null_silver__transactions_INPUT_DATA.3cc998f5b1", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__transactions_INPUT_DATA.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_INPUT_DATA", "alias": "transactions_INPUT_DATA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transactions.yml/not_null_silver__transactions_INPUT_DATA.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.605898, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.transactions\nwhere INPUT_DATA is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.transactions_INPUT_DATA", "column_name": "INPUT_DATA", "file_key_name": "models.silver__transactions"}, "test.polygon_models.not_null_silver__transactions_STATUS.42a484ef7a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "STATUS", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__transactions_STATUS"], "unique_id": "test.polygon_models.not_null_silver__transactions_STATUS.42a484ef7a", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__transactions_STATUS.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_STATUS", "alias": "transactions_STATUS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transactions.yml/not_null_silver__transactions_STATUS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.607915, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.transactions\nwhere STATUS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.transactions_STATUS", "column_name": "STATUS", "file_key_name": "models.silver__transactions"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_set_silver__transactions_STATUS__SUCCESS__FAIL.f4150c7e34": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_872f99065f10c7e61eabddf3c8777c3c\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["SUCCESS", "FAIL"], "column_name": "STATUS", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_872f99065f10c7e61eabddf3c8777c3c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_set_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_be_in_set_silver__transactions_STATUS__SUCCESS__FAIL"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_set_silver__transactions_STATUS__SUCCESS__FAIL.f4150c7e34", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_872f99065f10c7e61eabddf3c8777c3c.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_silver__transactions_STATUS__SUCCESS__FAIL", "alias": "transactions_STATUS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_872f99065f10c7e61eabddf3c8777c3c.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_872f99065f10c7e61eabddf3c8777c3c"}, "created_at": 1669126489.609461, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        STATUS as value_field\n\n    from POLYGON_DEV.silver.transactions\n    \n\n),\nset_values as (\n\n    select\n        cast('SUCCESS' as TEXT) as value_field\n    union all\n    select\n        cast('FAIL' as TEXT) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_set_silver.transactions_STATUS", "column_name": "STATUS", "file_key_name": "models.silver__transactions"}, "test.polygon_models.not_null_silver__transactions_GAS_USED.1c943486c0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "GAS_USED", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__transactions_GAS_USED"], "unique_id": "test.polygon_models.not_null_silver__transactions_GAS_USED.1c943486c0", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__transactions_GAS_USED.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_GAS_USED", "alias": "transactions_GAS_USED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transactions.yml/not_null_silver__transactions_GAS_USED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.6216729, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.transactions\nwhere GAS_USED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.transactions_GAS_USED", "column_name": "GAS_USED", "file_key_name": "models.silver__transactions"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_USED__NUMBER__FLOAT.5308f986d3": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0e2b2dda75a879bf3be8005c2ae5de07\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "GAS_USED", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0e2b2dda75a879bf3be8005c2ae5de07", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_USED__NUMBER__FLOAT"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_USED__NUMBER__FLOAT.5308f986d3", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_0e2b2dda75a879bf3be8005c2ae5de07.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_USED__NUMBER__FLOAT", "alias": "transactions_GAS_USED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_0e2b2dda75a879bf3be8005c2ae5de07.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_0e2b2dda75a879bf3be8005c2ae5de07"}, "created_at": 1669126489.6245902, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POSITION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MATIC_VALUE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('INPUT_DATA' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CUMULATIVE_GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EFFECTIVE_GAS_PRICE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_JSON' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'GAS_USED'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transactions_GAS_USED", "column_name": "GAS_USED", "file_key_name": "models.silver__transactions"}, "test.polygon_models.not_null_silver__transactions_CUMULATIVE_GAS_USED.2ff9788f8f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CUMULATIVE_GAS_USED", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__transactions_CUMULATIVE_GAS_USED"], "unique_id": "test.polygon_models.not_null_silver__transactions_CUMULATIVE_GAS_USED.2ff9788f8f", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__transactions_CUMULATIVE_GAS_USED.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_CUMULATIVE_GAS_USED", "alias": "transactions_CUMULATIVE_GAS_USED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transactions.yml/not_null_silver__transactions_CUMULATIVE_GAS_USED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.629861, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.transactions\nwhere CUMULATIVE_GAS_USED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.transactions_CUMULATIVE_GAS_USED", "column_name": "CUMULATIVE_GAS_USED", "file_key_name": "models.silver__transactions"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_CUMULATIVE_GAS_USED__NUMBER__FLOAT.68061c4689": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_45b95261835eb2c24f1f98898c20a8ed\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "CUMULATIVE_GAS_USED", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_45b95261835eb2c24f1f98898c20a8ed", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_CUMULATIVE_GAS_USED__NUMBER__FLOAT"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_CUMULATIVE_GAS_USED__NUMBER__FLOAT.68061c4689", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_45b95261835eb2c24f1f98898c20a8ed.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_CUMULATIVE_GAS_USED__NUMBER__FLOAT", "alias": "transactions_CUMULATIVE_GAS_USED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_45b95261835eb2c24f1f98898c20a8ed.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_45b95261835eb2c24f1f98898c20a8ed"}, "created_at": 1669126489.632329, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POSITION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MATIC_VALUE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('INPUT_DATA' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CUMULATIVE_GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EFFECTIVE_GAS_PRICE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_JSON' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CUMULATIVE_GAS_USED'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transactions_CUMULATIVE_GAS_USED", "column_name": "CUMULATIVE_GAS_USED", "file_key_name": "models.silver__transactions"}, "test.polygon_models.not_null_silver__transactions_TX_FEE.f2f0cdc085": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_FEE", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__transactions_TX_FEE"], "unique_id": "test.polygon_models.not_null_silver__transactions_TX_FEE.f2f0cdc085", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__transactions_TX_FEE.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_TX_FEE", "alias": "transactions_TX_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transactions.yml/not_null_silver__transactions_TX_FEE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.638035, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.transactions\nwhere TX_FEE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.transactions_TX_FEE", "column_name": "TX_FEE", "file_key_name": "models.silver__transactions"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_FEE__NUMBER__FLOAT.c56121a801": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0b4d3bcae2ca4f1c43b283711aef3c35\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TX_FEE", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0b4d3bcae2ca4f1c43b283711aef3c35", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_FEE__NUMBER__FLOAT"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_FEE__NUMBER__FLOAT.c56121a801", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_0b4d3bcae2ca4f1c43b283711aef3c35.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_FEE__NUMBER__FLOAT", "alias": "transactions_TX_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_0b4d3bcae2ca4f1c43b283711aef3c35.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_0b4d3bcae2ca4f1c43b283711aef3c35"}, "created_at": 1669126489.6411252, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POSITION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MATIC_VALUE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('INPUT_DATA' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CUMULATIVE_GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EFFECTIVE_GAS_PRICE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_JSON' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_FEE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transactions_TX_FEE", "column_name": "TX_FEE", "file_key_name": "models.silver__transactions"}, "test.polygon_models.not_null_silver__transactions_EFFECTIVE_GAS_PRICE.fac733dec7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EFFECTIVE_GAS_PRICE", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__transactions_EFFECTIVE_GAS_PRICE"], "unique_id": "test.polygon_models.not_null_silver__transactions_EFFECTIVE_GAS_PRICE.fac733dec7", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__transactions_EFFECTIVE_GAS_PRICE.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_EFFECTIVE_GAS_PRICE", "alias": "transactions_EFFECTIVE_GAS_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transactions.yml/not_null_silver__transactions_EFFECTIVE_GAS_PRICE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.646084, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.transactions\nwhere EFFECTIVE_GAS_PRICE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.transactions_EFFECTIVE_GAS_PRICE", "column_name": "EFFECTIVE_GAS_PRICE", "file_key_name": "models.silver__transactions"}, "test.polygon_models.not_null_silver__transactions_TX_JSON.c989b71e6a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_JSON", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__transactions_TX_JSON"], "unique_id": "test.polygon_models.not_null_silver__transactions_TX_JSON.c989b71e6a", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__transactions_TX_JSON.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_TX_JSON", "alias": "transactions_TX_JSON", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transactions.yml/not_null_silver__transactions_TX_JSON.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.6476212, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.transactions\nwhere TX_JSON is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.transactions_TX_JSON", "column_name": "TX_JSON", "file_key_name": "models.silver__transactions"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_JSON__OBJECT.f6596e98ec": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_06b0aca54d96e39c17a644c62937f0ed\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["OBJECT"], "column_name": "TX_JSON", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_06b0aca54d96e39c17a644c62937f0ed", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_JSON__OBJECT"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_JSON__OBJECT.f6596e98ec", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_06b0aca54d96e39c17a644c62937f0ed.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_JSON__OBJECT", "alias": "transactions_TX_JSON", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_06b0aca54d96e39c17a644c62937f0ed.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_06b0aca54d96e39c17a644c62937f0ed"}, "created_at": 1669126489.64912, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POSITION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MATIC_VALUE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('INPUT_DATA' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CUMULATIVE_GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EFFECTIVE_GAS_PRICE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_JSON' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_JSON'\n            and\n            relation_column_type not in ('OBJECT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transactions_TX_JSON", "column_name": "TX_JSON", "file_key_name": "models.silver__transactions"}, "test.polygon_models.not_null_silver__transactions_INGESTED_AT.98e6b66449": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__transactions_INGESTED_AT"], "unique_id": "test.polygon_models.not_null_silver__transactions_INGESTED_AT.98e6b66449", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__transactions_INGESTED_AT.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_INGESTED_AT", "alias": "transactions_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transactions.yml/not_null_silver__transactions_INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.654146, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.transactions\nwhere INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.transactions_INGESTED_AT", "column_name": "INGESTED_AT", "file_key_name": "models.silver__transactions"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_INGESTED_AT__TIMESTAMP_NTZ.c716636b55": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_52f894208921d17a5239f274366ad6f3\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_52f894208921d17a5239f274366ad6f3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_INGESTED_AT__TIMESTAMP_NTZ"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_INGESTED_AT__TIMESTAMP_NTZ.c716636b55", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_52f894208921d17a5239f274366ad6f3.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_INGESTED_AT__TIMESTAMP_NTZ", "alias": "transactions_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_52f894208921d17a5239f274366ad6f3.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_52f894208921d17a5239f274366ad6f3"}, "created_at": 1669126489.6565409, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POSITION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MATIC_VALUE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('INPUT_DATA' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CUMULATIVE_GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EFFECTIVE_GAS_PRICE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_JSON' as TEXT) as relation_column,\n            cast('OBJECT' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'INGESTED_AT'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transactions_INGESTED_AT", "column_name": "INGESTED_AT", "file_key_name": "models.silver__transactions"}, "test.polygon_models.not_null_silver__transactions_ORIGIN_FUNCTION_SIGNATURE.6ba6212d68": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FUNCTION_SIGNATURE", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__transactions_ORIGIN_FUNCTION_SIGNATURE"], "unique_id": "test.polygon_models.not_null_silver__transactions_ORIGIN_FUNCTION_SIGNATURE.6ba6212d68", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__transactions_ORIGIN_FUNCTION_SIGNATURE.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_ORIGIN_FUNCTION_SIGNATURE", "alias": "transactions_ORIGIN_FUNCTION_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transactions.yml/not_null_silver__transactions_ORIGIN_FUNCTION_SIGNATURE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.6616051, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.transactions\nwhere ORIGIN_FUNCTION_SIGNATURE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.transactions_ORIGIN_FUNCTION_SIGNATURE", "column_name": "ORIGIN_FUNCTION_SIGNATURE", "file_key_name": "models.silver__transactions"}, "test.polygon_models.dbt_utils_unique_combination_of_columns_silver__transactions_TX_HASH.c217683bc6": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_7a84e25f1ca3d82eb9547aa168eb4b32\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_HASH"], "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_7a84e25f1ca3d82eb9547aa168eb4b32", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["polygon_models", "silver", "dbt_utils_unique_combination_of_columns_silver__transactions_TX_HASH"], "unique_id": "test.polygon_models.dbt_utils_unique_combination_of_columns_silver__transactions_TX_HASH.c217683bc6", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_utils_unique_combination_o_7a84e25f1ca3d82eb9547aa168eb4b32.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_utils_unique_combination_of_columns_silver__transactions_TX_HASH", "alias": "transactions_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transactions.yml/dbt_utils_unique_combination_o_7a84e25f1ca3d82eb9547aa168eb4b32.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_7a84e25f1ca3d82eb9547aa168eb4b32"}, "created_at": 1669126489.663195, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_HASH\n    from POLYGON_DEV.silver.transactions\n    group by TX_HASH\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_utils_unique_combination_of_columns_silver.transactions_TX_HASH", "column_name": null, "file_key_name": "models.silver__transactions"}, "test.polygon_models.sequence_gaps_silver__transactions_POSITION__BLOCK_NUMBER.bb18e3a49e": {"raw_sql": "{{ test_sequence_gaps(**_dbt_generic_test_kwargs) }}{{ config(severity=\"error\",where=\"BLOCK_TIMESTAMP < CURRENT_DATE\",warn_if=\">1\",error_if=\">10\") }}", "test_metadata": {"name": "sequence_gaps", "kwargs": {"partition_by": ["BLOCK_NUMBER"], "column_name": "POSITION", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.polygon_models.test_sequence_gaps", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "error", "store_failures": true, "where": "BLOCK_TIMESTAMP < CURRENT_DATE", "limit": null, "fail_calc": "count(*)", "warn_if": ">1", "error_if": ">10"}, "database": "POLYGON_DEV", "schema": "sequence_gaps_silver", "fqn": ["polygon_models", "silver", "sequence_gaps_silver__transactions_POSITION__BLOCK_NUMBER"], "unique_id": "test.polygon_models.sequence_gaps_silver__transactions_POSITION__BLOCK_NUMBER.bb18e3a49e", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "sequence_gaps_silver__transactions_POSITION__BLOCK_NUMBER.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "sequence_gaps_silver__transactions_POSITION__BLOCK_NUMBER", "alias": "transactions_POSITION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transactions.yml/sequence_gaps_silver__transactions_POSITION__BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "severity": "error", "where": "BLOCK_TIMESTAMP < CURRENT_DATE", "warn_if": ">1", "error_if": ">10"}, "created_at": 1669126489.677454, "compiled_sql": "WITH source AS (\n    SELECT\n        BLOCK_NUMBER,\n        POSITION,\n        LAG(\n            POSITION,\n            1\n        ) over (\n            PARTITION BY BLOCK_NUMBER\n            ORDER BY\n                POSITION ASC\n        ) AS prev_POSITION\n    FROM\n        (select * from POLYGON_DEV.silver.transactions where BLOCK_TIMESTAMP < CURRENT_DATE) dbt_subquery\n)\nSELECT\n    BLOCK_NUMBER,\n    prev_POSITION,\n    POSITION,\n    POSITION - prev_POSITION\n    - 1 AS gap\nFROM\n    source\nWHERE\n    POSITION - prev_POSITION <> 1\nORDER BY\n    gap DESC ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.sequence_gaps_silver.transactions_POSITION", "column_name": null, "file_key_name": "models.silver__transactions"}, "test.polygon_models.not_null_silver__transfers_BLOCK_NUMBER.d11bbde531": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__transfers_BLOCK_NUMBER"], "unique_id": "test.polygon_models.not_null_silver__transfers_BLOCK_NUMBER.d11bbde531", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__transfers_BLOCK_NUMBER.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_BLOCK_NUMBER", "alias": "transfers_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transfers.yml/not_null_silver__transfers_BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.700858, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.transfers\nwhere BLOCK_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.transfers_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__transfers"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_NUMBER__NUMBER__FLOAT.45ecdb8c94": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_bd45beacfc40801946216542c2049d02\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_bd45beacfc40801946216542c2049d02", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_NUMBER__NUMBER__FLOAT"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_NUMBER__NUMBER__FLOAT.45ecdb8c94", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_bd45beacfc40801946216542c2049d02.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_NUMBER__NUMBER__FLOAT", "alias": "transfers_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transfers.yml/dbt_expectations_expect_column_bd45beacfc40801946216542c2049d02.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_bd45beacfc40801946216542c2049d02"}, "created_at": 1669126489.704125, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('_LOG_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_AMOUNT' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_NUMBER'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transfers_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__transfers"}, "test.polygon_models.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__transfers_BLOCK_TIMESTAMP"], "unique_id": "test.polygon_models.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__transfers_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_BLOCK_TIMESTAMP", "alias": "transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transfers.yml/not_null_silver__transfers_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.7153761, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.transfers\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.transfers_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transfers"}, "test.polygon_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__1.aef2ec1111": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_0391e7977e8cebd188a1d5fa8d5e5c1d\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_0391e7977e8cebd188a1d5fa8d5e5c1d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.polygon_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__1.aef2ec1111", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_row_va_0391e7977e8cebd188a1d5fa8d5e5c1d.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__1", "alias": "transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transfers.yml/dbt_expectations_expect_row_va_0391e7977e8cebd188a1d5fa8d5e5c1d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_0391e7977e8cebd188a1d5fa8d5e5c1d"}, "created_at": 1669126489.718849, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as TIMESTAMP)) as max_timestamp\n    from\n        POLYGON_DEV.silver.transfers\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as TIMESTAMP) <= convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as TIMESTAMP))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        )\n\n as TIMESTAMP)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.transfers_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transfers"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.4ccf9184cd": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_aaa4d09592b0234773f61be8de1236a1\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_aaa4d09592b0234773f61be8de1236a1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.4ccf9184cd", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_aaa4d09592b0234773f61be8de1236a1.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transfers.yml/dbt_expectations_expect_column_aaa4d09592b0234773f61be8de1236a1.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_aaa4d09592b0234773f61be8de1236a1"}, "created_at": 1669126489.7396638, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('_LOG_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_AMOUNT' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transfers_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transfers"}, "test.polygon_models.not_null_silver__transfers_TX_HASH.9444c39bdc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__transfers_TX_HASH"], "unique_id": "test.polygon_models.not_null_silver__transfers_TX_HASH.9444c39bdc", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__transfers_TX_HASH.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_TX_HASH", "alias": "transfers_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transfers.yml/not_null_silver__transfers_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.749606, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.transfers\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.transfers_TX_HASH", "column_name": "TX_HASH", "file_key_name": "models.silver__transfers"}, "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TX_HASH__0_xX_0_9a_fA_F_.f25b6d0ca1": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d624337f4f78032513c390b15f119aab\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d624337f4f78032513c390b15f119aab", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TX_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TX_HASH__0_xX_0_9a_fA_F_.f25b6d0ca1", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_d624337f4f78032513c390b15f119aab.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TX_HASH__0_xX_0_9a_fA_F_", "alias": "transfers_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transfers.yml/dbt_expectations_expect_column_d624337f4f78032513c390b15f119aab.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_d624337f4f78032513c390b15f119aab"}, "created_at": 1669126489.753193, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(TX_HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from POLYGON_DEV.silver.transfers\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.transfers_TX_HASH", "column_name": "TX_HASH", "file_key_name": "models.silver__transfers"}, "test.polygon_models.not_null_silver__transfers_CONTRACT_ADDRESS.df8cd401ef": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CONTRACT_ADDRESS", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__transfers_CONTRACT_ADDRESS"], "unique_id": "test.polygon_models.not_null_silver__transfers_CONTRACT_ADDRESS.df8cd401ef", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__transfers_CONTRACT_ADDRESS.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_CONTRACT_ADDRESS", "alias": "transfers_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transfers.yml/not_null_silver__transfers_CONTRACT_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.765513, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.transfers\nwhere CONTRACT_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.transfers_CONTRACT_ADDRESS", "column_name": "CONTRACT_ADDRESS", "file_key_name": "models.silver__transfers"}, "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.8e89d13bed": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fba7c1e9a17511d04443ec0e84015cde\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "CONTRACT_ADDRESS", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fba7c1e9a17511d04443ec0e84015cde", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__transfers_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.8e89d13bed", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_fba7c1e9a17511d04443ec0e84015cde.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__transfers_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_", "alias": "transfers_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transfers.yml/dbt_expectations_expect_column_fba7c1e9a17511d04443ec0e84015cde.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_fba7c1e9a17511d04443ec0e84015cde"}, "created_at": 1669126489.76911, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(CONTRACT_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from POLYGON_DEV.silver.transfers\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.transfers_CONTRACT_ADDRESS", "column_name": "CONTRACT_ADDRESS", "file_key_name": "models.silver__transfers"}, "test.polygon_models.not_null_silver__transfers_FROM_ADDRESS.cc15ca835c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP > '2021-08-01'\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "BLOCK_TIMESTAMP > '2021-08-01'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__transfers_FROM_ADDRESS"], "unique_id": "test.polygon_models.not_null_silver__transfers_FROM_ADDRESS.cc15ca835c", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__transfers_FROM_ADDRESS.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_FROM_ADDRESS", "alias": "transfers_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transfers.yml/not_null_silver__transfers_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "BLOCK_TIMESTAMP > '2021-08-01'"}, "created_at": 1669126489.78057, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from POLYGON_DEV.silver.transfers where BLOCK_TIMESTAMP > '2021-08-01') dbt_subquery\nwhere FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.transfers_FROM_ADDRESS", "column_name": "FROM_ADDRESS", "file_key_name": "models.silver__transfers"}, "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_FROM_ADDRESS__0_xX_0_9a_fA_F_.0479073084": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_11c955c962648507f9afe949f72ead16\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_11c955c962648507f9afe949f72ead16", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__transfers_FROM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_FROM_ADDRESS__0_xX_0_9a_fA_F_.0479073084", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_11c955c962648507f9afe949f72ead16.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__transfers_FROM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "transfers_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transfers.yml/dbt_expectations_expect_column_11c955c962648507f9afe949f72ead16.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_11c955c962648507f9afe949f72ead16"}, "created_at": 1669126489.783394, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(FROM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from POLYGON_DEV.silver.transfers\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.transfers_FROM_ADDRESS", "column_name": "FROM_ADDRESS", "file_key_name": "models.silver__transfers"}, "test.polygon_models.not_null_silver__transfers_TO_ADDRESS.2ea6a02b7c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__transfers_TO_ADDRESS"], "unique_id": "test.polygon_models.not_null_silver__transfers_TO_ADDRESS.2ea6a02b7c", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__transfers_TO_ADDRESS.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_TO_ADDRESS", "alias": "transfers_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transfers.yml/not_null_silver__transfers_TO_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.792638, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.transfers\nwhere TO_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.transfers_TO_ADDRESS", "column_name": "TO_ADDRESS", "file_key_name": "models.silver__transfers"}, "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TO_ADDRESS__0_xX_0_9a_fA_F_.f65ff6bdb6": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_61bceb32252bba56af400b6e097a7cfc\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_61bceb32252bba56af400b6e097a7cfc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TO_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TO_ADDRESS__0_xX_0_9a_fA_F_.f65ff6bdb6", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_61bceb32252bba56af400b6e097a7cfc.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TO_ADDRESS__0_xX_0_9a_fA_F_", "alias": "transfers_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transfers.yml/dbt_expectations_expect_column_61bceb32252bba56af400b6e097a7cfc.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_61bceb32252bba56af400b6e097a7cfc"}, "created_at": 1669126489.7962081, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(TO_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from POLYGON_DEV.silver.transfers\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.transfers_TO_ADDRESS", "column_name": "TO_ADDRESS", "file_key_name": "models.silver__transfers"}, "test.polygon_models.not_null_silver__transfers_RAW_AMOUNT.c53823d6c7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RAW_AMOUNT", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__transfers_RAW_AMOUNT"], "unique_id": "test.polygon_models.not_null_silver__transfers_RAW_AMOUNT.c53823d6c7", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__transfers_RAW_AMOUNT.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_RAW_AMOUNT", "alias": "transfers_RAW_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transfers.yml/not_null_silver__transfers_RAW_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.804631, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.transfers\nwhere RAW_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.transfers_RAW_AMOUNT", "column_name": "RAW_AMOUNT", "file_key_name": "models.silver__transfers"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_RAW_AMOUNT__NUMBER__FLOAT.eb70e6172e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_940dd8a16015feb4a7bd93d193e67f0d\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "RAW_AMOUNT", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_940dd8a16015feb4a7bd93d193e67f0d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_RAW_AMOUNT__NUMBER__FLOAT"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_RAW_AMOUNT__NUMBER__FLOAT.eb70e6172e", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_940dd8a16015feb4a7bd93d193e67f0d.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_RAW_AMOUNT__NUMBER__FLOAT", "alias": "transfers_RAW_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transfers.yml/dbt_expectations_expect_column_940dd8a16015feb4a7bd93d193e67f0d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_940dd8a16015feb4a7bd93d193e67f0d"}, "created_at": 1669126489.807636, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('_LOG_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_AMOUNT' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'RAW_AMOUNT'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transfers_RAW_AMOUNT", "column_name": "RAW_AMOUNT", "file_key_name": "models.silver__transfers"}, "test.polygon_models.not_null_silver__transfers__LOG_ID.29bb073a40": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_LOG_ID", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__transfers__LOG_ID"], "unique_id": "test.polygon_models.not_null_silver__transfers__LOG_ID.29bb073a40", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__transfers__LOG_ID.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers__LOG_ID", "alias": "transfers", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transfers.yml/not_null_silver__transfers__LOG_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.815774, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.transfers\nwhere _LOG_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.transfers", "column_name": "_LOG_ID", "file_key_name": "models.silver__transfers"}, "test.polygon_models.not_null_silver__transfers_ORIGIN_FUNCTION_SIGNATURE.c1c149f732": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FUNCTION_SIGNATURE", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__transfers_ORIGIN_FUNCTION_SIGNATURE"], "unique_id": "test.polygon_models.not_null_silver__transfers_ORIGIN_FUNCTION_SIGNATURE.c1c149f732", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__transfers_ORIGIN_FUNCTION_SIGNATURE.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_ORIGIN_FUNCTION_SIGNATURE", "alias": "transfers_ORIGIN_FUNCTION_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transfers.yml/not_null_silver__transfers_ORIGIN_FUNCTION_SIGNATURE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.819066, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.transfers\nwhere ORIGIN_FUNCTION_SIGNATURE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.transfers_ORIGIN_FUNCTION_SIGNATURE", "column_name": "ORIGIN_FUNCTION_SIGNATURE", "file_key_name": "models.silver__transfers"}, "test.polygon_models.not_null_silver__transfers_ORIGIN_FROM_ADDRESS.30ffa7f127": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__transfers_ORIGIN_FROM_ADDRESS"], "unique_id": "test.polygon_models.not_null_silver__transfers_ORIGIN_FROM_ADDRESS.30ffa7f127", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__transfers_ORIGIN_FROM_ADDRESS.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_ORIGIN_FROM_ADDRESS", "alias": "transfers_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transfers.yml/not_null_silver__transfers_ORIGIN_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.8218722, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.transfers\nwhere ORIGIN_FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.transfers_ORIGIN_FROM_ADDRESS", "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.silver__transfers"}, "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.fb311c6cec": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_57a875c8c76ea04448b1a0fd7cdd4c83\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_57a875c8c76ea04448b1a0fd7cdd4c83", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__transfers_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.fb311c6cec", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_57a875c8c76ea04448b1a0fd7cdd4c83.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__transfers_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "transfers_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transfers.yml/dbt_expectations_expect_column_57a875c8c76ea04448b1a0fd7cdd4c83.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_57a875c8c76ea04448b1a0fd7cdd4c83"}, "created_at": 1669126489.8277462, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(ORIGIN_FROM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from POLYGON_DEV.silver.transfers\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.transfers_ORIGIN_FROM_ADDRESS", "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.silver__transfers"}, "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.81fe3d170a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_485ceed5592c0a003510c7db121e3c6c\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_485ceed5592c0a003510c7db121e3c6c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__transfers_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.81fe3d170a", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_485ceed5592c0a003510c7db121e3c6c.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__transfers_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_", "alias": "transfers_ORIGIN_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transfers.yml/dbt_expectations_expect_column_485ceed5592c0a003510c7db121e3c6c.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_485ceed5592c0a003510c7db121e3c6c"}, "created_at": 1669126489.836203, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(ORIGIN_TO_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from POLYGON_DEV.silver.transfers\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_match_regex_silver.transfers_ORIGIN_TO_ADDRESS", "column_name": "ORIGIN_TO_ADDRESS", "file_key_name": "models.silver__transfers"}, "test.polygon_models.dbt_utils_unique_combination_of_columns_silver__transfers__LOG_ID.3ebab76726": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_92e87c768ab455e8d4a45a09a6fd346d\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_LOG_ID"], "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_92e87c768ab455e8d4a45a09a6fd346d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["polygon_models", "silver", "dbt_utils_unique_combination_of_columns_silver__transfers__LOG_ID"], "unique_id": "test.polygon_models.dbt_utils_unique_combination_of_columns_silver__transfers__LOG_ID.3ebab76726", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_utils_unique_combination_o_92e87c768ab455e8d4a45a09a6fd346d.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_utils_unique_combination_of_columns_silver__transfers__LOG_ID", "alias": "transfers", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__transfers.yml/dbt_utils_unique_combination_o_92e87c768ab455e8d4a45a09a6fd346d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_92e87c768ab455e8d4a45a09a6fd346d"}, "created_at": 1669126489.843512, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _LOG_ID\n    from POLYGON_DEV.silver.transfers\n    group by _LOG_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_utils_unique_combination_of_columns_silver.transfers", "column_name": null, "file_key_name": "models.silver__transfers"}, "test.polygon_models.not_null_core__dim_labels_BLOCKCHAIN.a4e09054d7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.core__dim_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_core", "fqn": ["polygon_models", "gold", "not_null_core__dim_labels_BLOCKCHAIN"], "unique_id": "test.polygon_models.not_null_core__dim_labels_BLOCKCHAIN.a4e09054d7", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_core__dim_labels_BLOCKCHAIN.sql", "original_file_path": "models/gold/core__dim_labels.yml", "name": "not_null_core__dim_labels_BLOCKCHAIN", "alias": "dim_labels_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/gold/core__dim_labels.yml/not_null_core__dim_labels_BLOCKCHAIN.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.911105, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.core.dim_labels\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_core.dim_labels_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.core__dim_labels"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_BLOCKCHAIN__polygon.5e6c2c1b9f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f29db00392e37034b06e39950e6ad13a\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["polygon"], "column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.core__dim_labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f29db00392e37034b06e39950e6ad13a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_set_core", "fqn": ["polygon_models", "gold", "dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_BLOCKCHAIN__polygon"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_BLOCKCHAIN__polygon.5e6c2c1b9f", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_f29db00392e37034b06e39950e6ad13a.sql", "original_file_path": "models/gold/core__dim_labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_BLOCKCHAIN__polygon", "alias": "dim_labels_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/gold/core__dim_labels.yml/dbt_expectations_expect_column_f29db00392e37034b06e39950e6ad13a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_f29db00392e37034b06e39950e6ad13a"}, "created_at": 1669126489.9132411, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        BLOCKCHAIN as value_field\n\n    from POLYGON_DEV.core.dim_labels\n    \n\n),\nset_values as (\n\n    select\n        cast('polygon' as TEXT) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_set_core.dim_labels_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.core__dim_labels"}, "test.polygon_models.not_null_core__dim_labels_CREATOR.0c77d5749c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CREATOR", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.core__dim_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_core", "fqn": ["polygon_models", "gold", "not_null_core__dim_labels_CREATOR"], "unique_id": "test.polygon_models.not_null_core__dim_labels_CREATOR.0c77d5749c", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_core__dim_labels_CREATOR.sql", "original_file_path": "models/gold/core__dim_labels.yml", "name": "not_null_core__dim_labels_CREATOR", "alias": "dim_labels_CREATOR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/gold/core__dim_labels.yml/not_null_core__dim_labels_CREATOR.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.91947, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.core.dim_labels\nwhere CREATOR is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_core.dim_labels_CREATOR", "column_name": "CREATOR", "file_key_name": "models.core__dim_labels"}, "test.polygon_models.not_null_core__dim_labels_ADDRESS.ddf35f62af": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.core__dim_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_core", "fqn": ["polygon_models", "gold", "not_null_core__dim_labels_ADDRESS"], "unique_id": "test.polygon_models.not_null_core__dim_labels_ADDRESS.ddf35f62af", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_core__dim_labels_ADDRESS.sql", "original_file_path": "models/gold/core__dim_labels.yml", "name": "not_null_core__dim_labels_ADDRESS", "alias": "dim_labels_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/gold/core__dim_labels.yml/not_null_core__dim_labels_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.922863, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.core.dim_labels\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_core.dim_labels_ADDRESS", "column_name": "ADDRESS", "file_key_name": "models.core__dim_labels"}, "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_core__dim_labels_ADDRESS__0_xX_0_9a_fA_F_.52c2534d6a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e990285a86f4dce4c3da26f6932752bc\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.core__dim_labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e990285a86f4dce4c3da26f6932752bc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_core", "fqn": ["polygon_models", "gold", "dbt_expectations_expect_column_values_to_match_regex_core__dim_labels_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_core__dim_labels_ADDRESS__0_xX_0_9a_fA_F_.52c2534d6a", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_e990285a86f4dce4c3da26f6932752bc.sql", "original_file_path": "models/gold/core__dim_labels.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_core__dim_labels_ADDRESS__0_xX_0_9a_fA_F_", "alias": "dim_labels_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/gold/core__dim_labels.yml/dbt_expectations_expect_column_e990285a86f4dce4c3da26f6932752bc.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_e990285a86f4dce4c3da26f6932752bc"}, "created_at": 1669126489.927341, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from POLYGON_DEV.core.dim_labels\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_match_regex_core.dim_labels_ADDRESS", "column_name": "ADDRESS", "file_key_name": "models.core__dim_labels"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_ADDRESS_NAME__STRING__VARCHAR.7747aa45d1": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0157bb28d9599f33d4efbe0a75260f3b\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS_NAME", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.core__dim_labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0157bb28d9599f33d4efbe0a75260f3b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["polygon_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_ADDRESS_NAME__STRING__VARCHAR"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_ADDRESS_NAME__STRING__VARCHAR.7747aa45d1", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_0157bb28d9599f33d4efbe0a75260f3b.sql", "original_file_path": "models/gold/core__dim_labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_ADDRESS_NAME__STRING__VARCHAR", "alias": "dim_labels_ADDRESS_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/gold/core__dim_labels.yml/dbt_expectations_expect_column_0157bb28d9599f33d4efbe0a75260f3b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_0157bb28d9599f33d4efbe0a75260f3b"}, "created_at": 1669126489.9351082, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_SUBTYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS_NAME'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.dim_labels_ADDRESS_NAME", "column_name": "ADDRESS_NAME", "file_key_name": "models.core__dim_labels"}, "test.polygon_models.not_null_core__dim_labels_LABEL_TYPE.65b0f6f1ed": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LABEL_TYPE", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.core__dim_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_core", "fqn": ["polygon_models", "gold", "not_null_core__dim_labels_LABEL_TYPE"], "unique_id": "test.polygon_models.not_null_core__dim_labels_LABEL_TYPE.65b0f6f1ed", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_core__dim_labels_LABEL_TYPE.sql", "original_file_path": "models/gold/core__dim_labels.yml", "name": "not_null_core__dim_labels_LABEL_TYPE", "alias": "dim_labels_LABEL_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/gold/core__dim_labels.yml/not_null_core__dim_labels_LABEL_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.944719, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.core.dim_labels\nwhere LABEL_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_core.dim_labels_LABEL_TYPE", "column_name": "LABEL_TYPE", "file_key_name": "models.core__dim_labels"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin__project.145ec1d947": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9218b3ba70968c098bf5a126b21109bf\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["flotsam", "nft", "defi", "dex", "cex", "dapp", "token", "operator", "layer2", "chadmin", "project"], "column_name": "LABEL_TYPE", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.core__dim_labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9218b3ba70968c098bf5a126b21109bf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_set_core", "fqn": ["polygon_models", "gold", "dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin__project"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin__project.145ec1d947", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_9218b3ba70968c098bf5a126b21109bf.sql", "original_file_path": "models/gold/core__dim_labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin__project", "alias": "dim_labels_LABEL_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/gold/core__dim_labels.yml/dbt_expectations_expect_column_9218b3ba70968c098bf5a126b21109bf.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_9218b3ba70968c098bf5a126b21109bf"}, "created_at": 1669126489.948189, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        LABEL_TYPE as value_field\n\n    from POLYGON_DEV.core.dim_labels\n    \n\n),\nset_values as (\n\n    select\n        cast('flotsam' as TEXT) as value_field\n    union all\n    select\n        cast('nft' as TEXT) as value_field\n    union all\n    select\n        cast('defi' as TEXT) as value_field\n    union all\n    select\n        cast('dex' as TEXT) as value_field\n    union all\n    select\n        cast('cex' as TEXT) as value_field\n    union all\n    select\n        cast('dapp' as TEXT) as value_field\n    union all\n    select\n        cast('token' as TEXT) as value_field\n    union all\n    select\n        cast('operator' as TEXT) as value_field\n    union all\n    select\n        cast('layer2' as TEXT) as value_field\n    union all\n    select\n        cast('chadmin' as TEXT) as value_field\n    union all\n    select\n        cast('project' as TEXT) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_set_core.dim_labels_LABEL_TYPE", "column_name": "LABEL_TYPE", "file_key_name": "models.core__dim_labels"}, "test.polygon_models.not_null_core__dim_labels_LABEL_SUBTYPE.556a65235c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LABEL_SUBTYPE", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.core__dim_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_core", "fqn": ["polygon_models", "gold", "not_null_core__dim_labels_LABEL_SUBTYPE"], "unique_id": "test.polygon_models.not_null_core__dim_labels_LABEL_SUBTYPE.556a65235c", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_core__dim_labels_LABEL_SUBTYPE.sql", "original_file_path": "models/gold/core__dim_labels.yml", "name": "not_null_core__dim_labels_LABEL_SUBTYPE", "alias": "dim_labels_LABEL_SUBTYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/gold/core__dim_labels.yml/not_null_core__dim_labels_LABEL_SUBTYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.9671721, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.core.dim_labels\nwhere LABEL_SUBTYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_core.dim_labels_LABEL_SUBTYPE", "column_name": "LABEL_SUBTYPE", "file_key_name": "models.core__dim_labels"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_LABEL_SUBTYPE__STRING__VARCHAR.80b827b7f5": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d519d707a433e06c1d79b58bc3bb7d6f\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "LABEL_SUBTYPE", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.core__dim_labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d519d707a433e06c1d79b58bc3bb7d6f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["polygon_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_LABEL_SUBTYPE__STRING__VARCHAR"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_LABEL_SUBTYPE__STRING__VARCHAR.80b827b7f5", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_d519d707a433e06c1d79b58bc3bb7d6f.sql", "original_file_path": "models/gold/core__dim_labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_LABEL_SUBTYPE__STRING__VARCHAR", "alias": "dim_labels_LABEL_SUBTYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/gold/core__dim_labels.yml/dbt_expectations_expect_column_d519d707a433e06c1d79b58bc3bb7d6f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_d519d707a433e06c1d79b58bc3bb7d6f"}, "created_at": 1669126489.969553, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_SUBTYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LABEL_SUBTYPE'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.dim_labels_LABEL_SUBTYPE", "column_name": "LABEL_SUBTYPE", "file_key_name": "models.core__dim_labels"}, "test.polygon_models.not_null_core__dim_labels_PROJECT_NAME.484353cecc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROJECT_NAME", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.core__dim_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_core", "fqn": ["polygon_models", "gold", "not_null_core__dim_labels_PROJECT_NAME"], "unique_id": "test.polygon_models.not_null_core__dim_labels_PROJECT_NAME.484353cecc", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_core__dim_labels_PROJECT_NAME.sql", "original_file_path": "models/gold/core__dim_labels.yml", "name": "not_null_core__dim_labels_PROJECT_NAME", "alias": "dim_labels_PROJECT_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/gold/core__dim_labels.yml/not_null_core__dim_labels_PROJECT_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126489.9767559, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.core.dim_labels\nwhere PROJECT_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_core.dim_labels_PROJECT_NAME", "column_name": "PROJECT_NAME", "file_key_name": "models.core__dim_labels"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_PROJECT_NAME__STRING__VARCHAR.c5aaaed300": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f002684cbd1eb6d7200f4cd5e66d7292\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "PROJECT_NAME", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.core__dim_labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f002684cbd1eb6d7200f4cd5e66d7292", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["polygon_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_PROJECT_NAME__STRING__VARCHAR"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_PROJECT_NAME__STRING__VARCHAR.c5aaaed300", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_f002684cbd1eb6d7200f4cd5e66d7292.sql", "original_file_path": "models/gold/core__dim_labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_PROJECT_NAME__STRING__VARCHAR", "alias": "dim_labels_PROJECT_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/gold/core__dim_labels.yml/dbt_expectations_expect_column_f002684cbd1eb6d7200f4cd5e66d7292.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_f002684cbd1eb6d7200f4cd5e66d7292"}, "created_at": 1669126489.978454, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_SUBTYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PROJECT_NAME'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_core.dim_labels_PROJECT_NAME", "column_name": "PROJECT_NAME", "file_key_name": "models.core__dim_labels"}, "test.polygon_models.dbt_utils_unique_combination_of_columns_core__dim_labels_BLOCKCHAIN__CREATOR__ADDRESS.de325ffec9": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_8a7e229c14095011e4d56d1d71aa4845\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCKCHAIN", "CREATOR", "ADDRESS"], "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.core__dim_labels"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_8a7e229c14095011e4d56d1d71aa4845", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_utils_unique_combination_of_columns_core", "fqn": ["polygon_models", "gold", "dbt_utils_unique_combination_of_columns_core__dim_labels_BLOCKCHAIN__CREATOR__ADDRESS"], "unique_id": "test.polygon_models.dbt_utils_unique_combination_of_columns_core__dim_labels_BLOCKCHAIN__CREATOR__ADDRESS.de325ffec9", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_utils_unique_combination_o_8a7e229c14095011e4d56d1d71aa4845.sql", "original_file_path": "models/gold/core__dim_labels.yml", "name": "dbt_utils_unique_combination_of_columns_core__dim_labels_BLOCKCHAIN__CREATOR__ADDRESS", "alias": "dim_labels_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/gold/core__dim_labels.yml/dbt_utils_unique_combination_o_8a7e229c14095011e4d56d1d71aa4845.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_8a7e229c14095011e4d56d1d71aa4845"}, "created_at": 1669126489.9840782, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCKCHAIN, CREATOR, ADDRESS\n    from POLYGON_DEV.core.dim_labels\n    group by BLOCKCHAIN, CREATOR, ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_utils_unique_combination_of_columns_core.dim_labels_BLOCKCHAIN", "column_name": null, "file_key_name": "models.core__dim_labels"}, "test.polygon_models.not_null_sushi__ez_lending_BLOCK_NUMBER.7191bdf706": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('sushi__ez_lending')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_lending"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_sushi", "fqn": ["polygon_models", "sushi", "not_null_sushi__ez_lending_BLOCK_NUMBER"], "unique_id": "test.polygon_models.not_null_sushi__ez_lending_BLOCK_NUMBER.7191bdf706", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_sushi__ez_lending_BLOCK_NUMBER.sql", "original_file_path": "models/sushi/sushi__ez_lending.yml", "name": "not_null_sushi__ez_lending_BLOCK_NUMBER", "alias": "ez_lending_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_lending.yml/not_null_sushi__ez_lending_BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126490.006211, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.sushi.ez_lending\nwhere BLOCK_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_sushi.ez_lending_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.sushi__ez_lending"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_lending_BLOCK_NUMBER__NUMBER__FLOAT.35c6b5d227": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d6f4184f28825255cc28dc98bf0b73ff\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('sushi__ez_lending')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_lending"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d6f4184f28825255cc28dc98bf0b73ff", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["polygon_models", "sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_lending_BLOCK_NUMBER__NUMBER__FLOAT"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_lending_BLOCK_NUMBER__NUMBER__FLOAT.35c6b5d227", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_d6f4184f28825255cc28dc98bf0b73ff.sql", "original_file_path": "models/sushi/sushi__ez_lending.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_lending_BLOCK_NUMBER__NUMBER__FLOAT", "alias": "ez_lending_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_lending.yml/dbt_expectations_expect_column_d6f4184f28825255cc28dc98bf0b73ff.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_d6f4184f28825255cc28dc98bf0b73ff"}, "created_at": 1669126490.00814, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ASSET' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSITOR' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LENDER_IS_A_CONTRACT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_USD' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_NUMBER'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_sushi.ez_lending_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.sushi__ez_lending"}, "test.polygon_models.not_null_sushi__ez_lending_BLOCK_TIMESTAMP.47c8a01531": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('sushi__ez_lending')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_lending"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_sushi", "fqn": ["polygon_models", "sushi", "not_null_sushi__ez_lending_BLOCK_TIMESTAMP"], "unique_id": "test.polygon_models.not_null_sushi__ez_lending_BLOCK_TIMESTAMP.47c8a01531", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_sushi__ez_lending_BLOCK_TIMESTAMP.sql", "original_file_path": "models/sushi/sushi__ez_lending.yml", "name": "not_null_sushi__ez_lending_BLOCK_TIMESTAMP", "alias": "ez_lending_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_lending.yml/not_null_sushi__ez_lending_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126490.0142138, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.sushi.ez_lending\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_sushi.ez_lending_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.sushi__ez_lending"}, "test.polygon_models.dbt_expectations_expect_row_values_to_have_recent_data_sushi__ez_lending_BLOCK_TIMESTAMP__day__7.71e49e375e": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_2945c3492dfefb043e03072508a65191\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 7, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('sushi__ez_lending')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_lending"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_2945c3492dfefb043e03072508a65191", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_sushi", "fqn": ["polygon_models", "sushi", "dbt_expectations_expect_row_values_to_have_recent_data_sushi__ez_lending_BLOCK_TIMESTAMP__day__7"], "unique_id": "test.polygon_models.dbt_expectations_expect_row_values_to_have_recent_data_sushi__ez_lending_BLOCK_TIMESTAMP__day__7.71e49e375e", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_row_va_2945c3492dfefb043e03072508a65191.sql", "original_file_path": "models/sushi/sushi__ez_lending.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_sushi__ez_lending_BLOCK_TIMESTAMP__day__7", "alias": "ez_lending_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_lending.yml/dbt_expectations_expect_row_va_2945c3492dfefb043e03072508a65191.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_2945c3492dfefb043e03072508a65191"}, "created_at": 1669126490.015907, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as TIMESTAMP)) as max_timestamp\n    from\n        POLYGON_DEV.sushi.ez_lending\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as TIMESTAMP) <= convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as TIMESTAMP))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -7,\n        convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        )\n\n as TIMESTAMP)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_row_values_to_have_recent_data_sushi.ez_lending_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.sushi__ez_lending"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_lending_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.93cce89aaf": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4c1fc03c21165229cf95cb4b75605892\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('sushi__ez_lending')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_lending"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4c1fc03c21165229cf95cb4b75605892", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["polygon_models", "sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_lending_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_lending_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.93cce89aaf", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_4c1fc03c21165229cf95cb4b75605892.sql", "original_file_path": "models/sushi/sushi__ez_lending.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_lending_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "ez_lending_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_lending.yml/dbt_expectations_expect_column_4c1fc03c21165229cf95cb4b75605892.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_4c1fc03c21165229cf95cb4b75605892"}, "created_at": 1669126490.028354, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ASSET' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSITOR' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LENDER_IS_A_CONTRACT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_USD' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_sushi.ez_lending_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.sushi__ez_lending"}, "test.polygon_models.not_null_sushi__ez_lending_TX_HASH.3c471bed51": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('sushi__ez_lending')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_lending"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_sushi", "fqn": ["polygon_models", "sushi", "not_null_sushi__ez_lending_TX_HASH"], "unique_id": "test.polygon_models.not_null_sushi__ez_lending_TX_HASH.3c471bed51", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_sushi__ez_lending_TX_HASH.sql", "original_file_path": "models/sushi/sushi__ez_lending.yml", "name": "not_null_sushi__ez_lending_TX_HASH", "alias": "ez_lending_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_lending.yml/not_null_sushi__ez_lending_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126490.0347688, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.sushi.ez_lending\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_sushi.ez_lending_TX_HASH", "column_name": "TX_HASH", "file_key_name": "models.sushi__ez_lending"}, "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_lending_TX_HASH__0_xX_0_9a_fA_F_.fb7184c78a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e11c5b2eb4b75f751635d90b015301e7\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('sushi__ez_lending')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_lending"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e11c5b2eb4b75f751635d90b015301e7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_sushi", "fqn": ["polygon_models", "sushi", "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_lending_TX_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_lending_TX_HASH__0_xX_0_9a_fA_F_.fb7184c78a", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_e11c5b2eb4b75f751635d90b015301e7.sql", "original_file_path": "models/sushi/sushi__ez_lending.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_lending_TX_HASH__0_xX_0_9a_fA_F_", "alias": "ez_lending_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_lending.yml/dbt_expectations_expect_column_e11c5b2eb4b75f751635d90b015301e7.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_e11c5b2eb4b75f751635d90b015301e7"}, "created_at": 1669126490.036771, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(TX_HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from POLYGON_DEV.sushi.ez_lending\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_match_regex_sushi.ez_lending_TX_HASH", "column_name": "TX_HASH", "file_key_name": "models.sushi__ez_lending"}, "test.polygon_models.not_null_sushi__ez_lending_LENDING_POOL_ADDRESS.343619b86f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LENDING_POOL_ADDRESS", "model": "{{ get_where_subquery(ref('sushi__ez_lending')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_lending"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_sushi", "fqn": ["polygon_models", "sushi", "not_null_sushi__ez_lending_LENDING_POOL_ADDRESS"], "unique_id": "test.polygon_models.not_null_sushi__ez_lending_LENDING_POOL_ADDRESS.343619b86f", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_sushi__ez_lending_LENDING_POOL_ADDRESS.sql", "original_file_path": "models/sushi/sushi__ez_lending.yml", "name": "not_null_sushi__ez_lending_LENDING_POOL_ADDRESS", "alias": "ez_lending_LENDING_POOL_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_lending.yml/not_null_sushi__ez_lending_LENDING_POOL_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126490.041881, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.sushi.ez_lending\nwhere LENDING_POOL_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_sushi.ez_lending_LENDING_POOL_ADDRESS", "column_name": "LENDING_POOL_ADDRESS", "file_key_name": "models.sushi__ez_lending"}, "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_lending_LENDING_POOL_ADDRESS__0_xX_0_9a_fA_F_.3ccd0511f9": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b65b61826bdacc47f2ff75e01a1ff036\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "LENDING_POOL_ADDRESS", "model": "{{ get_where_subquery(ref('sushi__ez_lending')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_lending"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b65b61826bdacc47f2ff75e01a1ff036", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_sushi", "fqn": ["polygon_models", "sushi", "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_lending_LENDING_POOL_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_lending_LENDING_POOL_ADDRESS__0_xX_0_9a_fA_F_.3ccd0511f9", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_b65b61826bdacc47f2ff75e01a1ff036.sql", "original_file_path": "models/sushi/sushi__ez_lending.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_lending_LENDING_POOL_ADDRESS__0_xX_0_9a_fA_F_", "alias": "ez_lending_LENDING_POOL_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_lending.yml/dbt_expectations_expect_column_b65b61826bdacc47f2ff75e01a1ff036.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_b65b61826bdacc47f2ff75e01a1ff036"}, "created_at": 1669126490.0440478, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(LENDING_POOL_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from POLYGON_DEV.sushi.ez_lending\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_match_regex_sushi.ez_lending_LENDING_POOL_ADDRESS", "column_name": "LENDING_POOL_ADDRESS", "file_key_name": "models.sushi__ez_lending"}, "test.polygon_models.not_null_sushi__ez_lending_AMOUNT.d0ca35e1b9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AMOUNT", "model": "{{ get_where_subquery(ref('sushi__ez_lending')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_lending"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_sushi", "fqn": ["polygon_models", "sushi", "not_null_sushi__ez_lending_AMOUNT"], "unique_id": "test.polygon_models.not_null_sushi__ez_lending_AMOUNT.d0ca35e1b9", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_sushi__ez_lending_AMOUNT.sql", "original_file_path": "models/sushi/sushi__ez_lending.yml", "name": "not_null_sushi__ez_lending_AMOUNT", "alias": "ez_lending_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_lending.yml/not_null_sushi__ez_lending_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126490.05025, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.sushi.ez_lending\nwhere AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_sushi.ez_lending_AMOUNT", "column_name": "AMOUNT", "file_key_name": "models.sushi__ez_lending"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_lending_AMOUNT__NUMBER__FLOAT.f5513895b6": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_03aac7de4eb4f899a5f8f11d6242497c\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "AMOUNT", "model": "{{ get_where_subquery(ref('sushi__ez_lending')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_lending"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_03aac7de4eb4f899a5f8f11d6242497c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["polygon_models", "sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_lending_AMOUNT__NUMBER__FLOAT"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_lending_AMOUNT__NUMBER__FLOAT.f5513895b6", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_03aac7de4eb4f899a5f8f11d6242497c.sql", "original_file_path": "models/sushi/sushi__ez_lending.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_lending_AMOUNT__NUMBER__FLOAT", "alias": "ez_lending_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_lending.yml/dbt_expectations_expect_column_03aac7de4eb4f899a5f8f11d6242497c.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_03aac7de4eb4f899a5f8f11d6242497c"}, "created_at": 1669126490.052326, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ASSET' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSITOR' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LENDER_IS_A_CONTRACT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_USD' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AMOUNT'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_sushi.ez_lending_AMOUNT", "column_name": "AMOUNT", "file_key_name": "models.sushi__ez_lending"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_lending_AMOUNT_USD__NUMBER__FLOAT.010574c5b1": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_510a008af79ffad06d5095f293762884\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "AMOUNT_USD", "model": "{{ get_where_subquery(ref('sushi__ez_lending')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_lending"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_510a008af79ffad06d5095f293762884", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["polygon_models", "sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_lending_AMOUNT_USD__NUMBER__FLOAT"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_lending_AMOUNT_USD__NUMBER__FLOAT.010574c5b1", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_510a008af79ffad06d5095f293762884.sql", "original_file_path": "models/sushi/sushi__ez_lending.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_lending_AMOUNT_USD__NUMBER__FLOAT", "alias": "ez_lending_AMOUNT_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_lending.yml/dbt_expectations_expect_column_510a008af79ffad06d5095f293762884.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_510a008af79ffad06d5095f293762884"}, "created_at": 1669126490.058335, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ASSET' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSITOR' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LENDER_IS_A_CONTRACT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_USD' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AMOUNT_USD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_sushi.ez_lending_AMOUNT_USD", "column_name": "AMOUNT_USD", "file_key_name": "models.sushi__ez_lending"}, "test.polygon_models.not_null_sushi__ez_lending_ASSET.92156a57ed": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET", "model": "{{ get_where_subquery(ref('sushi__ez_lending')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_lending"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_sushi", "fqn": ["polygon_models", "sushi", "not_null_sushi__ez_lending_ASSET"], "unique_id": "test.polygon_models.not_null_sushi__ez_lending_ASSET.92156a57ed", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_sushi__ez_lending_ASSET.sql", "original_file_path": "models/sushi/sushi__ez_lending.yml", "name": "not_null_sushi__ez_lending_ASSET", "alias": "ez_lending_ASSET", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_lending.yml/not_null_sushi__ez_lending_ASSET.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126490.064227, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.sushi.ez_lending\nwhere ASSET is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_sushi.ez_lending_ASSET", "column_name": "ASSET", "file_key_name": "models.sushi__ez_lending"}, "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_lending_ASSET__0_xX_0_9a_fA_F_.8a7dd8b676": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c43f48abd58109b6ba8b578cd1600472\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ASSET", "model": "{{ get_where_subquery(ref('sushi__ez_lending')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_lending"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c43f48abd58109b6ba8b578cd1600472", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_sushi", "fqn": ["polygon_models", "sushi", "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_lending_ASSET__0_xX_0_9a_fA_F_"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_lending_ASSET__0_xX_0_9a_fA_F_.8a7dd8b676", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_c43f48abd58109b6ba8b578cd1600472.sql", "original_file_path": "models/sushi/sushi__ez_lending.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_lending_ASSET__0_xX_0_9a_fA_F_", "alias": "ez_lending_ASSET", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_lending.yml/dbt_expectations_expect_column_c43f48abd58109b6ba8b578cd1600472.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c43f48abd58109b6ba8b578cd1600472"}, "created_at": 1669126490.065802, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(ASSET, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from POLYGON_DEV.sushi.ez_lending\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_match_regex_sushi.ez_lending_ASSET", "column_name": "ASSET", "file_key_name": "models.sushi__ez_lending"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_lending_SYMBOL__STRING__VARCHAR.dcace84af9": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_aeae568c6a1f6883e0f69f8de9231af6\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "SYMBOL", "model": "{{ get_where_subquery(ref('sushi__ez_lending')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_lending"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_aeae568c6a1f6883e0f69f8de9231af6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["polygon_models", "sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_lending_SYMBOL__STRING__VARCHAR"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_lending_SYMBOL__STRING__VARCHAR.dcace84af9", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_aeae568c6a1f6883e0f69f8de9231af6.sql", "original_file_path": "models/sushi/sushi__ez_lending.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_lending_SYMBOL__STRING__VARCHAR", "alias": "ez_lending_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_lending.yml/dbt_expectations_expect_column_aeae568c6a1f6883e0f69f8de9231af6.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_aeae568c6a1f6883e0f69f8de9231af6"}, "created_at": 1669126490.071311, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ASSET' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSITOR' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LENDER_IS_A_CONTRACT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_USD' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SYMBOL'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_sushi.ez_lending_SYMBOL", "column_name": "SYMBOL", "file_key_name": "models.sushi__ez_lending"}, "test.polygon_models.not_null_sushi__ez_lending_DEPOSITOR.9f9196dce7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DEPOSITOR", "model": "{{ get_where_subquery(ref('sushi__ez_lending')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_lending"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_sushi", "fqn": ["polygon_models", "sushi", "not_null_sushi__ez_lending_DEPOSITOR"], "unique_id": "test.polygon_models.not_null_sushi__ez_lending_DEPOSITOR.9f9196dce7", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_sushi__ez_lending_DEPOSITOR.sql", "original_file_path": "models/sushi/sushi__ez_lending.yml", "name": "not_null_sushi__ez_lending_DEPOSITOR", "alias": "ez_lending_DEPOSITOR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_lending.yml/not_null_sushi__ez_lending_DEPOSITOR.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126490.077015, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.sushi.ez_lending\nwhere DEPOSITOR is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_sushi.ez_lending_DEPOSITOR", "column_name": "DEPOSITOR", "file_key_name": "models.sushi__ez_lending"}, "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_lending_DEPOSITOR__0_xX_0_9a_fA_F_.560921e0f1": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_135e2224a7c7bc0ac043933bdd82a873\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "DEPOSITOR", "model": "{{ get_where_subquery(ref('sushi__ez_lending')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_lending"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_135e2224a7c7bc0ac043933bdd82a873", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_sushi", "fqn": ["polygon_models", "sushi", "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_lending_DEPOSITOR__0_xX_0_9a_fA_F_"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_lending_DEPOSITOR__0_xX_0_9a_fA_F_.560921e0f1", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_135e2224a7c7bc0ac043933bdd82a873.sql", "original_file_path": "models/sushi/sushi__ez_lending.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_lending_DEPOSITOR__0_xX_0_9a_fA_F_", "alias": "ez_lending_DEPOSITOR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_lending.yml/dbt_expectations_expect_column_135e2224a7c7bc0ac043933bdd82a873.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_135e2224a7c7bc0ac043933bdd82a873"}, "created_at": 1669126490.07917, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(DEPOSITOR, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from POLYGON_DEV.sushi.ez_lending\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_match_regex_sushi.ez_lending_DEPOSITOR", "column_name": "DEPOSITOR", "file_key_name": "models.sushi__ez_lending"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_lending_EVENT_INDEX__NUMBER__FLOAT.64324e3895": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_11216d76832c5e38b85eae3b56bd12dd\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "EVENT_INDEX", "model": "{{ get_where_subquery(ref('sushi__ez_lending')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_lending"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_11216d76832c5e38b85eae3b56bd12dd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["polygon_models", "sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_lending_EVENT_INDEX__NUMBER__FLOAT"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_lending_EVENT_INDEX__NUMBER__FLOAT.64324e3895", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_11216d76832c5e38b85eae3b56bd12dd.sql", "original_file_path": "models/sushi/sushi__ez_lending.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_lending_EVENT_INDEX__NUMBER__FLOAT", "alias": "ez_lending_EVENT_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_lending.yml/dbt_expectations_expect_column_11216d76832c5e38b85eae3b56bd12dd.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_11216d76832c5e38b85eae3b56bd12dd"}, "created_at": 1669126490.083631, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ASSET' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DEPOSITOR' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LENDER_IS_A_CONTRACT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_USD' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'EVENT_INDEX'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_sushi.ez_lending_EVENT_INDEX", "column_name": "EVENT_INDEX", "file_key_name": "models.sushi__ez_lending"}, "test.polygon_models.not_null_sushi__ez_lending__LOG_ID.aeb399324a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_LOG_ID", "model": "{{ get_where_subquery(ref('sushi__ez_lending')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_lending"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_sushi", "fqn": ["polygon_models", "sushi", "not_null_sushi__ez_lending__LOG_ID"], "unique_id": "test.polygon_models.not_null_sushi__ez_lending__LOG_ID.aeb399324a", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_sushi__ez_lending__LOG_ID.sql", "original_file_path": "models/sushi/sushi__ez_lending.yml", "name": "not_null_sushi__ez_lending__LOG_ID", "alias": "ez_lending", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_lending.yml/not_null_sushi__ez_lending__LOG_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126490.089161, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.sushi.ez_lending\nwhere _LOG_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_sushi.ez_lending", "column_name": "_LOG_ID", "file_key_name": "models.sushi__ez_lending"}, "test.polygon_models.not_null_sushi__ez_lending_ORIGIN_FROM_ADDRESS.0a279cef72": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('sushi__ez_lending')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_lending"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_sushi", "fqn": ["polygon_models", "sushi", "not_null_sushi__ez_lending_ORIGIN_FROM_ADDRESS"], "unique_id": "test.polygon_models.not_null_sushi__ez_lending_ORIGIN_FROM_ADDRESS.0a279cef72", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_sushi__ez_lending_ORIGIN_FROM_ADDRESS.sql", "original_file_path": "models/sushi/sushi__ez_lending.yml", "name": "not_null_sushi__ez_lending_ORIGIN_FROM_ADDRESS", "alias": "ez_lending_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_lending.yml/not_null_sushi__ez_lending_ORIGIN_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126490.091041, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.sushi.ez_lending\nwhere ORIGIN_FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_sushi.ez_lending_ORIGIN_FROM_ADDRESS", "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.sushi__ez_lending"}, "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_lending_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.3b31561bc6": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_452a2c94f7e49521b48904680797fff0\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('sushi__ez_lending')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_lending"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_452a2c94f7e49521b48904680797fff0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_sushi", "fqn": ["polygon_models", "sushi", "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_lending_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_lending_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.3b31561bc6", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_452a2c94f7e49521b48904680797fff0.sql", "original_file_path": "models/sushi/sushi__ez_lending.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_lending_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "ez_lending_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_lending.yml/dbt_expectations_expect_column_452a2c94f7e49521b48904680797fff0.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_452a2c94f7e49521b48904680797fff0"}, "created_at": 1669126490.09334, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(ORIGIN_FROM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from POLYGON_DEV.sushi.ez_lending\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_match_regex_sushi.ez_lending_ORIGIN_FROM_ADDRESS", "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.sushi__ez_lending"}, "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_lending_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.3e3828617a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0fa3aaa27b1055a8e98fb8863fbc1d85\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_TO_ADDRESS", "model": "{{ get_where_subquery(ref('sushi__ez_lending')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_lending"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0fa3aaa27b1055a8e98fb8863fbc1d85", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_sushi", "fqn": ["polygon_models", "sushi", "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_lending_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_lending_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.3e3828617a", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_0fa3aaa27b1055a8e98fb8863fbc1d85.sql", "original_file_path": "models/sushi/sushi__ez_lending.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_lending_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_", "alias": "ez_lending_ORIGIN_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_lending.yml/dbt_expectations_expect_column_0fa3aaa27b1055a8e98fb8863fbc1d85.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_0fa3aaa27b1055a8e98fb8863fbc1d85"}, "created_at": 1669126490.0982342, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(ORIGIN_TO_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from POLYGON_DEV.sushi.ez_lending\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_match_regex_sushi.ez_lending_ORIGIN_TO_ADDRESS", "column_name": "ORIGIN_TO_ADDRESS", "file_key_name": "models.sushi__ez_lending"}, "test.polygon_models.not_null_sushi__ez_lending_LENDING_POOL.1cc2cec6c9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LENDING_POOL", "model": "{{ get_where_subquery(ref('sushi__ez_lending')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_lending"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_sushi", "fqn": ["polygon_models", "sushi", "not_null_sushi__ez_lending_LENDING_POOL"], "unique_id": "test.polygon_models.not_null_sushi__ez_lending_LENDING_POOL.1cc2cec6c9", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_sushi__ez_lending_LENDING_POOL.sql", "original_file_path": "models/sushi/sushi__ez_lending.yml", "name": "not_null_sushi__ez_lending_LENDING_POOL", "alias": "ez_lending_LENDING_POOL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_lending.yml/not_null_sushi__ez_lending_LENDING_POOL.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126490.103499, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.sushi.ez_lending\nwhere LENDING_POOL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_sushi.ez_lending_LENDING_POOL", "column_name": "LENDING_POOL", "file_key_name": "models.sushi__ez_lending"}, "test.polygon_models.not_null_sushi__ez_lending_LENDER_IS_A_CONTRACT.39fe049559": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LENDER_IS_A_CONTRACT", "model": "{{ get_where_subquery(ref('sushi__ez_lending')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_lending"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_sushi", "fqn": ["polygon_models", "sushi", "not_null_sushi__ez_lending_LENDER_IS_A_CONTRACT"], "unique_id": "test.polygon_models.not_null_sushi__ez_lending_LENDER_IS_A_CONTRACT.39fe049559", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_sushi__ez_lending_LENDER_IS_A_CONTRACT.sql", "original_file_path": "models/sushi/sushi__ez_lending.yml", "name": "not_null_sushi__ez_lending_LENDER_IS_A_CONTRACT", "alias": "ez_lending_LENDER_IS_A_CONTRACT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_lending.yml/not_null_sushi__ez_lending_LENDER_IS_A_CONTRACT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126490.105182, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.sushi.ez_lending\nwhere LENDER_IS_A_CONTRACT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_sushi.ez_lending_LENDER_IS_A_CONTRACT", "column_name": "LENDER_IS_A_CONTRACT", "file_key_name": "models.sushi__ez_lending"}, "test.polygon_models.dbt_utils_unique_combination_of_columns_sushi__ez_lending__LOG_ID.9fb554f90f": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_940a1adecf5276745b83253808bd1e0f\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_LOG_ID"], "model": "{{ get_where_subquery(ref('sushi__ez_lending')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_lending"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_940a1adecf5276745b83253808bd1e0f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_utils_unique_combination_of_columns_sushi", "fqn": ["polygon_models", "sushi", "dbt_utils_unique_combination_of_columns_sushi__ez_lending__LOG_ID"], "unique_id": "test.polygon_models.dbt_utils_unique_combination_of_columns_sushi__ez_lending__LOG_ID.9fb554f90f", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_utils_unique_combination_o_940a1adecf5276745b83253808bd1e0f.sql", "original_file_path": "models/sushi/sushi__ez_lending.yml", "name": "dbt_utils_unique_combination_of_columns_sushi__ez_lending__LOG_ID", "alias": "ez_lending", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_lending"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_lending.yml/dbt_utils_unique_combination_o_940a1adecf5276745b83253808bd1e0f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_940a1adecf5276745b83253808bd1e0f"}, "created_at": 1669126490.1072729, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _LOG_ID\n    from POLYGON_DEV.sushi.ez_lending\n    group by _LOG_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_utils_unique_combination_of_columns_sushi.ez_lending", "column_name": null, "file_key_name": "models.sushi__ez_lending"}, "test.polygon_models.not_null_sushi__ez_swaps_BLOCK_NUMBER.4da3b3d654": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_sushi", "fqn": ["polygon_models", "sushi", "not_null_sushi__ez_swaps_BLOCK_NUMBER"], "unique_id": "test.polygon_models.not_null_sushi__ez_swaps_BLOCK_NUMBER.4da3b3d654", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_sushi__ez_swaps_BLOCK_NUMBER.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "not_null_sushi__ez_swaps_BLOCK_NUMBER", "alias": "ez_swaps_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_swaps.yml/not_null_sushi__ez_swaps_BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126490.122484, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.sushi.ez_swaps\nwhere BLOCK_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_sushi.ez_swaps_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.sushi__ez_swaps"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_BLOCK_NUMBER__NUMBER__FLOAT.7b69aae0de": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0d1bebae3419b1f597277d114f4999ad\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0d1bebae3419b1f597277d114f4999ad", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["polygon_models", "sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_BLOCK_NUMBER__NUMBER__FLOAT"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_BLOCK_NUMBER__NUMBER__FLOAT.7b69aae0de", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_0d1bebae3419b1f597277d114f4999ad.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_BLOCK_NUMBER__NUMBER__FLOAT", "alias": "ez_swaps_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_0d1bebae3419b1f597277d114f4999ad.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_0d1bebae3419b1f597277d114f4999ad"}, "created_at": 1669126490.124505, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_NUMBER'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_sushi.ez_swaps_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.sushi__ez_swaps"}, "test.polygon_models.not_null_sushi__ez_swaps_BLOCK_TIMESTAMP.64d0de4b09": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_sushi", "fqn": ["polygon_models", "sushi", "not_null_sushi__ez_swaps_BLOCK_TIMESTAMP"], "unique_id": "test.polygon_models.not_null_sushi__ez_swaps_BLOCK_TIMESTAMP.64d0de4b09", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_sushi__ez_swaps_BLOCK_TIMESTAMP.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "not_null_sushi__ez_swaps_BLOCK_TIMESTAMP", "alias": "ez_swaps_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_swaps.yml/not_null_sushi__ez_swaps_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126490.129136, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.sushi.ez_swaps\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_sushi.ez_swaps_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.sushi__ez_swaps"}, "test.polygon_models.dbt_expectations_expect_row_values_to_have_recent_data_sushi__ez_swaps_BLOCK_TIMESTAMP__day__1.ccd4b95299": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_fba99a4d962c16acbcae70cfb735399d\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_fba99a4d962c16acbcae70cfb735399d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_sushi", "fqn": ["polygon_models", "sushi", "dbt_expectations_expect_row_values_to_have_recent_data_sushi__ez_swaps_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.polygon_models.dbt_expectations_expect_row_values_to_have_recent_data_sushi__ez_swaps_BLOCK_TIMESTAMP__day__1.ccd4b95299", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_row_va_fba99a4d962c16acbcae70cfb735399d.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_sushi__ez_swaps_BLOCK_TIMESTAMP__day__1", "alias": "ez_swaps_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_swaps.yml/dbt_expectations_expect_row_va_fba99a4d962c16acbcae70cfb735399d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_fba99a4d962c16acbcae70cfb735399d"}, "created_at": 1669126490.130683, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as TIMESTAMP)) as max_timestamp\n    from\n        POLYGON_DEV.sushi.ez_swaps\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as TIMESTAMP) <= convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as TIMESTAMP))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        )\n\n as TIMESTAMP)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_row_values_to_have_recent_data_sushi.ez_swaps_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.sushi__ez_swaps"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c09d40c178": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a13829dd693c406675a79859aaaf8ea1\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a13829dd693c406675a79859aaaf8ea1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["polygon_models", "sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c09d40c178", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_a13829dd693c406675a79859aaaf8ea1.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "ez_swaps_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_a13829dd693c406675a79859aaaf8ea1.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_a13829dd693c406675a79859aaaf8ea1"}, "created_at": 1669126490.141695, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_sushi.ez_swaps_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.sushi__ez_swaps"}, "test.polygon_models.not_null_sushi__ez_swaps_TX_HASH.5c71b07498": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_sushi", "fqn": ["polygon_models", "sushi", "not_null_sushi__ez_swaps_TX_HASH"], "unique_id": "test.polygon_models.not_null_sushi__ez_swaps_TX_HASH.5c71b07498", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_sushi__ez_swaps_TX_HASH.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "not_null_sushi__ez_swaps_TX_HASH", "alias": "ez_swaps_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_swaps.yml/not_null_sushi__ez_swaps_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126490.147445, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.sushi.ez_swaps\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_sushi.ez_swaps_TX_HASH", "column_name": "TX_HASH", "file_key_name": "models.sushi__ez_swaps"}, "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TX_HASH__0_xX_0_9a_fA_F_.15d478c09c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_20637e8aec991d2e7a6da871dabc7bbb\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_20637e8aec991d2e7a6da871dabc7bbb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_sushi", "fqn": ["polygon_models", "sushi", "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TX_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TX_HASH__0_xX_0_9a_fA_F_.15d478c09c", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_20637e8aec991d2e7a6da871dabc7bbb.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TX_HASH__0_xX_0_9a_fA_F_", "alias": "ez_swaps_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_20637e8aec991d2e7a6da871dabc7bbb.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_20637e8aec991d2e7a6da871dabc7bbb"}, "created_at": 1669126490.148973, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(TX_HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from POLYGON_DEV.sushi.ez_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_match_regex_sushi.ez_swaps_TX_HASH", "column_name": "TX_HASH", "file_key_name": "models.sushi__ez_swaps"}, "test.polygon_models.not_null_sushi__ez_swaps_CONTRACT_ADDRESS.f4cd976e06": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CONTRACT_ADDRESS", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_sushi", "fqn": ["polygon_models", "sushi", "not_null_sushi__ez_swaps_CONTRACT_ADDRESS"], "unique_id": "test.polygon_models.not_null_sushi__ez_swaps_CONTRACT_ADDRESS.f4cd976e06", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_sushi__ez_swaps_CONTRACT_ADDRESS.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "not_null_sushi__ez_swaps_CONTRACT_ADDRESS", "alias": "ez_swaps_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_swaps.yml/not_null_sushi__ez_swaps_CONTRACT_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126490.15397, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.sushi.ez_swaps\nwhere CONTRACT_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_sushi.ez_swaps_CONTRACT_ADDRESS", "column_name": "CONTRACT_ADDRESS", "file_key_name": "models.sushi__ez_swaps"}, "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.d6ed59e98b": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3124928ea29d4d2d4ca74f173edf79f4\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "CONTRACT_ADDRESS", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3124928ea29d4d2d4ca74f173edf79f4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_sushi", "fqn": ["polygon_models", "sushi", "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.d6ed59e98b", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_3124928ea29d4d2d4ca74f173edf79f4.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_", "alias": "ez_swaps_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_3124928ea29d4d2d4ca74f173edf79f4.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_3124928ea29d4d2d4ca74f173edf79f4"}, "created_at": 1669126490.156172, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(CONTRACT_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from POLYGON_DEV.sushi.ez_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_match_regex_sushi.ez_swaps_CONTRACT_ADDRESS", "column_name": "CONTRACT_ADDRESS", "file_key_name": "models.sushi__ez_swaps"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_EVENT_NAME__STRING__VARCHAR.9c08c6c888": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_57dde4bb0e94f4fa928f8d4d48f12c01\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "EVENT_NAME", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_57dde4bb0e94f4fa928f8d4d48f12c01", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["polygon_models", "sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_EVENT_NAME__STRING__VARCHAR"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_EVENT_NAME__STRING__VARCHAR.9c08c6c888", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_57dde4bb0e94f4fa928f8d4d48f12c01.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_EVENT_NAME__STRING__VARCHAR", "alias": "ez_swaps_EVENT_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_57dde4bb0e94f4fa928f8d4d48f12c01.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_57dde4bb0e94f4fa928f8d4d48f12c01"}, "created_at": 1669126490.161983, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'EVENT_NAME'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_sushi.ez_swaps_EVENT_NAME", "column_name": "EVENT_NAME", "file_key_name": "models.sushi__ez_swaps"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_IN__NUMBER__FLOAT.ce483aa368": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_07850b04dfdbeda7b8a1c2fcbf422efe\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "AMOUNT_IN", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_07850b04dfdbeda7b8a1c2fcbf422efe", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["polygon_models", "sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_IN__NUMBER__FLOAT"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_IN__NUMBER__FLOAT.ce483aa368", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_07850b04dfdbeda7b8a1c2fcbf422efe.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_IN__NUMBER__FLOAT", "alias": "ez_swaps_AMOUNT_IN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_07850b04dfdbeda7b8a1c2fcbf422efe.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_07850b04dfdbeda7b8a1c2fcbf422efe"}, "created_at": 1669126490.166703, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AMOUNT_IN'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_sushi.ez_swaps_AMOUNT_IN", "column_name": "AMOUNT_IN", "file_key_name": "models.sushi__ez_swaps"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_OUT__NUMBER__FLOAT.6028b5385f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1ea95f689a0a0d76b9936262483dcf06\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "AMOUNT_OUT", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1ea95f689a0a0d76b9936262483dcf06", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["polygon_models", "sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_OUT__NUMBER__FLOAT"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_OUT__NUMBER__FLOAT.6028b5385f", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_1ea95f689a0a0d76b9936262483dcf06.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_OUT__NUMBER__FLOAT", "alias": "ez_swaps_AMOUNT_OUT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_1ea95f689a0a0d76b9936262483dcf06.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_1ea95f689a0a0d76b9936262483dcf06"}, "created_at": 1669126490.172041, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AMOUNT_OUT'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_sushi.ez_swaps_AMOUNT_OUT", "column_name": "AMOUNT_OUT", "file_key_name": "models.sushi__ez_swaps"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_IN_USD__NUMBER__FLOAT.9a8b1e0480": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_590932661a0605b27523ee9de68a5fab\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "AMOUNT_IN_USD", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_590932661a0605b27523ee9de68a5fab", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["polygon_models", "sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_IN_USD__NUMBER__FLOAT"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_IN_USD__NUMBER__FLOAT.9a8b1e0480", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_590932661a0605b27523ee9de68a5fab.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_IN_USD__NUMBER__FLOAT", "alias": "ez_swaps_AMOUNT_IN_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_590932661a0605b27523ee9de68a5fab.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_590932661a0605b27523ee9de68a5fab"}, "created_at": 1669126490.17775, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AMOUNT_IN_USD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_sushi.ez_swaps_AMOUNT_IN_USD", "column_name": "AMOUNT_IN_USD", "file_key_name": "models.sushi__ez_swaps"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT.a061b70981": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f8b8baa2ef40f88b54230265ed701d42\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "AMOUNT_OUT_USD", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f8b8baa2ef40f88b54230265ed701d42", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["polygon_models", "sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT.a061b70981", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_f8b8baa2ef40f88b54230265ed701d42.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT", "alias": "ez_swaps_AMOUNT_OUT_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_f8b8baa2ef40f88b54230265ed701d42.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_f8b8baa2ef40f88b54230265ed701d42"}, "created_at": 1669126490.183216, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AMOUNT_OUT_USD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_sushi.ez_swaps_AMOUNT_OUT_USD", "column_name": "AMOUNT_OUT_USD", "file_key_name": "models.sushi__ez_swaps"}, "test.polygon_models.not_null_sushi__ez_swaps_TOKEN_IN.8093c41dbe": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN_IN", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_sushi", "fqn": ["polygon_models", "sushi", "not_null_sushi__ez_swaps_TOKEN_IN"], "unique_id": "test.polygon_models.not_null_sushi__ez_swaps_TOKEN_IN.8093c41dbe", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_sushi__ez_swaps_TOKEN_IN.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "not_null_sushi__ez_swaps_TOKEN_IN", "alias": "ez_swaps_TOKEN_IN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_swaps.yml/not_null_sushi__ez_swaps_TOKEN_IN.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126490.1888692, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.sushi.ez_swaps\nwhere TOKEN_IN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_sushi.ez_swaps_TOKEN_IN", "column_name": "TOKEN_IN", "file_key_name": "models.sushi__ez_swaps"}, "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TOKEN_IN__0_xX_0_9a_fA_F_.ae96a38071": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a83e8ef42a5c728c43663e412d1b8a6a\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TOKEN_IN", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a83e8ef42a5c728c43663e412d1b8a6a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_sushi", "fqn": ["polygon_models", "sushi", "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TOKEN_IN__0_xX_0_9a_fA_F_"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TOKEN_IN__0_xX_0_9a_fA_F_.ae96a38071", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_a83e8ef42a5c728c43663e412d1b8a6a.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TOKEN_IN__0_xX_0_9a_fA_F_", "alias": "ez_swaps_TOKEN_IN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_a83e8ef42a5c728c43663e412d1b8a6a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_a83e8ef42a5c728c43663e412d1b8a6a"}, "created_at": 1669126490.191206, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(TOKEN_IN, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from POLYGON_DEV.sushi.ez_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_match_regex_sushi.ez_swaps_TOKEN_IN", "column_name": "TOKEN_IN", "file_key_name": "models.sushi__ez_swaps"}, "test.polygon_models.not_null_sushi__ez_swaps_TOKEN_OUT.68f3f9aac2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN_OUT", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_sushi", "fqn": ["polygon_models", "sushi", "not_null_sushi__ez_swaps_TOKEN_OUT"], "unique_id": "test.polygon_models.not_null_sushi__ez_swaps_TOKEN_OUT.68f3f9aac2", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_sushi__ez_swaps_TOKEN_OUT.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "not_null_sushi__ez_swaps_TOKEN_OUT", "alias": "ez_swaps_TOKEN_OUT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_swaps.yml/not_null_sushi__ez_swaps_TOKEN_OUT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126490.196534, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.sushi.ez_swaps\nwhere TOKEN_OUT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_sushi.ez_swaps_TOKEN_OUT", "column_name": "TOKEN_OUT", "file_key_name": "models.sushi__ez_swaps"}, "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_.a99f33851e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_be638137de4adae51304e1be121986ed\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TOKEN_OUT", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_be638137de4adae51304e1be121986ed", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_sushi", "fqn": ["polygon_models", "sushi", "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_.a99f33851e", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_be638137de4adae51304e1be121986ed.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_", "alias": "ez_swaps_TOKEN_OUT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_be638137de4adae51304e1be121986ed.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_be638137de4adae51304e1be121986ed"}, "created_at": 1669126490.198055, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(TOKEN_OUT, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from POLYGON_DEV.sushi.ez_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_match_regex_sushi.ez_swaps_TOKEN_OUT", "column_name": "TOKEN_OUT", "file_key_name": "models.sushi__ez_swaps"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_SYMBOL_IN__STRING__VARCHAR.b1aea9c82f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_abaf45ee3ec758f86a85905c8f0b1930\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "SYMBOL_IN", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_abaf45ee3ec758f86a85905c8f0b1930", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["polygon_models", "sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_SYMBOL_IN__STRING__VARCHAR"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_SYMBOL_IN__STRING__VARCHAR.b1aea9c82f", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_abaf45ee3ec758f86a85905c8f0b1930.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_SYMBOL_IN__STRING__VARCHAR", "alias": "ez_swaps_SYMBOL_IN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_abaf45ee3ec758f86a85905c8f0b1930.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_abaf45ee3ec758f86a85905c8f0b1930"}, "created_at": 1669126490.202806, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SYMBOL_IN'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_sushi.ez_swaps_SYMBOL_IN", "column_name": "SYMBOL_IN", "file_key_name": "models.sushi__ez_swaps"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_SYMBOL_OUT__STRING__VARCHAR.9fa7d6e04c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f5fdb44514baccadc81da07bd9bec58f\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "SYMBOL_OUT", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f5fdb44514baccadc81da07bd9bec58f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["polygon_models", "sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_SYMBOL_OUT__STRING__VARCHAR"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_SYMBOL_OUT__STRING__VARCHAR.9fa7d6e04c", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_f5fdb44514baccadc81da07bd9bec58f.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_SYMBOL_OUT__STRING__VARCHAR", "alias": "ez_swaps_SYMBOL_OUT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_f5fdb44514baccadc81da07bd9bec58f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_f5fdb44514baccadc81da07bd9bec58f"}, "created_at": 1669126490.207862, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SYMBOL_OUT'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_sushi.ez_swaps_SYMBOL_OUT", "column_name": "SYMBOL_OUT", "file_key_name": "models.sushi__ez_swaps"}, "test.polygon_models.not_null_sushi__ez_swaps_SENDER.b76baa207c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP > '2021-08-01'\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SENDER", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "BLOCK_TIMESTAMP > '2021-08-01'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_sushi", "fqn": ["polygon_models", "sushi", "not_null_sushi__ez_swaps_SENDER"], "unique_id": "test.polygon_models.not_null_sushi__ez_swaps_SENDER.b76baa207c", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_sushi__ez_swaps_SENDER.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "not_null_sushi__ez_swaps_SENDER", "alias": "ez_swaps_SENDER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_swaps.yml/not_null_sushi__ez_swaps_SENDER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "BLOCK_TIMESTAMP > '2021-08-01'"}, "created_at": 1669126490.212346, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from POLYGON_DEV.sushi.ez_swaps where BLOCK_TIMESTAMP > '2021-08-01') dbt_subquery\nwhere SENDER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_sushi.ez_swaps_SENDER", "column_name": "SENDER", "file_key_name": "models.sushi__ez_swaps"}, "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_SENDER__0_xX_0_9a_fA_F_.b8de01d1db": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d8af66b62e6c6112b1c0510eac50f6d8\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "SENDER", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d8af66b62e6c6112b1c0510eac50f6d8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_sushi", "fqn": ["polygon_models", "sushi", "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_SENDER__0_xX_0_9a_fA_F_"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_SENDER__0_xX_0_9a_fA_F_.b8de01d1db", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_d8af66b62e6c6112b1c0510eac50f6d8.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_SENDER__0_xX_0_9a_fA_F_", "alias": "ez_swaps_SENDER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_d8af66b62e6c6112b1c0510eac50f6d8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_d8af66b62e6c6112b1c0510eac50f6d8"}, "created_at": 1669126490.213879, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(SENDER, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from POLYGON_DEV.sushi.ez_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_match_regex_sushi.ez_swaps_SENDER", "column_name": "SENDER", "file_key_name": "models.sushi__ez_swaps"}, "test.polygon_models.not_null_sushi__ez_swaps_TX_TO.1c512c542a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_TO", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_sushi", "fqn": ["polygon_models", "sushi", "not_null_sushi__ez_swaps_TX_TO"], "unique_id": "test.polygon_models.not_null_sushi__ez_swaps_TX_TO.1c512c542a", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_sushi__ez_swaps_TX_TO.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "not_null_sushi__ez_swaps_TX_TO", "alias": "ez_swaps_TX_TO", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_swaps.yml/not_null_sushi__ez_swaps_TX_TO.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126490.2182279, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.sushi.ez_swaps\nwhere TX_TO is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_sushi.ez_swaps_TX_TO", "column_name": "TX_TO", "file_key_name": "models.sushi__ez_swaps"}, "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TX_TO__0_xX_0_9a_fA_F_.81a6e2ad45": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9a85c3009a01a0f64bc589287812f943\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_TO", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9a85c3009a01a0f64bc589287812f943", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_sushi", "fqn": ["polygon_models", "sushi", "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TX_TO__0_xX_0_9a_fA_F_"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TX_TO__0_xX_0_9a_fA_F_.81a6e2ad45", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_9a85c3009a01a0f64bc589287812f943.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TX_TO__0_xX_0_9a_fA_F_", "alias": "ez_swaps_TX_TO", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_9a85c3009a01a0f64bc589287812f943.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_9a85c3009a01a0f64bc589287812f943"}, "created_at": 1669126490.219777, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(TX_TO, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from POLYGON_DEV.sushi.ez_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_match_regex_sushi.ez_swaps_TX_TO", "column_name": "TX_TO", "file_key_name": "models.sushi__ez_swaps"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_PLATFORM__STRING__VARCHAR.55fbd4c7c1": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_42dcd4cff101a1305320df8731943ff4\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "PLATFORM", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_42dcd4cff101a1305320df8731943ff4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["polygon_models", "sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_PLATFORM__STRING__VARCHAR"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_PLATFORM__STRING__VARCHAR.55fbd4c7c1", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_42dcd4cff101a1305320df8731943ff4.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_PLATFORM__STRING__VARCHAR", "alias": "ez_swaps_PLATFORM", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_42dcd4cff101a1305320df8731943ff4.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_42dcd4cff101a1305320df8731943ff4"}, "created_at": 1669126490.224116, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PLATFORM'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_sushi.ez_swaps_PLATFORM", "column_name": "PLATFORM", "file_key_name": "models.sushi__ez_swaps"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_EVENT_INDEX__NUMBER__FLOAT.311b76dea2": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5f25f73b18e8b3db560f292103412648\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "EVENT_INDEX", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5f25f73b18e8b3db560f292103412648", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["polygon_models", "sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_EVENT_INDEX__NUMBER__FLOAT"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_EVENT_INDEX__NUMBER__FLOAT.311b76dea2", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_5f25f73b18e8b3db560f292103412648.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_EVENT_INDEX__NUMBER__FLOAT", "alias": "ez_swaps_EVENT_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_5f25f73b18e8b3db560f292103412648.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_5f25f73b18e8b3db560f292103412648"}, "created_at": 1669126490.228402, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'EVENT_INDEX'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_sushi.ez_swaps_EVENT_INDEX", "column_name": "EVENT_INDEX", "file_key_name": "models.sushi__ez_swaps"}, "test.polygon_models.not_null_sushi__ez_swaps__LOG_ID.3bc8eb295f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_LOG_ID", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_sushi", "fqn": ["polygon_models", "sushi", "not_null_sushi__ez_swaps__LOG_ID"], "unique_id": "test.polygon_models.not_null_sushi__ez_swaps__LOG_ID.3bc8eb295f", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_sushi__ez_swaps__LOG_ID.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "not_null_sushi__ez_swaps__LOG_ID", "alias": "ez_swaps", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_swaps.yml/not_null_sushi__ez_swaps__LOG_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126490.232476, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.sushi.ez_swaps\nwhere _LOG_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_sushi.ez_swaps", "column_name": "_LOG_ID", "file_key_name": "models.sushi__ez_swaps"}, "test.polygon_models.not_null_sushi__ez_swaps_ORIGIN_FUNCTION_SIGNATURE.681d6adb74": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FUNCTION_SIGNATURE", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_sushi", "fqn": ["polygon_models", "sushi", "not_null_sushi__ez_swaps_ORIGIN_FUNCTION_SIGNATURE"], "unique_id": "test.polygon_models.not_null_sushi__ez_swaps_ORIGIN_FUNCTION_SIGNATURE.681d6adb74", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_sushi__ez_swaps_ORIGIN_FUNCTION_SIGNATURE.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "not_null_sushi__ez_swaps_ORIGIN_FUNCTION_SIGNATURE", "alias": "ez_swaps_ORIGIN_FUNCTION_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_swaps.yml/not_null_sushi__ez_swaps_ORIGIN_FUNCTION_SIGNATURE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126490.233991, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.sushi.ez_swaps\nwhere ORIGIN_FUNCTION_SIGNATURE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_sushi.ez_swaps_ORIGIN_FUNCTION_SIGNATURE", "column_name": "ORIGIN_FUNCTION_SIGNATURE", "file_key_name": "models.sushi__ez_swaps"}, "test.polygon_models.not_null_sushi__ez_swaps_ORIGIN_FROM_ADDRESS.128c7fd237": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_sushi", "fqn": ["polygon_models", "sushi", "not_null_sushi__ez_swaps_ORIGIN_FROM_ADDRESS"], "unique_id": "test.polygon_models.not_null_sushi__ez_swaps_ORIGIN_FROM_ADDRESS.128c7fd237", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_sushi__ez_swaps_ORIGIN_FROM_ADDRESS.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "not_null_sushi__ez_swaps_ORIGIN_FROM_ADDRESS", "alias": "ez_swaps_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_swaps.yml/not_null_sushi__ez_swaps_ORIGIN_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126490.235498, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.sushi.ez_swaps\nwhere ORIGIN_FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_sushi.ez_swaps_ORIGIN_FROM_ADDRESS", "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.sushi__ez_swaps"}, "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.d35c7fe495": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5b91569cc99fc548dbde14b89e4bdc4c\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5b91569cc99fc548dbde14b89e4bdc4c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_sushi", "fqn": ["polygon_models", "sushi", "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.d35c7fe495", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_5b91569cc99fc548dbde14b89e4bdc4c.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "ez_swaps_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_5b91569cc99fc548dbde14b89e4bdc4c.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_5b91569cc99fc548dbde14b89e4bdc4c"}, "created_at": 1669126490.237223, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(ORIGIN_FROM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from POLYGON_DEV.sushi.ez_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_match_regex_sushi.ez_swaps_ORIGIN_FROM_ADDRESS", "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.sushi__ez_swaps"}, "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.dd5a907c68": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d095642d0be5e3782b153a015c161725\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_TO_ADDRESS", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d095642d0be5e3782b153a015c161725", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_sushi", "fqn": ["polygon_models", "sushi", "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.dd5a907c68", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_d095642d0be5e3782b153a015c161725.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_", "alias": "ez_swaps_ORIGIN_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_d095642d0be5e3782b153a015c161725.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_d095642d0be5e3782b153a015c161725"}, "created_at": 1669126490.241258, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(ORIGIN_TO_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from POLYGON_DEV.sushi.ez_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_match_regex_sushi.ez_swaps_ORIGIN_TO_ADDRESS", "column_name": "ORIGIN_TO_ADDRESS", "file_key_name": "models.sushi__ez_swaps"}, "test.polygon_models.dbt_utils_unique_combination_of_columns_sushi__ez_swaps__LOG_ID.cebe0de5a1": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_LOG_ID"], "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_utils_unique_combination_of_columns_sushi", "fqn": ["polygon_models", "sushi", "dbt_utils_unique_combination_of_columns_sushi__ez_swaps__LOG_ID"], "unique_id": "test.polygon_models.dbt_utils_unique_combination_of_columns_sushi__ez_swaps__LOG_ID.cebe0de5a1", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_utils_unique_combination_of_columns_sushi__ez_swaps__LOG_ID.sql", "original_file_path": "models/sushi/sushi__ez_swaps.yml", "name": "dbt_utils_unique_combination_of_columns_sushi__ez_swaps__LOG_ID", "alias": "ez_swaps", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_swaps.yml/dbt_utils_unique_combination_of_columns_sushi__ez_swaps__LOG_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126490.2454, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _LOG_ID\n    from POLYGON_DEV.sushi.ez_swaps\n    group by _LOG_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_utils_unique_combination_of_columns_sushi.ez_swaps", "column_name": null, "file_key_name": "models.sushi__ez_swaps"}, "test.polygon_models.not_null_sushi__ez_borrowing_BLOCK_NUMBER.76a0fc6bc9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('sushi__ez_borrowing')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_borrowing"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_sushi", "fqn": ["polygon_models", "sushi", "not_null_sushi__ez_borrowing_BLOCK_NUMBER"], "unique_id": "test.polygon_models.not_null_sushi__ez_borrowing_BLOCK_NUMBER.76a0fc6bc9", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_sushi__ez_borrowing_BLOCK_NUMBER.sql", "original_file_path": "models/sushi/sushi__ez_borrowing.yml", "name": "not_null_sushi__ez_borrowing_BLOCK_NUMBER", "alias": "ez_borrowing_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_borrowing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_borrowing.yml/not_null_sushi__ez_borrowing_BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126490.2548852, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.sushi.ez_borrowing\nwhere BLOCK_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_sushi.ez_borrowing_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.sushi__ez_borrowing"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_borrowing_BLOCK_NUMBER__NUMBER__FLOAT.e546629920": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4be06188cd9c5ab164549cacf7312452\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('sushi__ez_borrowing')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_borrowing"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4be06188cd9c5ab164549cacf7312452", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["polygon_models", "sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_borrowing_BLOCK_NUMBER__NUMBER__FLOAT"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_borrowing_BLOCK_NUMBER__NUMBER__FLOAT.e546629920", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_4be06188cd9c5ab164549cacf7312452.sql", "original_file_path": "models/sushi/sushi__ez_borrowing.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_borrowing_BLOCK_NUMBER__NUMBER__FLOAT", "alias": "ez_borrowing_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_borrowing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_borrowing.yml/dbt_expectations_expect_column_4be06188cd9c5ab164549cacf7312452.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_4be06188cd9c5ab164549cacf7312452"}, "created_at": 1669126490.256473, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BORROWER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BORROWER_IS_A_CONTRACT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ASSET' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_USD' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_NUMBER'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_sushi.ez_borrowing_BLOCK_NUMBER", "column_name": "BLOCK_NUMBER", "file_key_name": "models.sushi__ez_borrowing"}, "test.polygon_models.not_null_sushi__ez_borrowing_BLOCK_TIMESTAMP.3829c4c2c4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('sushi__ez_borrowing')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_borrowing"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_sushi", "fqn": ["polygon_models", "sushi", "not_null_sushi__ez_borrowing_BLOCK_TIMESTAMP"], "unique_id": "test.polygon_models.not_null_sushi__ez_borrowing_BLOCK_TIMESTAMP.3829c4c2c4", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_sushi__ez_borrowing_BLOCK_TIMESTAMP.sql", "original_file_path": "models/sushi/sushi__ez_borrowing.yml", "name": "not_null_sushi__ez_borrowing_BLOCK_TIMESTAMP", "alias": "ez_borrowing_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_borrowing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_borrowing.yml/not_null_sushi__ez_borrowing_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126490.2614882, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.sushi.ez_borrowing\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_sushi.ez_borrowing_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.sushi__ez_borrowing"}, "test.polygon_models.dbt_expectations_expect_row_values_to_have_recent_data_sushi__ez_borrowing_BLOCK_TIMESTAMP__day__7.9e13292154": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_a3f76f71fd467290969bb2ffa102d152\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 7, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('sushi__ez_borrowing')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_borrowing"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_a3f76f71fd467290969bb2ffa102d152", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_sushi", "fqn": ["polygon_models", "sushi", "dbt_expectations_expect_row_values_to_have_recent_data_sushi__ez_borrowing_BLOCK_TIMESTAMP__day__7"], "unique_id": "test.polygon_models.dbt_expectations_expect_row_values_to_have_recent_data_sushi__ez_borrowing_BLOCK_TIMESTAMP__day__7.9e13292154", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_row_va_a3f76f71fd467290969bb2ffa102d152.sql", "original_file_path": "models/sushi/sushi__ez_borrowing.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_sushi__ez_borrowing_BLOCK_TIMESTAMP__day__7", "alias": "ez_borrowing_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_borrowing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_borrowing.yml/dbt_expectations_expect_row_va_a3f76f71fd467290969bb2ffa102d152.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_a3f76f71fd467290969bb2ffa102d152"}, "created_at": 1669126490.263008, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as TIMESTAMP)) as max_timestamp\n    from\n        POLYGON_DEV.sushi.ez_borrowing\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as TIMESTAMP) <= convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as TIMESTAMP))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -7,\n        convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        )\n\n as TIMESTAMP)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_row_values_to_have_recent_data_sushi.ez_borrowing_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.sushi__ez_borrowing"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_borrowing_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2b4d3c83c9": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d709858965e8ec505fd1636323d12494\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('sushi__ez_borrowing')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_borrowing"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d709858965e8ec505fd1636323d12494", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["polygon_models", "sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_borrowing_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_borrowing_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2b4d3c83c9", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_d709858965e8ec505fd1636323d12494.sql", "original_file_path": "models/sushi/sushi__ez_borrowing.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_borrowing_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "ez_borrowing_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_borrowing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_borrowing.yml/dbt_expectations_expect_column_d709858965e8ec505fd1636323d12494.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_d709858965e8ec505fd1636323d12494"}, "created_at": 1669126490.274427, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BORROWER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BORROWER_IS_A_CONTRACT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ASSET' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_USD' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_sushi.ez_borrowing_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.sushi__ez_borrowing"}, "test.polygon_models.not_null_sushi__ez_borrowing_TX_HASH.eeaf313cd8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('sushi__ez_borrowing')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_borrowing"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_sushi", "fqn": ["polygon_models", "sushi", "not_null_sushi__ez_borrowing_TX_HASH"], "unique_id": "test.polygon_models.not_null_sushi__ez_borrowing_TX_HASH.eeaf313cd8", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_sushi__ez_borrowing_TX_HASH.sql", "original_file_path": "models/sushi/sushi__ez_borrowing.yml", "name": "not_null_sushi__ez_borrowing_TX_HASH", "alias": "ez_borrowing_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_borrowing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_borrowing.yml/not_null_sushi__ez_borrowing_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126490.279687, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.sushi.ez_borrowing\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_sushi.ez_borrowing_TX_HASH", "column_name": "TX_HASH", "file_key_name": "models.sushi__ez_borrowing"}, "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_borrowing_TX_HASH__0_xX_0_9a_fA_F_.e3f190eb04": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_034b7e4f2c1fe2b981df9e42574d41bd\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('sushi__ez_borrowing')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_borrowing"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_034b7e4f2c1fe2b981df9e42574d41bd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_sushi", "fqn": ["polygon_models", "sushi", "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_borrowing_TX_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_borrowing_TX_HASH__0_xX_0_9a_fA_F_.e3f190eb04", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_034b7e4f2c1fe2b981df9e42574d41bd.sql", "original_file_path": "models/sushi/sushi__ez_borrowing.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_borrowing_TX_HASH__0_xX_0_9a_fA_F_", "alias": "ez_borrowing_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_borrowing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_borrowing.yml/dbt_expectations_expect_column_034b7e4f2c1fe2b981df9e42574d41bd.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_034b7e4f2c1fe2b981df9e42574d41bd"}, "created_at": 1669126490.281237, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(TX_HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from POLYGON_DEV.sushi.ez_borrowing\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_match_regex_sushi.ez_borrowing_TX_HASH", "column_name": "TX_HASH", "file_key_name": "models.sushi__ez_borrowing"}, "test.polygon_models.not_null_sushi__ez_borrowing_LENDING_POOL_ADDRESS.6ea7d50567": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LENDING_POOL_ADDRESS", "model": "{{ get_where_subquery(ref('sushi__ez_borrowing')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_borrowing"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_sushi", "fqn": ["polygon_models", "sushi", "not_null_sushi__ez_borrowing_LENDING_POOL_ADDRESS"], "unique_id": "test.polygon_models.not_null_sushi__ez_borrowing_LENDING_POOL_ADDRESS.6ea7d50567", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_sushi__ez_borrowing_LENDING_POOL_ADDRESS.sql", "original_file_path": "models/sushi/sushi__ez_borrowing.yml", "name": "not_null_sushi__ez_borrowing_LENDING_POOL_ADDRESS", "alias": "ez_borrowing_LENDING_POOL_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_borrowing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_borrowing.yml/not_null_sushi__ez_borrowing_LENDING_POOL_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126490.2855701, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.sushi.ez_borrowing\nwhere LENDING_POOL_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_sushi.ez_borrowing_LENDING_POOL_ADDRESS", "column_name": "LENDING_POOL_ADDRESS", "file_key_name": "models.sushi__ez_borrowing"}, "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_borrowing_LENDING_POOL_ADDRESS__0_xX_0_9a_fA_F_.11e77397a2": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_52893bd6bb7663e336f23dbd06181b19\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "LENDING_POOL_ADDRESS", "model": "{{ get_where_subquery(ref('sushi__ez_borrowing')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_borrowing"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_52893bd6bb7663e336f23dbd06181b19", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_sushi", "fqn": ["polygon_models", "sushi", "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_borrowing_LENDING_POOL_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_borrowing_LENDING_POOL_ADDRESS__0_xX_0_9a_fA_F_.11e77397a2", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_52893bd6bb7663e336f23dbd06181b19.sql", "original_file_path": "models/sushi/sushi__ez_borrowing.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_borrowing_LENDING_POOL_ADDRESS__0_xX_0_9a_fA_F_", "alias": "ez_borrowing_LENDING_POOL_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_borrowing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_borrowing.yml/dbt_expectations_expect_column_52893bd6bb7663e336f23dbd06181b19.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_52893bd6bb7663e336f23dbd06181b19"}, "created_at": 1669126490.287613, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(LENDING_POOL_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from POLYGON_DEV.sushi.ez_borrowing\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_match_regex_sushi.ez_borrowing_LENDING_POOL_ADDRESS", "column_name": "LENDING_POOL_ADDRESS", "file_key_name": "models.sushi__ez_borrowing"}, "test.polygon_models.not_null_sushi__ez_borrowing_AMOUNT.490bdfdbcb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AMOUNT", "model": "{{ get_where_subquery(ref('sushi__ez_borrowing')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_borrowing"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_sushi", "fqn": ["polygon_models", "sushi", "not_null_sushi__ez_borrowing_AMOUNT"], "unique_id": "test.polygon_models.not_null_sushi__ez_borrowing_AMOUNT.490bdfdbcb", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_sushi__ez_borrowing_AMOUNT.sql", "original_file_path": "models/sushi/sushi__ez_borrowing.yml", "name": "not_null_sushi__ez_borrowing_AMOUNT", "alias": "ez_borrowing_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_borrowing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_borrowing.yml/not_null_sushi__ez_borrowing_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126490.293739, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.sushi.ez_borrowing\nwhere AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_sushi.ez_borrowing_AMOUNT", "column_name": "AMOUNT", "file_key_name": "models.sushi__ez_borrowing"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_borrowing_AMOUNT__NUMBER__FLOAT.28b1f9641c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d76f24e3072b9382adb68e66c6b2a8c7\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "AMOUNT", "model": "{{ get_where_subquery(ref('sushi__ez_borrowing')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_borrowing"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d76f24e3072b9382adb68e66c6b2a8c7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["polygon_models", "sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_borrowing_AMOUNT__NUMBER__FLOAT"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_borrowing_AMOUNT__NUMBER__FLOAT.28b1f9641c", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_d76f24e3072b9382adb68e66c6b2a8c7.sql", "original_file_path": "models/sushi/sushi__ez_borrowing.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_borrowing_AMOUNT__NUMBER__FLOAT", "alias": "ez_borrowing_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_borrowing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_borrowing.yml/dbt_expectations_expect_column_d76f24e3072b9382adb68e66c6b2a8c7.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_d76f24e3072b9382adb68e66c6b2a8c7"}, "created_at": 1669126490.295572, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BORROWER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BORROWER_IS_A_CONTRACT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ASSET' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_USD' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AMOUNT'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_sushi.ez_borrowing_AMOUNT", "column_name": "AMOUNT", "file_key_name": "models.sushi__ez_borrowing"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_borrowing_AMOUNT_USD__NUMBER__FLOAT.5a6575a29d": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a02d566bafc14ba37d432b003ff680e4\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "AMOUNT_USD", "model": "{{ get_where_subquery(ref('sushi__ez_borrowing')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_borrowing"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a02d566bafc14ba37d432b003ff680e4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["polygon_models", "sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_borrowing_AMOUNT_USD__NUMBER__FLOAT"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_borrowing_AMOUNT_USD__NUMBER__FLOAT.5a6575a29d", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_a02d566bafc14ba37d432b003ff680e4.sql", "original_file_path": "models/sushi/sushi__ez_borrowing.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_borrowing_AMOUNT_USD__NUMBER__FLOAT", "alias": "ez_borrowing_AMOUNT_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_borrowing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_borrowing.yml/dbt_expectations_expect_column_a02d566bafc14ba37d432b003ff680e4.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_a02d566bafc14ba37d432b003ff680e4"}, "created_at": 1669126490.300014, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BORROWER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BORROWER_IS_A_CONTRACT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ASSET' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_USD' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AMOUNT_USD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_sushi.ez_borrowing_AMOUNT_USD", "column_name": "AMOUNT_USD", "file_key_name": "models.sushi__ez_borrowing"}, "test.polygon_models.not_null_sushi__ez_borrowing_ASSET.963aa5a1aa": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ASSET", "model": "{{ get_where_subquery(ref('sushi__ez_borrowing')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_borrowing"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_sushi", "fqn": ["polygon_models", "sushi", "not_null_sushi__ez_borrowing_ASSET"], "unique_id": "test.polygon_models.not_null_sushi__ez_borrowing_ASSET.963aa5a1aa", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_sushi__ez_borrowing_ASSET.sql", "original_file_path": "models/sushi/sushi__ez_borrowing.yml", "name": "not_null_sushi__ez_borrowing_ASSET", "alias": "ez_borrowing_ASSET", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_borrowing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_borrowing.yml/not_null_sushi__ez_borrowing_ASSET.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126490.3053272, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.sushi.ez_borrowing\nwhere ASSET is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_sushi.ez_borrowing_ASSET", "column_name": "ASSET", "file_key_name": "models.sushi__ez_borrowing"}, "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_borrowing_ASSET__0_xX_0_9a_fA_F_.73483a63df": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7fb997e73fc3d96463e8e8c74159fef6\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ASSET", "model": "{{ get_where_subquery(ref('sushi__ez_borrowing')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_borrowing"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7fb997e73fc3d96463e8e8c74159fef6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_sushi", "fqn": ["polygon_models", "sushi", "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_borrowing_ASSET__0_xX_0_9a_fA_F_"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_borrowing_ASSET__0_xX_0_9a_fA_F_.73483a63df", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_7fb997e73fc3d96463e8e8c74159fef6.sql", "original_file_path": "models/sushi/sushi__ez_borrowing.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_borrowing_ASSET__0_xX_0_9a_fA_F_", "alias": "ez_borrowing_ASSET", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_borrowing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_borrowing.yml/dbt_expectations_expect_column_7fb997e73fc3d96463e8e8c74159fef6.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_7fb997e73fc3d96463e8e8c74159fef6"}, "created_at": 1669126490.3074172, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(ASSET, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from POLYGON_DEV.sushi.ez_borrowing\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_match_regex_sushi.ez_borrowing_ASSET", "column_name": "ASSET", "file_key_name": "models.sushi__ez_borrowing"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_borrowing_SYMBOL__STRING__VARCHAR.9b060d1d35": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_103a7bc9754ec10a2265bc64e5910c44\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "SYMBOL", "model": "{{ get_where_subquery(ref('sushi__ez_borrowing')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_borrowing"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_103a7bc9754ec10a2265bc64e5910c44", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["polygon_models", "sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_borrowing_SYMBOL__STRING__VARCHAR"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_borrowing_SYMBOL__STRING__VARCHAR.9b060d1d35", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_103a7bc9754ec10a2265bc64e5910c44.sql", "original_file_path": "models/sushi/sushi__ez_borrowing.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_borrowing_SYMBOL__STRING__VARCHAR", "alias": "ez_borrowing_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_borrowing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_borrowing.yml/dbt_expectations_expect_column_103a7bc9754ec10a2265bc64e5910c44.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_103a7bc9754ec10a2265bc64e5910c44"}, "created_at": 1669126490.3125, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ACTION' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BORROWER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BORROWER_IS_A_CONTRACT' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LENDING_POOL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ASSET' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_USD' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SYMBOL'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_sushi.ez_borrowing_SYMBOL", "column_name": "SYMBOL", "file_key_name": "models.sushi__ez_borrowing"}, "test.polygon_models.not_null_sushi__ez_borrowing_Borrower.1f484a738a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "Borrower", "model": "{{ get_where_subquery(ref('sushi__ez_borrowing')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_borrowing"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_sushi", "fqn": ["polygon_models", "sushi", "not_null_sushi__ez_borrowing_Borrower"], "unique_id": "test.polygon_models.not_null_sushi__ez_borrowing_Borrower.1f484a738a", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_sushi__ez_borrowing_Borrower.sql", "original_file_path": "models/sushi/sushi__ez_borrowing.yml", "name": "not_null_sushi__ez_borrowing_Borrower", "alias": "ez_borrowing_Borrower", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_borrowing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_borrowing.yml/not_null_sushi__ez_borrowing_Borrower.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126490.3169549, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.sushi.ez_borrowing\nwhere Borrower is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_sushi.ez_borrowing_Borrower", "column_name": "Borrower", "file_key_name": "models.sushi__ez_borrowing"}, "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_borrowing_Borrower__0_xX_0_9a_fA_F_.cf22d8c187": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e60cbfc0a404482372bfe130771f28f8\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "Borrower", "model": "{{ get_where_subquery(ref('sushi__ez_borrowing')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_borrowing"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e60cbfc0a404482372bfe130771f28f8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_sushi", "fqn": ["polygon_models", "sushi", "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_borrowing_Borrower__0_xX_0_9a_fA_F_"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_borrowing_Borrower__0_xX_0_9a_fA_F_.cf22d8c187", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_e60cbfc0a404482372bfe130771f28f8.sql", "original_file_path": "models/sushi/sushi__ez_borrowing.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_borrowing_Borrower__0_xX_0_9a_fA_F_", "alias": "ez_borrowing_Borrower", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_borrowing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_borrowing.yml/dbt_expectations_expect_column_e60cbfc0a404482372bfe130771f28f8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_e60cbfc0a404482372bfe130771f28f8"}, "created_at": 1669126490.318998, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(Borrower, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from POLYGON_DEV.sushi.ez_borrowing\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_match_regex_sushi.ez_borrowing_Borrower", "column_name": "Borrower", "file_key_name": "models.sushi__ez_borrowing"}, "test.polygon_models.not_null_sushi__ez_borrowing__LOG_ID.2c8a148cfa": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_LOG_ID", "model": "{{ get_where_subquery(ref('sushi__ez_borrowing')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_borrowing"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_sushi", "fqn": ["polygon_models", "sushi", "not_null_sushi__ez_borrowing__LOG_ID"], "unique_id": "test.polygon_models.not_null_sushi__ez_borrowing__LOG_ID.2c8a148cfa", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_sushi__ez_borrowing__LOG_ID.sql", "original_file_path": "models/sushi/sushi__ez_borrowing.yml", "name": "not_null_sushi__ez_borrowing__LOG_ID", "alias": "ez_borrowing", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_borrowing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_borrowing.yml/not_null_sushi__ez_borrowing__LOG_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126490.325042, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.sushi.ez_borrowing\nwhere _LOG_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_sushi.ez_borrowing", "column_name": "_LOG_ID", "file_key_name": "models.sushi__ez_borrowing"}, "test.polygon_models.not_null_sushi__ez_borrowing_ORIGIN_FROM_ADDRESS.f47465af36": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('sushi__ez_borrowing')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_borrowing"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_sushi", "fqn": ["polygon_models", "sushi", "not_null_sushi__ez_borrowing_ORIGIN_FROM_ADDRESS"], "unique_id": "test.polygon_models.not_null_sushi__ez_borrowing_ORIGIN_FROM_ADDRESS.f47465af36", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_sushi__ez_borrowing_ORIGIN_FROM_ADDRESS.sql", "original_file_path": "models/sushi/sushi__ez_borrowing.yml", "name": "not_null_sushi__ez_borrowing_ORIGIN_FROM_ADDRESS", "alias": "ez_borrowing_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_borrowing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_borrowing.yml/not_null_sushi__ez_borrowing_ORIGIN_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126490.3266659, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.sushi.ez_borrowing\nwhere ORIGIN_FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_sushi.ez_borrowing_ORIGIN_FROM_ADDRESS", "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.sushi__ez_borrowing"}, "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_borrowing_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.c43ca75daa": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_66e19b39c3859acb2bdcbf77a0b15260\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('sushi__ez_borrowing')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_borrowing"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_66e19b39c3859acb2bdcbf77a0b15260", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_sushi", "fqn": ["polygon_models", "sushi", "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_borrowing_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_borrowing_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.c43ca75daa", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_66e19b39c3859acb2bdcbf77a0b15260.sql", "original_file_path": "models/sushi/sushi__ez_borrowing.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_borrowing_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "ez_borrowing_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_borrowing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_borrowing.yml/dbt_expectations_expect_column_66e19b39c3859acb2bdcbf77a0b15260.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_66e19b39c3859acb2bdcbf77a0b15260"}, "created_at": 1669126490.328573, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(ORIGIN_FROM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from POLYGON_DEV.sushi.ez_borrowing\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_match_regex_sushi.ez_borrowing_ORIGIN_FROM_ADDRESS", "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.sushi__ez_borrowing"}, "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_borrowing_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.35e38583ac": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_247daa97e7db9edcd76e716391927e42\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_TO_ADDRESS", "model": "{{ get_where_subquery(ref('sushi__ez_borrowing')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_borrowing"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_247daa97e7db9edcd76e716391927e42", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_sushi", "fqn": ["polygon_models", "sushi", "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_borrowing_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_borrowing_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.35e38583ac", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_247daa97e7db9edcd76e716391927e42.sql", "original_file_path": "models/sushi/sushi__ez_borrowing.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_borrowing_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_", "alias": "ez_borrowing_ORIGIN_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_borrowing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_borrowing.yml/dbt_expectations_expect_column_247daa97e7db9edcd76e716391927e42.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_247daa97e7db9edcd76e716391927e42"}, "created_at": 1669126490.355403, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    regexp_instr(ORIGIN_TO_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from POLYGON_DEV.sushi.ez_borrowing\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_match_regex_sushi.ez_borrowing_ORIGIN_TO_ADDRESS", "column_name": "ORIGIN_TO_ADDRESS", "file_key_name": "models.sushi__ez_borrowing"}, "test.polygon_models.not_null_sushi__ez_borrowing_LENDING_POOL.7144d8c199": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LENDING_POOL", "model": "{{ get_where_subquery(ref('sushi__ez_borrowing')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_borrowing"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_sushi", "fqn": ["polygon_models", "sushi", "not_null_sushi__ez_borrowing_LENDING_POOL"], "unique_id": "test.polygon_models.not_null_sushi__ez_borrowing_LENDING_POOL.7144d8c199", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_sushi__ez_borrowing_LENDING_POOL.sql", "original_file_path": "models/sushi/sushi__ez_borrowing.yml", "name": "not_null_sushi__ez_borrowing_LENDING_POOL", "alias": "ez_borrowing_LENDING_POOL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_borrowing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_borrowing.yml/not_null_sushi__ez_borrowing_LENDING_POOL.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126490.3621728, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.sushi.ez_borrowing\nwhere LENDING_POOL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_sushi.ez_borrowing_LENDING_POOL", "column_name": "LENDING_POOL", "file_key_name": "models.sushi__ez_borrowing"}, "test.polygon_models.not_null_sushi__ez_borrowing_BORROWER_IS_A_CONTRACT.386fbbb5c7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BORROWER_IS_A_CONTRACT", "model": "{{ get_where_subquery(ref('sushi__ez_borrowing')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_borrowing"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_sushi", "fqn": ["polygon_models", "sushi", "not_null_sushi__ez_borrowing_BORROWER_IS_A_CONTRACT"], "unique_id": "test.polygon_models.not_null_sushi__ez_borrowing_BORROWER_IS_A_CONTRACT.386fbbb5c7", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_sushi__ez_borrowing_BORROWER_IS_A_CONTRACT.sql", "original_file_path": "models/sushi/sushi__ez_borrowing.yml", "name": "not_null_sushi__ez_borrowing_BORROWER_IS_A_CONTRACT", "alias": "ez_borrowing_BORROWER_IS_A_CONTRACT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_borrowing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_borrowing.yml/not_null_sushi__ez_borrowing_BORROWER_IS_A_CONTRACT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669126490.364019, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.sushi.ez_borrowing\nwhere BORROWER_IS_A_CONTRACT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_sushi.ez_borrowing_BORROWER_IS_A_CONTRACT", "column_name": "BORROWER_IS_A_CONTRACT", "file_key_name": "models.sushi__ez_borrowing"}, "test.polygon_models.dbt_utils_unique_combination_of_columns_sushi__ez_borrowing__LOG_ID.c1053ad43e": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_723013d75aab655719bb40e3070eb2cf\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_LOG_ID"], "model": "{{ get_where_subquery(ref('sushi__ez_borrowing')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.sushi__ez_borrowing"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_723013d75aab655719bb40e3070eb2cf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_utils_unique_combination_of_columns_sushi", "fqn": ["polygon_models", "sushi", "dbt_utils_unique_combination_of_columns_sushi__ez_borrowing__LOG_ID"], "unique_id": "test.polygon_models.dbt_utils_unique_combination_of_columns_sushi__ez_borrowing__LOG_ID.c1053ad43e", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_utils_unique_combination_o_723013d75aab655719bb40e3070eb2cf.sql", "original_file_path": "models/sushi/sushi__ez_borrowing.yml", "name": "dbt_utils_unique_combination_of_columns_sushi__ez_borrowing__LOG_ID", "alias": "ez_borrowing", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_borrowing"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/sushi/sushi__ez_borrowing.yml/dbt_utils_unique_combination_o_723013d75aab655719bb40e3070eb2cf.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_723013d75aab655719bb40e3070eb2cf"}, "created_at": 1669126490.3663218, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _LOG_ID\n    from POLYGON_DEV.sushi.ez_borrowing\n    group by _LOG_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_utils_unique_combination_of_columns_sushi.ez_borrowing", "column_name": null, "file_key_name": "models.sushi__ez_borrowing"}, "model.polygon_models.streamline__transactions_realtime": {"raw_sql": "{{ config (\n    materialized = \"view\",\n    post_hook = if_data_call_function(\n        func = \"{{this.schema}}.udf_get_transactions(object_construct('sql_source', '{{this.identifier}}'))\",\n        target = \"{{this.schema}}.{{this.identifier}}\"\n    )\n) }}\n\nWITH last_3_days AS (\n\n    SELECT\n        block_number\n    FROM\n        {{ ref(\"_max_block_by_date\") }}\n        qualify ROW_NUMBER() over (\n            ORDER BY\n                block_number DESC\n        ) = 3\n)\nSELECT\n    {{ dbt_utils.surrogate_key(\n        ['block_number']\n    ) }} AS id,\n    block_number\nFROM\n    {{ ref(\"streamline__blocks\") }}\nWHERE\n    (\n        block_number >= (\n            SELECT\n                block_number\n            FROM\n                last_3_days\n        ) {# TODO: OR can be removed once historical load is complete #}\n        OR block_number > 35000000\n    )\n    AND block_number IS NOT NULL\nEXCEPT\nSELECT\n    id,\n    block_number\nFROM\n    {{ ref(\"streamline__complete_transactions\") }}\nWHERE\n    block_number >= (\n        SELECT\n            block_number\n        FROM\n            last_3_days\n    ) {# TODO: OR can be removed once historical load is complete #}\n    OR block_number > 35000000", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.polygon_models.if_data_call_function", "macro.dbt_utils.surrogate_key"], "nodes": ["model.polygon_models._max_block_by_date", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [{"sql": "\n    \n        \n    SELECT\n        NULL\n    \n", "transaction": true, "index": null}], "pre-hook": []}, "database": "POLYGON_DEV", "schema": "streamline", "fqn": ["polygon_models", "silver", "streamline", "streamline__transactions_realtime"], "unique_id": "model.polygon_models.streamline__transactions_realtime", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "silver/streamline/streamline__transactions_realtime.sql", "original_file_path": "models/silver/streamline/streamline__transactions_realtime.sql", "name": "streamline__transactions_realtime", "alias": "transactions_realtime", "checksum": {"name": "sha256", "checksum": "9a0a0d96d4a2f1e09856c73dc7b1a17052ab3b8ee9ab11ba363c5d57f1544bb2"}, "tags": [], "refs": [["_max_block_by_date"], ["streamline__blocks"], ["streamline__complete_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/streamline/streamline__transactions_realtime.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "post-hook": ["\n    \n        \n    SELECT\n        NULL\n    \n"]}, "created_at": 1669664396.4689112, "compiled_sql": "\n\nWITH  __dbt__cte___max_block_by_date as (\n\n\nWITH base AS (\n\n    SELECT\n        block_timestamp :: DATE AS block_date,\n        MAX(block_number) block_number\n    FROM\n        POLYGON_DEV.silver.blocks\n    GROUP BY\n        block_timestamp :: DATE\n)\nSELECT\n    block_date,\n    block_number\nFROM\n    base\nWHERE\n    block_date <> (\n        SELECT\n            MAX(block_date)\n        FROM\n            base\n    )\n),last_3_days AS (\n\n    SELECT\n        block_number\n    FROM\n        __dbt__cte___max_block_by_date\n        qualify ROW_NUMBER() over (\n            ORDER BY\n                block_number DESC\n        ) = 3\n)\nSELECT\n    md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n    block_number\nFROM\n    POLYGON_DEV.streamline.blocks\nWHERE\n    (\n        block_number >= (\n            SELECT\n                block_number\n            FROM\n                last_3_days\n        ) \n        OR block_number > 35000000\n    )\n    AND block_number IS NOT NULL\nEXCEPT\nSELECT\n    id,\n    block_number\nFROM\n    POLYGON_DEV.streamline.complete_transactions\nWHERE\n    block_number >= (\n        SELECT\n            block_number\n        FROM\n            last_3_days\n    ) \n    OR block_number > 35000000", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.polygon_models._max_block_by_date", "sql": " __dbt__cte___max_block_by_date as (\n\n\nWITH base AS (\n\n    SELECT\n        block_timestamp :: DATE AS block_date,\n        MAX(block_number) block_number\n    FROM\n        POLYGON_DEV.silver.blocks\n    GROUP BY\n        block_timestamp :: DATE\n)\nSELECT\n    block_date,\n    block_number\nFROM\n    base\nWHERE\n    block_date <> (\n        SELECT\n            MAX(block_date)\n        FROM\n            base\n    )\n)"}], "relation_name": "POLYGON_DEV.streamline.transactions_realtime"}, "model.polygon_models.streamline__complete_transactions": {"raw_sql": "{{ config (\n    materialized = \"incremental\",\n    unique_key = \"id\",\n    cluster_by = \"ROUND(block_number, -3)\",\n    merge_update_columns = [\"id\"]\n) }}\n\nWITH meta AS (\n\n    SELECT\n        last_modified,\n        file_name\n    FROM\n        TABLE(\n            information_schema.external_table_files(\n                table_name => '{{ source( \"bronze_streamline\", \"transactions\") }}'\n            )\n        ) A\n)\n\n{% if is_incremental() %},\nmax_date AS (\n    SELECT\n        COALESCE(MAX(_INSERTED_TIMESTAMP), '1970-01-01' :: DATE) max_INSERTED_TIMESTAMP\n    FROM\n        {{ this }})\n    {% endif %}\n    SELECT\n        {{ dbt_utils.surrogate_key(\n            ['block_number']\n        ) }} AS id,\n        block_number,\n        last_modified AS _inserted_timestamp\n    FROM\n        {{ source(\n            \"bronze_streamline\",\n            \"transactions\"\n        ) }}\n        JOIN meta b\n        ON b.file_name = metadata$filename\n\n{% if is_incremental() %}\nWHERE\n    b.last_modified > (\n        SELECT\n            max_INSERTED_TIMESTAMP\n        FROM\n            max_date\n    )\n{% endif %}\n\nqualify(ROW_NUMBER() over (PARTITION BY id\nORDER BY\n    _inserted_timestamp DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["source.polygon_models.bronze_streamline.transactions", "source.polygon_models.bronze_streamline.transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "grants": {}, "cluster_by": "ROUND(block_number, -3)", "merge_update_columns": ["id"], "post-hook": [], "pre-hook": []}, "database": "POLYGON_DEV", "schema": "streamline", "fqn": ["polygon_models", "silver", "streamline", "streamline__complete_transactions"], "unique_id": "model.polygon_models.streamline__complete_transactions", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "silver/streamline/streamline__complete_transactions.sql", "original_file_path": "models/silver/streamline/streamline__complete_transactions.sql", "name": "streamline__complete_transactions", "alias": "complete_transactions", "checksum": {"name": "sha256", "checksum": "90d6c4c2754b1ee981156c4a61bed888784a277818190d55a491c13f387a0d3f"}, "tags": [], "refs": [], "sources": [["bronze_streamline", "transactions"], ["bronze_streamline", "transactions"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/streamline/streamline__complete_transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "id", "cluster_by": "ROUND(block_number, -3)", "merge_update_columns": ["id"]}, "created_at": 1669664396.501672, "compiled_sql": "\n\nWITH meta AS (\n\n    SELECT\n        last_modified,\n        file_name\n    FROM\n        TABLE(\n            information_schema.external_table_files(\n                table_name => 'streamline.POLYGON.transactions'\n            )\n        ) A\n)\n\n,\nmax_date AS (\n    SELECT\n        COALESCE(MAX(_INSERTED_TIMESTAMP), '1970-01-01' :: DATE) max_INSERTED_TIMESTAMP\n    FROM\n        POLYGON_DEV.streamline.complete_transactions)\n    \n    SELECT\n        md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n        block_number,\n        last_modified AS _inserted_timestamp\n    FROM\n        streamline.POLYGON.transactions\n        JOIN meta b\n        ON b.file_name = metadata$filename\n\n\nWHERE\n    b.last_modified > (\n        SELECT\n            max_INSERTED_TIMESTAMP\n        FROM\n            max_date\n    )\n\n\nqualify(ROW_NUMBER() over (PARTITION BY id\nORDER BY\n    _inserted_timestamp DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.streamline.complete_transactions"}, "model.polygon_models.streamline__transactions_history": {"raw_sql": "{{ config (\n    materialized = \"view\",\n    post_hook = if_data_call_function(\n        func = \"{{this.schema}}.udf_get_transactions(object_construct('sql_source', '{{this.identifier}}'))\",\n        target = \"{{this.schema}}.{{this.identifier}}\"\n    )\n) }}\n\n{% for item in range(35) %}\n    (\n\n        SELECT\n            {{ dbt_utils.surrogate_key(\n                ['block_number']\n            ) }} AS id,\n            block_number\n        FROM\n            {{ ref(\"streamline__blocks\") }}\n        WHERE\n            block_number BETWEEN {{ item * 1000000 + 1 }}\n            AND {{(\n                item + 1\n            ) * 1000000 }}\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            {{ ref(\"streamline__complete_transactions\") }}\n        WHERE\n            block_number BETWEEN {{ item * 1000000 + 1 }}\n            AND {{(\n                item + 1\n            ) * 1000000 }}\n        ORDER BY\n            block_number\n    ) {% if not loop.last %}\n    UNION ALL\n    {% endif %}\n{% endfor %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.polygon_models.if_data_call_function", "macro.dbt_utils.surrogate_key"], "nodes": ["model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [{"sql": "\n    \n        \n    SELECT\n        NULL\n    \n", "transaction": true, "index": null}], "pre-hook": []}, "database": "POLYGON_DEV", "schema": "streamline", "fqn": ["polygon_models", "silver", "streamline", "streamline__transactions_history"], "unique_id": "model.polygon_models.streamline__transactions_history", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "silver/streamline/streamline__transactions_history.sql", "original_file_path": "models/silver/streamline/streamline__transactions_history.sql", "name": "streamline__transactions_history", "alias": "transactions_history", "checksum": {"name": "sha256", "checksum": "4b29b8a99cc4cca2b7f4003c5af94442c667ec74cac7f7de7a018e6741f66b4a"}, "tags": [], "refs": [["streamline__blocks"], ["streamline__complete_transactions"], ["streamline__blocks"], ["streamline__complete_transactions"], ["streamline__blocks"], ["streamline__complete_transactions"], ["streamline__blocks"], ["streamline__complete_transactions"], ["streamline__blocks"], ["streamline__complete_transactions"], ["streamline__blocks"], ["streamline__complete_transactions"], ["streamline__blocks"], ["streamline__complete_transactions"], ["streamline__blocks"], ["streamline__complete_transactions"], ["streamline__blocks"], ["streamline__complete_transactions"], ["streamline__blocks"], ["streamline__complete_transactions"], ["streamline__blocks"], ["streamline__complete_transactions"], ["streamline__blocks"], ["streamline__complete_transactions"], ["streamline__blocks"], ["streamline__complete_transactions"], ["streamline__blocks"], ["streamline__complete_transactions"], ["streamline__blocks"], ["streamline__complete_transactions"], ["streamline__blocks"], ["streamline__complete_transactions"], ["streamline__blocks"], ["streamline__complete_transactions"], ["streamline__blocks"], ["streamline__complete_transactions"], ["streamline__blocks"], ["streamline__complete_transactions"], ["streamline__blocks"], ["streamline__complete_transactions"], ["streamline__blocks"], ["streamline__complete_transactions"], ["streamline__blocks"], ["streamline__complete_transactions"], ["streamline__blocks"], ["streamline__complete_transactions"], ["streamline__blocks"], ["streamline__complete_transactions"], ["streamline__blocks"], ["streamline__complete_transactions"], ["streamline__blocks"], ["streamline__complete_transactions"], ["streamline__blocks"], ["streamline__complete_transactions"], ["streamline__blocks"], ["streamline__complete_transactions"], ["streamline__blocks"], ["streamline__complete_transactions"], ["streamline__blocks"], ["streamline__complete_transactions"], ["streamline__blocks"], ["streamline__complete_transactions"], ["streamline__blocks"], ["streamline__complete_transactions"], ["streamline__blocks"], ["streamline__complete_transactions"], ["streamline__blocks"], ["streamline__complete_transactions"], ["streamline__blocks"], ["streamline__complete_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/streamline/streamline__transactions_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "post-hook": ["\n    \n        \n    SELECT\n        NULL\n    \n"]}, "created_at": 1669664396.5128372, "compiled_sql": "\n\n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 1\n            AND 1000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_transactions\n        WHERE\n            block_number BETWEEN 1\n            AND 1000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 1000001\n            AND 2000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_transactions\n        WHERE\n            block_number BETWEEN 1000001\n            AND 2000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 2000001\n            AND 3000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_transactions\n        WHERE\n            block_number BETWEEN 2000001\n            AND 3000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 3000001\n            AND 4000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_transactions\n        WHERE\n            block_number BETWEEN 3000001\n            AND 4000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 4000001\n            AND 5000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_transactions\n        WHERE\n            block_number BETWEEN 4000001\n            AND 5000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 5000001\n            AND 6000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_transactions\n        WHERE\n            block_number BETWEEN 5000001\n            AND 6000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 6000001\n            AND 7000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_transactions\n        WHERE\n            block_number BETWEEN 6000001\n            AND 7000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 7000001\n            AND 8000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_transactions\n        WHERE\n            block_number BETWEEN 7000001\n            AND 8000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 8000001\n            AND 9000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_transactions\n        WHERE\n            block_number BETWEEN 8000001\n            AND 9000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 9000001\n            AND 10000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_transactions\n        WHERE\n            block_number BETWEEN 9000001\n            AND 10000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 10000001\n            AND 11000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_transactions\n        WHERE\n            block_number BETWEEN 10000001\n            AND 11000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 11000001\n            AND 12000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_transactions\n        WHERE\n            block_number BETWEEN 11000001\n            AND 12000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 12000001\n            AND 13000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_transactions\n        WHERE\n            block_number BETWEEN 12000001\n            AND 13000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 13000001\n            AND 14000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_transactions\n        WHERE\n            block_number BETWEEN 13000001\n            AND 14000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 14000001\n            AND 15000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_transactions\n        WHERE\n            block_number BETWEEN 14000001\n            AND 15000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 15000001\n            AND 16000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_transactions\n        WHERE\n            block_number BETWEEN 15000001\n            AND 16000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 16000001\n            AND 17000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_transactions\n        WHERE\n            block_number BETWEEN 16000001\n            AND 17000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 17000001\n            AND 18000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_transactions\n        WHERE\n            block_number BETWEEN 17000001\n            AND 18000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 18000001\n            AND 19000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_transactions\n        WHERE\n            block_number BETWEEN 18000001\n            AND 19000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 19000001\n            AND 20000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_transactions\n        WHERE\n            block_number BETWEEN 19000001\n            AND 20000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 20000001\n            AND 21000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_transactions\n        WHERE\n            block_number BETWEEN 20000001\n            AND 21000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 21000001\n            AND 22000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_transactions\n        WHERE\n            block_number BETWEEN 21000001\n            AND 22000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 22000001\n            AND 23000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_transactions\n        WHERE\n            block_number BETWEEN 22000001\n            AND 23000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 23000001\n            AND 24000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_transactions\n        WHERE\n            block_number BETWEEN 23000001\n            AND 24000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 24000001\n            AND 25000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_transactions\n        WHERE\n            block_number BETWEEN 24000001\n            AND 25000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 25000001\n            AND 26000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_transactions\n        WHERE\n            block_number BETWEEN 25000001\n            AND 26000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 26000001\n            AND 27000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_transactions\n        WHERE\n            block_number BETWEEN 26000001\n            AND 27000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 27000001\n            AND 28000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_transactions\n        WHERE\n            block_number BETWEEN 27000001\n            AND 28000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 28000001\n            AND 29000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_transactions\n        WHERE\n            block_number BETWEEN 28000001\n            AND 29000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 29000001\n            AND 30000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_transactions\n        WHERE\n            block_number BETWEEN 29000001\n            AND 30000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 30000001\n            AND 31000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_transactions\n        WHERE\n            block_number BETWEEN 30000001\n            AND 31000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 31000001\n            AND 32000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_transactions\n        WHERE\n            block_number BETWEEN 31000001\n            AND 32000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 32000001\n            AND 33000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_transactions\n        WHERE\n            block_number BETWEEN 32000001\n            AND 33000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 33000001\n            AND 34000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_transactions\n        WHERE\n            block_number BETWEEN 33000001\n            AND 34000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 34000001\n            AND 35000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_transactions\n        WHERE\n            block_number BETWEEN 34000001\n            AND 35000000\n        ORDER BY\n            block_number\n    ) \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.streamline.transactions_history"}, "model.polygon_models.streamline__blocks_realtime": {"raw_sql": "{{ config (\n    materialized = \"view\",\n    post_hook = if_data_call_function(\n        func = \"{{this.schema}}.udf_get_blocks(object_construct('sql_source', '{{this.identifier}}'))\",\n        target = \"{{this.schema}}.{{this.identifier}}\"\n    )\n) }}\n\nWITH last_3_days AS (\n\n    SELECT\n        block_number\n    FROM\n        {{ ref(\"_max_block_by_date\") }}\n        qualify ROW_NUMBER() over (\n            ORDER BY\n                block_number DESC\n        ) = 3\n)\nSELECT\n    {{ dbt_utils.surrogate_key(\n        ['block_number']\n    ) }} AS id,\n    block_number\nFROM\n    {{ ref(\"streamline__blocks\") }}\nWHERE\n    (\n        block_number >= (\n            SELECT\n                block_number\n            FROM\n                last_3_days\n        ) {# TODO: OR can be removed once historical load is complete #}\n        OR block_number > 35000000\n    )\n    AND block_number IS NOT NULL\nEXCEPT\nSELECT\n    id,\n    block_number\nFROM\n    {{ ref(\"streamline__complete_blocks\") }}\nWHERE\n    block_number >= (\n        SELECT\n            block_number\n        FROM\n            last_3_days\n    ) {# TODO: OR can be removed once historical load is complete #}\n    OR block_number > 35000000", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.polygon_models.if_data_call_function", "macro.dbt_utils.surrogate_key"], "nodes": ["model.polygon_models._max_block_by_date", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [{"sql": "\n    \n        \n    SELECT\n        NULL\n    \n", "transaction": true, "index": null}], "pre-hook": []}, "database": "POLYGON_DEV", "schema": "streamline", "fqn": ["polygon_models", "silver", "streamline", "streamline__blocks_realtime"], "unique_id": "model.polygon_models.streamline__blocks_realtime", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "silver/streamline/streamline__blocks_realtime.sql", "original_file_path": "models/silver/streamline/streamline__blocks_realtime.sql", "name": "streamline__blocks_realtime", "alias": "blocks_realtime", "checksum": {"name": "sha256", "checksum": "b1b6d60712de35a9848dda714ffe9317358485d7dead5ce74353ff84830ce6f5"}, "tags": [], "refs": [["_max_block_by_date"], ["streamline__blocks"], ["streamline__complete_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/streamline/streamline__blocks_realtime.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "post-hook": ["\n    \n        \n    SELECT\n        NULL\n    \n"]}, "created_at": 1669664396.55156, "compiled_sql": "\n\nWITH  __dbt__cte___max_block_by_date as (\n\n\nWITH base AS (\n\n    SELECT\n        block_timestamp :: DATE AS block_date,\n        MAX(block_number) block_number\n    FROM\n        POLYGON_DEV.silver.blocks\n    GROUP BY\n        block_timestamp :: DATE\n)\nSELECT\n    block_date,\n    block_number\nFROM\n    base\nWHERE\n    block_date <> (\n        SELECT\n            MAX(block_date)\n        FROM\n            base\n    )\n),last_3_days AS (\n\n    SELECT\n        block_number\n    FROM\n        __dbt__cte___max_block_by_date\n        qualify ROW_NUMBER() over (\n            ORDER BY\n                block_number DESC\n        ) = 3\n)\nSELECT\n    md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n    block_number\nFROM\n    POLYGON_DEV.streamline.blocks\nWHERE\n    (\n        block_number >= (\n            SELECT\n                block_number\n            FROM\n                last_3_days\n        ) \n        OR block_number > 35000000\n    )\n    AND block_number IS NOT NULL\nEXCEPT\nSELECT\n    id,\n    block_number\nFROM\n    POLYGON_DEV.streamline.complete_blocks\nWHERE\n    block_number >= (\n        SELECT\n            block_number\n        FROM\n            last_3_days\n    ) \n    OR block_number > 35000000", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.polygon_models._max_block_by_date", "sql": " __dbt__cte___max_block_by_date as (\n\n\nWITH base AS (\n\n    SELECT\n        block_timestamp :: DATE AS block_date,\n        MAX(block_number) block_number\n    FROM\n        POLYGON_DEV.silver.blocks\n    GROUP BY\n        block_timestamp :: DATE\n)\nSELECT\n    block_date,\n    block_number\nFROM\n    base\nWHERE\n    block_date <> (\n        SELECT\n            MAX(block_date)\n        FROM\n            base\n    )\n)"}], "relation_name": "POLYGON_DEV.streamline.blocks_realtime"}, "model.polygon_models.streamline__blocks_history": {"raw_sql": "{{ config (\n    materialized = \"view\",\n    post_hook = if_data_call_function(\n        func = \"{{this.schema}}.udf_get_blocks(object_construct('sql_source', '{{this.identifier}}'))\",\n        target = \"{{this.schema}}.{{this.identifier}}\"\n    )\n) }}\n\n{% for item in range(35) %}\n    (\n\n        SELECT\n            {{ dbt_utils.surrogate_key(\n                ['block_number']\n            ) }} AS id,\n            block_number\n        FROM\n            {{ ref(\"streamline__blocks\") }}\n        WHERE\n            block_number BETWEEN {{ item * 1000000 + 1 }}\n            AND {{(\n                item + 1\n            ) * 1000000 }}\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            {{ ref(\"streamline__complete_blocks\") }}\n        WHERE\n            block_number BETWEEN {{ item * 1000000 + 1 }}\n            AND {{(\n                item + 1\n            ) * 1000000 }}\n        ORDER BY\n            block_number\n    ) {% if not loop.last %}\n    UNION ALL\n    {% endif %}\n{% endfor %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.polygon_models.if_data_call_function", "macro.dbt_utils.surrogate_key"], "nodes": ["model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [{"sql": "\n    \n        \n    SELECT\n        NULL\n    \n", "transaction": true, "index": null}], "pre-hook": []}, "database": "POLYGON_DEV", "schema": "streamline", "fqn": ["polygon_models", "silver", "streamline", "streamline__blocks_history"], "unique_id": "model.polygon_models.streamline__blocks_history", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "silver/streamline/streamline__blocks_history.sql", "original_file_path": "models/silver/streamline/streamline__blocks_history.sql", "name": "streamline__blocks_history", "alias": "blocks_history", "checksum": {"name": "sha256", "checksum": "131e9e3b8edc55cd1fb351268ac3c6555166018a7f6075f3cb9c987a45fd2339"}, "tags": [], "refs": [["streamline__blocks"], ["streamline__complete_blocks"], ["streamline__blocks"], ["streamline__complete_blocks"], ["streamline__blocks"], ["streamline__complete_blocks"], ["streamline__blocks"], ["streamline__complete_blocks"], ["streamline__blocks"], ["streamline__complete_blocks"], ["streamline__blocks"], ["streamline__complete_blocks"], ["streamline__blocks"], ["streamline__complete_blocks"], ["streamline__blocks"], ["streamline__complete_blocks"], ["streamline__blocks"], ["streamline__complete_blocks"], ["streamline__blocks"], ["streamline__complete_blocks"], ["streamline__blocks"], ["streamline__complete_blocks"], ["streamline__blocks"], ["streamline__complete_blocks"], ["streamline__blocks"], ["streamline__complete_blocks"], ["streamline__blocks"], ["streamline__complete_blocks"], ["streamline__blocks"], ["streamline__complete_blocks"], ["streamline__blocks"], ["streamline__complete_blocks"], ["streamline__blocks"], ["streamline__complete_blocks"], ["streamline__blocks"], ["streamline__complete_blocks"], ["streamline__blocks"], ["streamline__complete_blocks"], ["streamline__blocks"], ["streamline__complete_blocks"], ["streamline__blocks"], ["streamline__complete_blocks"], ["streamline__blocks"], ["streamline__complete_blocks"], ["streamline__blocks"], ["streamline__complete_blocks"], ["streamline__blocks"], ["streamline__complete_blocks"], ["streamline__blocks"], ["streamline__complete_blocks"], ["streamline__blocks"], ["streamline__complete_blocks"], ["streamline__blocks"], ["streamline__complete_blocks"], ["streamline__blocks"], ["streamline__complete_blocks"], ["streamline__blocks"], ["streamline__complete_blocks"], ["streamline__blocks"], ["streamline__complete_blocks"], ["streamline__blocks"], ["streamline__complete_blocks"], ["streamline__blocks"], ["streamline__complete_blocks"], ["streamline__blocks"], ["streamline__complete_blocks"], ["streamline__blocks"], ["streamline__complete_blocks"], ["streamline__blocks"], ["streamline__complete_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/streamline/streamline__blocks_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "post-hook": ["\n    \n        \n    SELECT\n        NULL\n    \n"]}, "created_at": 1669664396.558827, "compiled_sql": "\n\n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 1\n            AND 1000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_blocks\n        WHERE\n            block_number BETWEEN 1\n            AND 1000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 1000001\n            AND 2000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_blocks\n        WHERE\n            block_number BETWEEN 1000001\n            AND 2000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 2000001\n            AND 3000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_blocks\n        WHERE\n            block_number BETWEEN 2000001\n            AND 3000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 3000001\n            AND 4000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_blocks\n        WHERE\n            block_number BETWEEN 3000001\n            AND 4000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 4000001\n            AND 5000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_blocks\n        WHERE\n            block_number BETWEEN 4000001\n            AND 5000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 5000001\n            AND 6000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_blocks\n        WHERE\n            block_number BETWEEN 5000001\n            AND 6000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 6000001\n            AND 7000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_blocks\n        WHERE\n            block_number BETWEEN 6000001\n            AND 7000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 7000001\n            AND 8000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_blocks\n        WHERE\n            block_number BETWEEN 7000001\n            AND 8000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 8000001\n            AND 9000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_blocks\n        WHERE\n            block_number BETWEEN 8000001\n            AND 9000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 9000001\n            AND 10000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_blocks\n        WHERE\n            block_number BETWEEN 9000001\n            AND 10000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 10000001\n            AND 11000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_blocks\n        WHERE\n            block_number BETWEEN 10000001\n            AND 11000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 11000001\n            AND 12000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_blocks\n        WHERE\n            block_number BETWEEN 11000001\n            AND 12000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 12000001\n            AND 13000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_blocks\n        WHERE\n            block_number BETWEEN 12000001\n            AND 13000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 13000001\n            AND 14000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_blocks\n        WHERE\n            block_number BETWEEN 13000001\n            AND 14000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 14000001\n            AND 15000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_blocks\n        WHERE\n            block_number BETWEEN 14000001\n            AND 15000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 15000001\n            AND 16000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_blocks\n        WHERE\n            block_number BETWEEN 15000001\n            AND 16000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 16000001\n            AND 17000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_blocks\n        WHERE\n            block_number BETWEEN 16000001\n            AND 17000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 17000001\n            AND 18000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_blocks\n        WHERE\n            block_number BETWEEN 17000001\n            AND 18000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 18000001\n            AND 19000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_blocks\n        WHERE\n            block_number BETWEEN 18000001\n            AND 19000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 19000001\n            AND 20000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_blocks\n        WHERE\n            block_number BETWEEN 19000001\n            AND 20000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 20000001\n            AND 21000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_blocks\n        WHERE\n            block_number BETWEEN 20000001\n            AND 21000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 21000001\n            AND 22000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_blocks\n        WHERE\n            block_number BETWEEN 21000001\n            AND 22000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 22000001\n            AND 23000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_blocks\n        WHERE\n            block_number BETWEEN 22000001\n            AND 23000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 23000001\n            AND 24000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_blocks\n        WHERE\n            block_number BETWEEN 23000001\n            AND 24000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 24000001\n            AND 25000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_blocks\n        WHERE\n            block_number BETWEEN 24000001\n            AND 25000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 25000001\n            AND 26000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_blocks\n        WHERE\n            block_number BETWEEN 25000001\n            AND 26000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 26000001\n            AND 27000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_blocks\n        WHERE\n            block_number BETWEEN 26000001\n            AND 27000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 27000001\n            AND 28000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_blocks\n        WHERE\n            block_number BETWEEN 27000001\n            AND 28000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 28000001\n            AND 29000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_blocks\n        WHERE\n            block_number BETWEEN 28000001\n            AND 29000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 29000001\n            AND 30000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_blocks\n        WHERE\n            block_number BETWEEN 29000001\n            AND 30000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 30000001\n            AND 31000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_blocks\n        WHERE\n            block_number BETWEEN 30000001\n            AND 31000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 31000001\n            AND 32000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_blocks\n        WHERE\n            block_number BETWEEN 31000001\n            AND 32000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 32000001\n            AND 33000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_blocks\n        WHERE\n            block_number BETWEEN 32000001\n            AND 33000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 33000001\n            AND 34000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_blocks\n        WHERE\n            block_number BETWEEN 33000001\n            AND 34000000\n        ORDER BY\n            block_number\n    ) \n    UNION ALL\n    \n\n    (\n\n        SELECT\n            md5(cast(coalesce(cast(block_number as TEXT), '') as TEXT)) AS id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.blocks\n        WHERE\n            block_number BETWEEN 34000001\n            AND 35000000\n        EXCEPT\n        SELECT\n            id,\n            block_number\n        FROM\n            POLYGON_DEV.streamline.complete_blocks\n        WHERE\n            block_number BETWEEN 34000001\n            AND 35000000\n        ORDER BY\n            block_number\n    ) \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.streamline.blocks_history"}, "model.polygon_models.silver__contract_proxies": {"raw_sql": "{{ config (\n    materialized = \"incremental\",\n    unique_key = \"id\",\n    cluster_by = \"ROUND(block_number, -3)\",\n    merge_update_columns = [\"id\"]\n) }}\n\nWITH base AS (\n\n    SELECT\n        tx_hash,\n        block_number,\n        contract_address,\n        CONCAT('0x', SUBSTR(DATA, 27, 40)) AS proxy_address1,\n        CONCAT('0x', SUBSTR(topics [1] :: STRING, 27, 40)) AS proxy_address2,\n        CASE\n            WHEN proxy_address1 = '0x' THEN proxy_address2\n            ELSE proxy_address1\n        END AS proxy_address,\n        topics,\n        DATA,\n        _inserted_timestamp\n    FROM\n        {{ ref('silver__logs') }}\n    WHERE\n        topics [0] :: STRING = '0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b'\n        AND tx_status = 'SUCCESS'\n\n{% if is_incremental() %}\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(\n            _inserted_timestamp\n        )\n    FROM\n        {{ this }}\n)\n{% endif %}\n)\n\n{% if is_incremental() %},\nupdate_records AS (\n    SELECT\n        tx_hash,\n        block_number,\n        contract_address,\n        proxy_address,\n        _inserted_timestamp\n    FROM\n        {{ this }}\n    WHERE\n        contract_address IN (\n            SELECT\n                DISTINCT contract_address\n            FROM\n                base\n        )\n),\nall_records AS (\n    SELECT\n        tx_hash,\n        block_number,\n        contract_address,\n        proxy_address,\n        _inserted_timestamp\n    FROM\n        update_records\n    UNION ALL\n    SELECT\n        tx_hash,\n        block_number,\n        contract_address,\n        proxy_address,\n        _inserted_timestamp\n    FROM\n        base\n)\n{% endif %}\nSELECT\n    tx_hash,\n    block_number,\n    contract_address,\n    proxy_address,\n    _inserted_timestamp,\n    {{ dbt_utils.surrogate_key(\n        ['block_number', 'contract_address']\n    ) }} AS id,\n    COALESCE(LAG(block_number) over(PARTITION BY contract_address\nORDER BY\n    block_number DESC), 10000000000) AS next_block_number\nFROM\n\n{% if is_incremental() %}\nall_records\n{% else %}\n    base\n{% endif %}\n\nqualify(ROW_NUMBER() over(PARTITION BY id\nORDER BY\n    _inserted_timestamp DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.polygon_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "id", "on_schema_change": "ignore", "grants": {}, "cluster_by": "ROUND(block_number, -3)", "merge_update_columns": ["id"], "post-hook": [], "pre-hook": []}, "database": "POLYGON_DEV", "schema": "silver", "fqn": ["polygon_models", "silver", "silver__contract_proxies"], "unique_id": "model.polygon_models.silver__contract_proxies", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "silver/silver__contract_proxies.sql", "original_file_path": "models/silver/silver__contract_proxies.sql", "name": "silver__contract_proxies", "alias": "contract_proxies", "checksum": {"name": "sha256", "checksum": "803bcfb5ac519d765c951f23fb244e96bd8bb1030560c7cb4fc2fab448eb2976"}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "polygon_models://models/silver/silver__contract_proxies.yml", "compiled_path": "target/compiled/polygon_models/models/silver/silver__contract_proxies.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "id", "cluster_by": "ROUND(block_number, -3)", "merge_update_columns": ["id"]}, "created_at": 1669681845.2547169, "compiled_sql": "\n\nWITH base AS (\n\n    SELECT\n        tx_hash,\n        block_number,\n        contract_address,\n        CONCAT('0x', SUBSTR(DATA, 27, 40)) AS proxy_address1,\n        CONCAT('0x', SUBSTR(topics [1] :: STRING, 27, 40)) AS proxy_address2,\n        CASE\n            WHEN proxy_address1 = '0x' THEN proxy_address2\n            ELSE proxy_address1\n        END AS proxy_address,\n        topics,\n        DATA,\n        _inserted_timestamp\n    FROM\n        POLYGON_DEV.silver.logs\n    WHERE\n        topics [0] :: STRING = '0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b'\n        AND tx_status = 'SUCCESS'\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(\n            _inserted_timestamp\n        )\n    FROM\n        POLYGON_DEV.silver.contract_proxies\n)\n\n)\n\n,\nupdate_records AS (\n    SELECT\n        tx_hash,\n        block_number,\n        contract_address,\n        proxy_address,\n        _inserted_timestamp\n    FROM\n        POLYGON_DEV.silver.contract_proxies\n    WHERE\n        contract_address IN (\n            SELECT\n                DISTINCT contract_address\n            FROM\n                base\n        )\n),\nall_records AS (\n    SELECT\n        tx_hash,\n        block_number,\n        contract_address,\n        proxy_address,\n        _inserted_timestamp\n    FROM\n        update_records\n    UNION ALL\n    SELECT\n        tx_hash,\n        block_number,\n        contract_address,\n        proxy_address,\n        _inserted_timestamp\n    FROM\n        base\n)\n\nSELECT\n    tx_hash,\n    block_number,\n    contract_address,\n    proxy_address,\n    _inserted_timestamp,\n    md5(cast(coalesce(cast(block_number as TEXT), '') || '-' || coalesce(cast(contract_address as TEXT), '') as TEXT)) AS id,\n    COALESCE(LAG(block_number) over(PARTITION BY contract_address\nORDER BY\n    block_number DESC), 10000000000) AS next_block_number\nFROM\n\n\nall_records\n\n\nqualify(ROW_NUMBER() over(PARTITION BY id\nORDER BY\n    _inserted_timestamp DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.silver.contract_proxies"}, "test.polygon_models.dbt_utils_unique_combination_of_columns_silver__contract_proxies_ID.3ac7fb13cd": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_ef9e0c1f3895914224c4304fa5baacda\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["ID"], "model": "{{ get_where_subquery(ref('silver__contract_proxies')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__contract_proxies"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_ef9e0c1f3895914224c4304fa5baacda", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["polygon_models", "silver", "dbt_utils_unique_combination_of_columns_silver__contract_proxies_ID"], "unique_id": "test.polygon_models.dbt_utils_unique_combination_of_columns_silver__contract_proxies_ID.3ac7fb13cd", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_utils_unique_combination_o_ef9e0c1f3895914224c4304fa5baacda.sql", "original_file_path": "models/silver/silver__contract_proxies.yml", "name": "dbt_utils_unique_combination_of_columns_silver__contract_proxies_ID", "alias": "contract_proxies_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__contract_proxies"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__contract_proxies.yml/dbt_utils_unique_combination_o_ef9e0c1f3895914224c4304fa5baacda.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_ef9e0c1f3895914224c4304fa5baacda"}, "created_at": 1669681845.255713, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        ID\n    from POLYGON_DEV.silver.contract_proxies\n    group by ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_utils_unique_combination_of_columns_silver.contract_proxies_ID", "column_name": null, "file_key_name": "models.silver__contract_proxies"}, "model.polygon_models.silver__relevant_abi_contracts": {"raw_sql": "{{ config(\n    materialized = 'table',\n    unique_key = \"contract_address\"\n) }}\n\nWITH base AS (\n\n    SELECT\n        contract_address,\n        COUNT(*) AS total_events\n    FROM\n        {{ ref('silver__logs') }}\n    WHERE\n        tx_status = 'SUCCESS'\n    GROUP BY\n        contract_address\n    HAVING\n        total_events >= 25\n),\nproxies AS (\n    SELECT\n        tx_hash, \n        block_number,\n        contract_address,\n        CONCAT('0x', SUBSTR(DATA, 27, 40)) AS proxy_address1,\n        CONCAT('0x', SUBSTR(topics [1] :: STRING, 27, 40)) AS proxy_address2,\n        CASE\n            WHEN proxy_address1 = '0x' THEN proxy_address2\n            ELSE proxy_address1\n        END AS proxy_address,\n        topics,\n        DATA\n    FROM\n        {{ ref('silver__logs') }}\n    WHERE\n        contract_address IN (\n            SELECT\n                contract_address\n            FROM\n                base\n        )\n        AND topics [0] :: STRING = '0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b'\n        AND tx_status = 'SUCCESS' qualify(ROW_NUMBER() over(PARTITION BY proxy_address\n    ORDER BY\n        block_number DESC)) = 1\n)\nSELECT\n    contract_address\nFROM\n    base\nUNION\nSELECT\n    proxy_address AS contract_address\nFROM\n    proxies", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.polygon_models.silver__logs", "model.polygon_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "contract_address", "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "POLYGON_DEV", "schema": "silver", "fqn": ["polygon_models", "silver", "API_udf", "silver__relevant_abi_contracts"], "unique_id": "model.polygon_models.silver__relevant_abi_contracts", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "silver/API_udf/silver__relevant_abi_contracts.sql", "original_file_path": "models/silver/API_udf/silver__relevant_abi_contracts.sql", "name": "silver__relevant_abi_contracts", "alias": "relevant_abi_contracts", "checksum": {"name": "sha256", "checksum": "7b51156b2c77da9b3d31f765da84ed057cb27b281286b772193ae019780f3c56"}, "tags": [], "refs": [["silver__logs"], ["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "polygon_models://models/silver/API_udf/silver__relevant_abi_contracts.yml", "compiled_path": "target/compiled/polygon_models/models/silver/API_udf/silver__relevant_abi_contracts.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "unique_key": "contract_address"}, "created_at": 1669692076.596158, "compiled_sql": "\n\nWITH base AS (\n\n    SELECT\n        contract_address,\n        COUNT(*) AS total_events\n    FROM\n        POLYGON_DEV.silver.logs\n    WHERE\n        tx_status = 'SUCCESS'\n    GROUP BY\n        contract_address\n    HAVING\n        total_events >= 25\n),\nproxies AS (\n    SELECT\n        tx_hash, \n        block_number,\n        contract_address,\n        CONCAT('0x', SUBSTR(DATA, 27, 40)) AS proxy_address1,\n        CONCAT('0x', SUBSTR(topics [1] :: STRING, 27, 40)) AS proxy_address2,\n        CASE\n            WHEN proxy_address1 = '0x' THEN proxy_address2\n            ELSE proxy_address1\n        END AS proxy_address,\n        topics,\n        DATA\n    FROM\n        POLYGON_DEV.silver.logs\n    WHERE\n        contract_address IN (\n            SELECT\n                contract_address\n            FROM\n                base\n        )\n        AND topics [0] :: STRING = '0xbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b'\n        AND tx_status = 'SUCCESS' qualify(ROW_NUMBER() over(PARTITION BY proxy_address\n    ORDER BY\n        block_number DESC)) = 1\n)\nSELECT\n    contract_address\nFROM\n    base\nUNION\nSELECT\n    proxy_address AS contract_address\nFROM\n    proxies", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.silver.relevant_abi_contracts"}, "model.polygon_models.silver__relevant_token_contracts": {"raw_sql": "{{ config(\n    materialized = 'table',\n    unique_key = \"contract_address\"\n) }}\n\nSELECT\n    contract_address,\n    'polygon' AS blockchain,\n    COUNT(*) AS transfers,\n    MIN(block_number) AS created_block\nFROM\n    {{ ref('silver__logs') }}\nWHERE\n    topics [0] :: STRING = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'\nGROUP BY\n    1,\n    2\nHAVING\n    COUNT(*) > 25", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.polygon_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "contract_address", "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "POLYGON_DEV", "schema": "silver", "fqn": ["polygon_models", "silver", "API_udf", "silver__relevant_token_contracts"], "unique_id": "model.polygon_models.silver__relevant_token_contracts", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "silver/API_udf/silver__relevant_token_contracts.sql", "original_file_path": "models/silver/API_udf/silver__relevant_token_contracts.sql", "name": "silver__relevant_token_contracts", "alias": "relevant_token_contracts", "checksum": {"name": "sha256", "checksum": "d4a61a08ec723ad9479a3d1aa18461286dfaa699fdd2fe14e3939292a7d08903"}, "tags": [], "refs": [["silver__logs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "polygon_models://models/silver/API_udf/silver__relevant_token_contracts.yml", "compiled_path": "target/compiled/polygon_models/models/silver/API_udf/silver__relevant_token_contracts.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "unique_key": "contract_address"}, "created_at": 1669692076.450819, "compiled_sql": "\n\nSELECT\n    contract_address,\n    'polygon' AS blockchain,\n    COUNT(*) AS transfers,\n    MIN(block_number) AS created_block\nFROM\n    POLYGON_DEV.silver.logs\nWHERE\n    topics [0] :: STRING = '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef'\nGROUP BY\n    1,\n    2\nHAVING\n    COUNT(*) > 25", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.silver.relevant_token_contracts"}, "model.polygon_models.core__dim_contracts": {"raw_sql": "{{ config(\n    materialized = 'view',\n    persist_docs ={ \"relation\": true,\n    \"columns\": true }\n) }}\n\nSELECT\n    contract_address,\n    token_symbol AS symbol,\n    token_name AS NAME,\n    token_decimals AS decimals\nFROM\n    {{ ref('silver__contracts') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.polygon_models.silver__contracts"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "POLYGON_DEV", "schema": "core", "fqn": ["polygon_models", "gold", "core__dim_contracts"], "unique_id": "model.polygon_models.core__dim_contracts", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "gold/core__dim_contracts.sql", "original_file_path": "models/gold/core__dim_contracts.sql", "name": "core__dim_contracts", "alias": "dim_contracts", "checksum": {"name": "sha256", "checksum": "3b836b240b55e492b9ecceecb49f34fc75833eb49d30a82d5f9af2717d699b2d"}, "tags": [], "refs": [["silver__contracts"]], "sources": [], "metrics": [], "description": "This table contains the contract addresses and their associated metadata. Includes ERC20 and ERC721 tokens. Metadata is read directly from contracts on the blockchain.", "columns": {"CONTRACT_ADDRESS": {"name": "CONTRACT_ADDRESS", "description": "The address of the contract.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYMBOL": {"name": "SYMBOL", "description": "The symbol of the contract.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "The name of the contract.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DECIMALS": {"name": "DECIMALS", "description": "The number of decimals used to adjust amount for this contract.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "polygon_models://models/gold/core__dim_contracts.yml", "compiled_path": "target/compiled/polygon_models/models/gold/core__dim_contracts.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1669692076.450295, "compiled_sql": "\n\nSELECT\n    contract_address,\n    token_symbol AS symbol,\n    token_name AS NAME,\n    token_decimals AS decimals\nFROM\n    POLYGON_DEV.silver.contracts", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.core.dim_contracts"}, "model.polygon_models.silver__contract_abis": {"raw_sql": "{{ config (\n    materialized = \"incremental\",\n    unique_key = \"contract_address\",\n    cluster_by = \"_inserted_timestamp::date\",\n    merge_update_columns = [\"contract_address\"]\n) }}\n\nWITH base AS (\n\n    SELECT\n        contract_address,\n        abi_data AS full_data,\n        abi_data :data :result AS abi,\n        _inserted_timestamp\n    FROM\n        {{ source(\n            \"bronze_api\",\n            \"contract_abis\"\n        ) }}\n\n{% if is_incremental() %}\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            {{ this }}\n    )\n{% endif %}\n)\nSELECT\n    contract_address,\n    full_data,\n    abi,\n    _inserted_timestamp\nFROM\n    base\nWHERE\n    abi :: STRING <> 'Contract source code not verified' qualify(ROW_NUMBER() over(PARTITION BY contract_address\nORDER BY\n    _inserted_timestamp DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.polygon_models.bronze_api.contract_abis"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "contract_address", "on_schema_change": "ignore", "grants": {}, "cluster_by": "_inserted_timestamp::date", "merge_update_columns": ["contract_address"], "post-hook": [], "pre-hook": []}, "database": "POLYGON_DEV", "schema": "silver", "fqn": ["polygon_models", "silver", "silver__contract_abis"], "unique_id": "model.polygon_models.silver__contract_abis", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "silver/silver__contract_abis.sql", "original_file_path": "models/silver/silver__contract_abis.sql", "name": "silver__contract_abis", "alias": "contract_abis", "checksum": {"name": "sha256", "checksum": "0ef0ac305ad1536c9608bc48913ec762142d541d9e8d362d082c6f7f36f77e2e"}, "tags": [], "refs": [], "sources": [["bronze_api", "contract_abis"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "polygon_models://models/silver/silver__contract_abis.yml", "compiled_path": "target/compiled/polygon_models/models/silver/silver__contract_abis.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "contract_address", "cluster_by": "_inserted_timestamp::date", "merge_update_columns": ["contract_address"]}, "created_at": 1669692076.60171, "compiled_sql": "\n\nWITH base AS (\n\n    SELECT\n        contract_address,\n        abi_data AS full_data,\n        abi_data :data :result AS abi,\n        _inserted_timestamp\n    FROM\n        polygon.bronze_api.contract_abis\n\n\nWHERE\n    _inserted_timestamp >= (\n        SELECT\n            MAX(\n                _inserted_timestamp\n            )\n        FROM\n            POLYGON_DEV.silver.contract_abis\n    )\n\n)\nSELECT\n    contract_address,\n    full_data,\n    abi,\n    _inserted_timestamp\nFROM\n    base\nWHERE\n    abi :: STRING <> 'Contract source code not verified' qualify(ROW_NUMBER() over(PARTITION BY contract_address\nORDER BY\n    _inserted_timestamp DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.silver.contract_abis"}, "test.polygon_models.dbt_utils_unique_combination_of_columns_silver__relevant_token_contracts_CONTRACT_ADDRESS.24bd782cb8": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_8ca5aca2f92ab269b666231771370150\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["CONTRACT_ADDRESS"], "model": "{{ get_where_subquery(ref('silver__relevant_token_contracts')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__relevant_token_contracts"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_8ca5aca2f92ab269b666231771370150", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["polygon_models", "silver", "API_udf", "dbt_utils_unique_combination_of_columns_silver__relevant_token_contracts_CONTRACT_ADDRESS"], "unique_id": "test.polygon_models.dbt_utils_unique_combination_of_columns_silver__relevant_token_contracts_CONTRACT_ADDRESS.24bd782cb8", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_utils_unique_combination_o_8ca5aca2f92ab269b666231771370150.sql", "original_file_path": "models/silver/API_udf/silver__relevant_token_contracts.yml", "name": "dbt_utils_unique_combination_of_columns_silver__relevant_token_contracts_CONTRACT_ADDRESS", "alias": "relevant_token_contracts_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__relevant_token_contracts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/API_udf/silver__relevant_token_contracts.yml/dbt_utils_unique_combination_o_8ca5aca2f92ab269b666231771370150.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_8ca5aca2f92ab269b666231771370150"}, "created_at": 1669692076.457067, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        CONTRACT_ADDRESS\n    from POLYGON_DEV.silver.relevant_token_contracts\n    group by CONTRACT_ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_utils_unique_combination_of_columns_silver.relevant_token_contracts_CONTRACT_ADDRESS", "column_name": null, "file_key_name": "models.silver__relevant_token_contracts"}, "test.polygon_models.dbt_utils_unique_combination_of_columns_silver__relevant_abi_contracts_CONTRACT_ADDRESS.13614bb275": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_3bbac247fd06efd278803cefb0ec1d84\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["CONTRACT_ADDRESS"], "model": "{{ get_where_subquery(ref('silver__relevant_abi_contracts')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__relevant_abi_contracts"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_3bbac247fd06efd278803cefb0ec1d84", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["polygon_models", "silver", "API_udf", "dbt_utils_unique_combination_of_columns_silver__relevant_abi_contracts_CONTRACT_ADDRESS"], "unique_id": "test.polygon_models.dbt_utils_unique_combination_of_columns_silver__relevant_abi_contracts_CONTRACT_ADDRESS.13614bb275", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_utils_unique_combination_o_3bbac247fd06efd278803cefb0ec1d84.sql", "original_file_path": "models/silver/API_udf/silver__relevant_abi_contracts.yml", "name": "dbt_utils_unique_combination_of_columns_silver__relevant_abi_contracts_CONTRACT_ADDRESS", "alias": "relevant_abi_contracts_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__relevant_abi_contracts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/API_udf/silver__relevant_abi_contracts.yml/dbt_utils_unique_combination_o_3bbac247fd06efd278803cefb0ec1d84.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_3bbac247fd06efd278803cefb0ec1d84"}, "created_at": 1669692076.597274, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        CONTRACT_ADDRESS\n    from POLYGON_DEV.silver.relevant_abi_contracts\n    group by CONTRACT_ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_utils_unique_combination_of_columns_silver.relevant_abi_contracts_CONTRACT_ADDRESS", "column_name": null, "file_key_name": "models.silver__relevant_abi_contracts"}, "test.polygon_models.dbt_utils_unique_combination_of_columns_silver__contract_abis_CONTRACT_ADDRESS.d4ac45a2a1": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e2b1b8323864893675ddfa5463249e28\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["CONTRACT_ADDRESS"], "model": "{{ get_where_subquery(ref('silver__contract_abis')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__contract_abis"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_e2b1b8323864893675ddfa5463249e28", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["polygon_models", "silver", "dbt_utils_unique_combination_of_columns_silver__contract_abis_CONTRACT_ADDRESS"], "unique_id": "test.polygon_models.dbt_utils_unique_combination_of_columns_silver__contract_abis_CONTRACT_ADDRESS.d4ac45a2a1", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_utils_unique_combination_o_e2b1b8323864893675ddfa5463249e28.sql", "original_file_path": "models/silver/silver__contract_abis.yml", "name": "dbt_utils_unique_combination_of_columns_silver__contract_abis_CONTRACT_ADDRESS", "alias": "contract_abis_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__contract_abis"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__contract_abis.yml/dbt_utils_unique_combination_o_e2b1b8323864893675ddfa5463249e28.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_e2b1b8323864893675ddfa5463249e28"}, "created_at": 1669692076.6025002, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        CONTRACT_ADDRESS\n    from POLYGON_DEV.silver.contract_abis\n    group by CONTRACT_ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_utils_unique_combination_of_columns_silver.contract_abis_CONTRACT_ADDRESS", "column_name": null, "file_key_name": "models.silver__contract_abis"}, "model.polygon_models.silver__contracts": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'contract_address'\n) }}\n\nWITH base_metadata AS (\n\n    SELECT\n        contract_address,\n        block_number,\n        function_sig AS function_signature,\n        read_result AS read_output,\n        _inserted_timestamp\n    FROM\n        {{ source(\n            'bronze_api',\n            'token_reads'\n        ) }}\n    WHERE\n        read_result IS NOT NULL\n        AND read_result <> '0x'\n\n{% if is_incremental() %}\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(\n            _inserted_timestamp\n        )\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\ntoken_names AS (\n    SELECT\n        contract_address,\n        block_number,\n        function_signature,\n        read_output,\n        regexp_substr_all(SUBSTR(read_output, 3, len(read_output)), '.{64}') AS segmented_output,\n        PUBLIC.udf_hex_to_int(\n            segmented_output [1] :: STRING\n        ) AS sub_len,\n        TRY_HEX_DECODE_STRING(\n            SUBSTR(\n                segmented_output [2] :: STRING,\n                0,\n                sub_len * 2\n            )\n        ) AS name1,\n        TRY_HEX_DECODE_STRING(RTRIM(segmented_output [2] :: STRING, 0)) AS name2,\n        TRY_HEX_DECODE_STRING(RTRIM(segmented_output [0] :: STRING, 0)) AS name3,\n        TRY_HEX_DECODE_STRING(\n            CONCAT(RTRIM(segmented_output [0] :: STRING, 0), '0')\n        ) AS name4,\n        COALESCE(\n            name1,\n            name2,\n            name3,\n            name4\n        ) AS token_name\n    FROM\n        base_metadata\n    WHERE\n        function_signature = '0x06fdde03'\n        AND segmented_output [1] :: STRING IS NOT NULL\n),\ntoken_symbols AS (\n    SELECT\n        contract_address,\n        block_number,\n        function_signature,\n        read_output,\n        regexp_substr_all(SUBSTR(read_output, 3, len(read_output)), '.{64}') AS segmented_output,\n        PUBLIC.udf_hex_to_int(\n            segmented_output [1] :: STRING\n        ) AS sub_len,\n        TRY_HEX_DECODE_STRING(\n            SUBSTR(\n                segmented_output [2] :: STRING,\n                0,\n                sub_len * 2\n            )\n        ) AS symbol1,\n        TRY_HEX_DECODE_STRING(RTRIM(segmented_output [2] :: STRING, 0)) AS symbol2,\n        TRY_HEX_DECODE_STRING(RTRIM(segmented_output [0] :: STRING, 0)) AS symbol3,\n        TRY_HEX_DECODE_STRING(\n            CONCAT(RTRIM(segmented_output [0] :: STRING, 0), '0')\n        ) AS symbol4,\n        COALESCE(\n            symbol1,\n            symbol2,\n            symbol3,\n            symbol4\n        ) AS token_symbol\n    FROM\n        base_metadata\n    WHERE\n        function_signature = '0x95d89b41'\n        AND segmented_output [1] :: STRING IS NOT NULL\n),\ntoken_decimals AS (\n    SELECT\n        contract_address,\n        PUBLIC.udf_hex_to_int(\n            read_output :: STRING\n        ) AS token_decimals,\n        LENGTH(token_decimals) AS dec_length\n    FROM\n        base_metadata\n    WHERE\n        function_signature = '0x313ce567'\n        AND read_output IS NOT NULL\n        AND read_output <> '0x'\n),\ncontracts AS (\n    SELECT\n        contract_address,\n        MAX(_inserted_timestamp) AS _inserted_timestamp\n    FROM\n        base_metadata\n    GROUP BY\n        1\n)\nSELECT\n    c1.contract_address::STRING AS contract_address,\n    token_name,\n    COALESCE(\n        token_decimals,\n        0\n    ) AS token_decimals,\n    token_symbol,\n    _inserted_timestamp\nFROM\n    contracts c1\n    LEFT JOIN token_names\n    ON c1.contract_address = token_names.contract_address\n    LEFT JOIN token_symbols\n    ON c1.contract_address = token_symbols.contract_address\n    LEFT JOIN token_decimals\n    ON c1.contract_address = token_decimals.contract_address\n    AND dec_length < 3 qualify(ROW_NUMBER() over(PARTITION BY c1.contract_address\nORDER BY\n    _inserted_timestamp DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.polygon_models.bronze_api.token_reads"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "contract_address", "on_schema_change": "ignore", "grants": {}, "post-hook": [], "pre-hook": []}, "database": "POLYGON_DEV", "schema": "silver", "fqn": ["polygon_models", "silver", "silver__contracts"], "unique_id": "model.polygon_models.silver__contracts", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "silver/silver__contracts.sql", "original_file_path": "models/silver/silver__contracts.sql", "name": "silver__contracts", "alias": "contracts", "checksum": {"name": "sha256", "checksum": "cd832149c1abb97be5b68273e564958ee80b31e2fcaa99ca96befdd62b1dd6ca"}, "tags": [], "refs": [], "sources": [["bronze_api", "token_reads"]], "metrics": [], "description": "", "columns": {"CONTRACT_ADDRESS": {"name": "CONTRACT_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_INSERTED_TIMESTAMP": {"name": "_INSERTED_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "polygon_models://models/silver/silver__contracts.yml", "compiled_path": "target/compiled/polygon_models/models/silver/silver__contracts.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "contract_address"}, "created_at": 1669692228.9975, "compiled_sql": "\n\nWITH base_metadata AS (\n\n    SELECT\n        contract_address,\n        block_number,\n        function_sig AS function_signature,\n        read_result AS read_output,\n        _inserted_timestamp\n    FROM\n        polygon.bronze_api.token_reads\n    WHERE\n        read_result IS NOT NULL\n        AND read_result <> '0x'\n\n\nAND _inserted_timestamp >= (\n    SELECT\n        MAX(\n            _inserted_timestamp\n        )\n    FROM\n        POLYGON_DEV.silver.contracts\n)\n\n),\ntoken_names AS (\n    SELECT\n        contract_address,\n        block_number,\n        function_signature,\n        read_output,\n        regexp_substr_all(SUBSTR(read_output, 3, len(read_output)), '.{64}') AS segmented_output,\n        PUBLIC.udf_hex_to_int(\n            segmented_output [1] :: STRING\n        ) AS sub_len,\n        TRY_HEX_DECODE_STRING(\n            SUBSTR(\n                segmented_output [2] :: STRING,\n                0,\n                sub_len * 2\n            )\n        ) AS name1,\n        TRY_HEX_DECODE_STRING(RTRIM(segmented_output [2] :: STRING, 0)) AS name2,\n        TRY_HEX_DECODE_STRING(RTRIM(segmented_output [0] :: STRING, 0)) AS name3,\n        TRY_HEX_DECODE_STRING(\n            CONCAT(RTRIM(segmented_output [0] :: STRING, 0), '0')\n        ) AS name4,\n        COALESCE(\n            name1,\n            name2,\n            name3,\n            name4\n        ) AS token_name\n    FROM\n        base_metadata\n    WHERE\n        function_signature = '0x06fdde03'\n        AND segmented_output [1] :: STRING IS NOT NULL\n),\ntoken_symbols AS (\n    SELECT\n        contract_address,\n        block_number,\n        function_signature,\n        read_output,\n        regexp_substr_all(SUBSTR(read_output, 3, len(read_output)), '.{64}') AS segmented_output,\n        PUBLIC.udf_hex_to_int(\n            segmented_output [1] :: STRING\n        ) AS sub_len,\n        TRY_HEX_DECODE_STRING(\n            SUBSTR(\n                segmented_output [2] :: STRING,\n                0,\n                sub_len * 2\n            )\n        ) AS symbol1,\n        TRY_HEX_DECODE_STRING(RTRIM(segmented_output [2] :: STRING, 0)) AS symbol2,\n        TRY_HEX_DECODE_STRING(RTRIM(segmented_output [0] :: STRING, 0)) AS symbol3,\n        TRY_HEX_DECODE_STRING(\n            CONCAT(RTRIM(segmented_output [0] :: STRING, 0), '0')\n        ) AS symbol4,\n        COALESCE(\n            symbol1,\n            symbol2,\n            symbol3,\n            symbol4\n        ) AS token_symbol\n    FROM\n        base_metadata\n    WHERE\n        function_signature = '0x95d89b41'\n        AND segmented_output [1] :: STRING IS NOT NULL\n),\ntoken_decimals AS (\n    SELECT\n        contract_address,\n        PUBLIC.udf_hex_to_int(\n            read_output :: STRING\n        ) AS token_decimals,\n        LENGTH(token_decimals) AS dec_length\n    FROM\n        base_metadata\n    WHERE\n        function_signature = '0x313ce567'\n        AND read_output IS NOT NULL\n        AND read_output <> '0x'\n),\ncontracts AS (\n    SELECT\n        contract_address,\n        MAX(_inserted_timestamp) AS _inserted_timestamp\n    FROM\n        base_metadata\n    GROUP BY\n        1\n)\nSELECT\n    c1.contract_address::STRING AS contract_address,\n    token_name,\n    COALESCE(\n        token_decimals,\n        0\n    ) AS token_decimals,\n    token_symbol,\n    _inserted_timestamp\nFROM\n    contracts c1\n    LEFT JOIN token_names\n    ON c1.contract_address = token_names.contract_address\n    LEFT JOIN token_symbols\n    ON c1.contract_address = token_symbols.contract_address\n    LEFT JOIN token_decimals\n    ON c1.contract_address = token_decimals.contract_address\n    AND dec_length < 3 qualify(ROW_NUMBER() over(PARTITION BY c1.contract_address\nORDER BY\n    _inserted_timestamp DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.silver.contracts"}, "test.polygon_models.not_null_silver__contracts_CONTRACT_ADDRESS.18b93ee6d5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CONTRACT_ADDRESS", "model": "{{ get_where_subquery(ref('silver__contracts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__contracts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__contracts_CONTRACT_ADDRESS"], "unique_id": "test.polygon_models.not_null_silver__contracts_CONTRACT_ADDRESS.18b93ee6d5", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__contracts_CONTRACT_ADDRESS.sql", "original_file_path": "models/silver/silver__contracts.yml", "name": "not_null_silver__contracts_CONTRACT_ADDRESS", "alias": "contracts_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__contracts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__contracts.yml/not_null_silver__contracts_CONTRACT_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669692229.003467, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.contracts\nwhere CONTRACT_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.contracts_CONTRACT_ADDRESS", "column_name": "CONTRACT_ADDRESS", "file_key_name": "models.silver__contracts"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_CONTRACT_ADDRESS__STRING__VARCHAR.a501d61489": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_79e266ec2fd856778031dafd154a4ff8\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "CONTRACT_ADDRESS", "model": "{{ get_where_subquery(ref('silver__contracts')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__contracts"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_79e266ec2fd856778031dafd154a4ff8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_CONTRACT_ADDRESS__STRING__VARCHAR"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_CONTRACT_ADDRESS__STRING__VARCHAR.a501d61489", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_79e266ec2fd856778031dafd154a4ff8.sql", "original_file_path": "models/silver/silver__contracts.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_CONTRACT_ADDRESS__STRING__VARCHAR", "alias": "contracts_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__contracts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__contracts.yml/dbt_expectations_expect_column_79e266ec2fd856778031dafd154a4ff8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_79e266ec2fd856778031dafd154a4ff8"}, "created_at": 1669692229.005036, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_DECIMALS' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_SYMBOL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CONTRACT_ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.contracts_CONTRACT_ADDRESS", "column_name": "CONTRACT_ADDRESS", "file_key_name": "models.silver__contracts"}, "test.polygon_models.not_null_silver__contracts__INSERTED_TIMESTAMP.5ad8bc1f2a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__contracts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__contracts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "not_null_silver", "fqn": ["polygon_models", "silver", "not_null_silver__contracts__INSERTED_TIMESTAMP"], "unique_id": "test.polygon_models.not_null_silver__contracts__INSERTED_TIMESTAMP.5ad8bc1f2a", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "not_null_silver__contracts__INSERTED_TIMESTAMP.sql", "original_file_path": "models/silver/silver__contracts.yml", "name": "not_null_silver__contracts__INSERTED_TIMESTAMP", "alias": "contracts", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__contracts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__contracts.yml/not_null_silver__contracts__INSERTED_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1669692229.015736, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom POLYGON_DEV.silver.contracts\nwhere _INSERTED_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.not_null_silver.contracts", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__contracts"}, "test.polygon_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__contracts__INSERTED_TIMESTAMP__day__2.c0b3d27a1b": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_73552841747b4301e60900c0091e1b95\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 2, "column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__contracts')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__contracts"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_73552841747b4301e60900c0091e1b95", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__contracts__INSERTED_TIMESTAMP__day__2"], "unique_id": "test.polygon_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__contracts__INSERTED_TIMESTAMP__day__2.c0b3d27a1b", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_row_va_73552841747b4301e60900c0091e1b95.sql", "original_file_path": "models/silver/silver__contracts.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__contracts__INSERTED_TIMESTAMP__day__2", "alias": "contracts", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__contracts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__contracts.yml/dbt_expectations_expect_row_va_73552841747b4301e60900c0091e1b95.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_73552841747b4301e60900c0091e1b95"}, "created_at": 1669692229.017099, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(_INSERTED_TIMESTAMP as TIMESTAMP)) as max_timestamp\n    from\n        POLYGON_DEV.silver.contracts\n    where\n        -- to exclude erroneous future dates\n        cast(_INSERTED_TIMESTAMP as TIMESTAMP) <= convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as TIMESTAMP))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -2,\n        convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        )\n\n as TIMESTAMP)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.contracts", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__contracts"}, "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.3d97d7eb14": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_80e37b5b393f4eef95602bb7dade2305\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "_INSERTED_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__contracts')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__contracts"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_80e37b5b393f4eef95602bb7dade2305", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["polygon_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts__INSERTED_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.3d97d7eb14", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_expectations_expect_column_80e37b5b393f4eef95602bb7dade2305.sql", "original_file_path": "models/silver/silver__contracts.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts__INSERTED_TIMESTAMP__TIMESTAMP_NTZ", "alias": "contracts", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__contracts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__contracts.yml/dbt_expectations_expect_column_80e37b5b393f4eef95602bb7dade2305.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_80e37b5b393f4eef95602bb7dade2305"}, "created_at": 1669692229.0502589, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('CONTRACT_ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_DECIMALS' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_SYMBOL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_INSERTED_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '_INSERTED_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.contracts", "column_name": "_INSERTED_TIMESTAMP", "file_key_name": "models.silver__contracts"}, "test.polygon_models.dbt_utils_unique_combination_of_columns_silver__contracts_CONTRACT_ADDRESS.f84f93870c": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_d45f83a6d0088763e3a9980994c193b4\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["CONTRACT_ADDRESS"], "model": "{{ get_where_subquery(ref('silver__contracts')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.polygon_models.silver__contracts"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_d45f83a6d0088763e3a9980994c193b4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "POLYGON_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["polygon_models", "silver", "dbt_utils_unique_combination_of_columns_silver__contracts_CONTRACT_ADDRESS"], "unique_id": "test.polygon_models.dbt_utils_unique_combination_of_columns_silver__contracts_CONTRACT_ADDRESS.f84f93870c", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "dbt_utils_unique_combination_o_d45f83a6d0088763e3a9980994c193b4.sql", "original_file_path": "models/silver/silver__contracts.yml", "name": "dbt_utils_unique_combination_of_columns_silver__contracts_CONTRACT_ADDRESS", "alias": "contracts_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__contracts"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/polygon_models/models/silver/silver__contracts.yml/dbt_utils_unique_combination_o_d45f83a6d0088763e3a9980994c193b4.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_d45f83a6d0088763e3a9980994c193b4"}, "created_at": 1669692229.055361, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        CONTRACT_ADDRESS\n    from POLYGON_DEV.silver.contracts\n    group by CONTRACT_ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "POLYGON_DEV.dbt_utils_unique_combination_of_columns_silver.contracts_CONTRACT_ADDRESS", "column_name": null, "file_key_name": "models.silver__contracts"}}, "sources": {"source.polygon_models.prod.polygon_blocks": {"fqn": ["polygon_models", "prod", "polygon_blocks"], "database": "chainwalkers", "schema": "prod", "unique_id": "source.polygon_models.prod.polygon_blocks", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "polygon_blocks", "source_name": "prod", "source_description": "", "loader": "", "identifier": "polygon_blocks", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "chainwalkers.prod.polygon_blocks", "created_at": 1669126490.3757749}, "source.polygon_models.prod.polygon_txs": {"fqn": ["polygon_models", "prod", "polygon_txs"], "database": "chainwalkers", "schema": "prod", "unique_id": "source.polygon_models.prod.polygon_txs", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "polygon_txs", "source_name": "prod", "source_description": "", "loader": "", "identifier": "polygon_txs", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "chainwalkers.prod.polygon_txs", "created_at": 1669126490.375904}, "source.polygon_models.crosschain.address_labels": {"fqn": ["polygon_models", "crosschain", "address_labels"], "database": "crosschain", "schema": "core", "unique_id": "source.polygon_models.crosschain.address_labels", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "address_labels", "source_name": "crosschain", "source_description": "", "loader": "", "identifier": "address_labels", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain.core.address_labels", "created_at": 1669126490.3760011}, "source.polygon_models.symbols_cross_tab.MARKET_ASSET_METADATA": {"fqn": ["polygon_models", "symbols_cross_tab", "MARKET_ASSET_METADATA"], "database": "FLIPSIDE_PROD_DB", "schema": "SILVER", "unique_id": "source.polygon_models.symbols_cross_tab.MARKET_ASSET_METADATA", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "MARKET_ASSET_METADATA", "source_name": "symbols_cross_tab", "source_description": "", "loader": "", "identifier": "MARKET_ASSET_METADATA", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "FLIPSIDE_PROD_DB.SILVER.MARKET_ASSET_METADATA", "created_at": 1669126490.376092}, "source.polygon_models.polygon_dex_pools.SUSHI_DIM_DEX_POOLS": {"fqn": ["polygon_models", "polygon_dex_pools", "SUSHI_DIM_DEX_POOLS"], "database": "polygon", "schema": "bronze", "unique_id": "source.polygon_models.polygon_dex_pools.SUSHI_DIM_DEX_POOLS", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "SUSHI_DIM_DEX_POOLS", "source_name": "polygon_dex_pools", "source_description": "", "loader": "", "identifier": "SUSHI_DIM_DEX_POOLS", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "polygon.bronze.SUSHI_DIM_DEX_POOLS", "created_at": 1669126490.376181}, "source.polygon_models.polygon_dex_pools.SUSHI_DIM_KASHI_PAIRS": {"fqn": ["polygon_models", "polygon_dex_pools", "SUSHI_DIM_KASHI_PAIRS"], "database": "polygon", "schema": "bronze", "unique_id": "source.polygon_models.polygon_dex_pools.SUSHI_DIM_KASHI_PAIRS", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "SUSHI_DIM_KASHI_PAIRS", "source_name": "polygon_dex_pools", "source_description": "", "loader": "", "identifier": "SUSHI_DIM_KASHI_PAIRS", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "polygon.bronze.SUSHI_DIM_KASHI_PAIRS", "created_at": 1669126490.37627}, "source.polygon_models.ethereum.fact_hourly_token_prices": {"fqn": ["polygon_models", "ethereum", "fact_hourly_token_prices"], "database": "ethereum", "schema": "core", "unique_id": "source.polygon_models.ethereum.fact_hourly_token_prices", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "fact_hourly_token_prices", "source_name": "ethereum", "source_description": "", "loader": "", "identifier": "fact_hourly_token_prices", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum.core.fact_hourly_token_prices", "created_at": 1669126490.37636}, "source.polygon_models.ethereum.DIM_CONTRACTS": {"fqn": ["polygon_models", "ethereum", "DIM_CONTRACTS"], "database": "ethereum", "schema": "core", "unique_id": "source.polygon_models.ethereum.DIM_CONTRACTS", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "DIM_CONTRACTS", "source_name": "ethereum", "source_description": "", "loader": "", "identifier": "DIM_CONTRACTS", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum.core.DIM_CONTRACTS", "created_at": 1669126490.3766432}, "source.polygon_models.ethereum.DIM_DEX_LIQUIDITY_POOLS": {"fqn": ["polygon_models", "ethereum", "DIM_DEX_LIQUIDITY_POOLS"], "database": "ethereum", "schema": "core", "unique_id": "source.polygon_models.ethereum.DIM_DEX_LIQUIDITY_POOLS", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "DIM_DEX_LIQUIDITY_POOLS", "source_name": "ethereum", "source_description": "", "loader": "", "identifier": "DIM_DEX_LIQUIDITY_POOLS", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum.core.DIM_DEX_LIQUIDITY_POOLS", "created_at": 1669126490.376736}, "source.polygon_models.bronze_streamline.blocks": {"fqn": ["polygon_models", "bronze_streamline", "blocks"], "database": "streamline", "schema": "POLYGON", "unique_id": "source.polygon_models.bronze_streamline.blocks", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "blocks", "source_name": "bronze_streamline", "source_description": "", "loader": "", "identifier": "blocks", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "streamline.POLYGON.blocks", "created_at": 1669126490.376826}, "source.polygon_models.bronze_streamline.transactions": {"fqn": ["polygon_models", "bronze_streamline", "transactions"], "database": "streamline", "schema": "POLYGON", "unique_id": "source.polygon_models.bronze_streamline.transactions", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "transactions", "source_name": "bronze_streamline", "source_description": "", "loader": "", "identifier": "transactions", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "streamline.POLYGON.transactions", "created_at": 1669126490.3769128}, "source.polygon_models.bronze_api.contract_abis": {"fqn": ["polygon_models", "bronze_api", "contract_abis"], "database": "polygon", "schema": "bronze_api", "unique_id": "source.polygon_models.bronze_api.contract_abis", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "contract_abis", "source_name": "bronze_api", "source_description": "", "loader": "", "identifier": "contract_abis", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "polygon.bronze_api.contract_abis", "created_at": 1669692076.616576}, "source.polygon_models.bronze_api.token_reads": {"fqn": ["polygon_models", "bronze_api", "token_reads"], "database": "polygon", "schema": "bronze_api", "unique_id": "source.polygon_models.bronze_api.token_reads", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "token_reads", "source_name": "bronze_api", "source_description": "", "loader": "", "identifier": "token_reads", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "polygon.bronze_api.token_reads", "created_at": 1669692076.616719}}, "macros": {"macro.polygon_models.db_comment": {"unique_id": "macro.polygon_models.db_comment", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "macros/db_comment.sql", "original_file_path": "macros/db_comment.sql", "name": "db_comment", "macro_sql": "{% macro db_comment() %}\n    {% set query %}\nSELECT\n    TO_DATE(MIN(block_timestamp))\nFROM\n    silver.blocks {% endset %}\n    {% set results = run_query(query) %}\n    {% set results_list = results.columns [0].values() [0].strftime('%Y-%m-%d') %}\n    {% set sql %}\n    COMMENT\n    ON database polygon IS 'Lite Mode dataset with recent data only. Min block_timestamp: {{ results_list }} \ud83c\udf31 ' {% endset %}\n    {% do run_query(sql) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.277101}, "macro.polygon_models.create_sps": {"unique_id": "macro.polygon_models.create_sps", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "macros/create_sps.sql", "original_file_path": "macros/create_sps.sql", "name": "create_sps", "macro_sql": "{% macro create_sps() %}\n    {% if var(\"UPDATE_UDFS_AND_SPS\") %}\n        {% if target.database == 'POLYGON' %}\n            CREATE schema IF NOT EXISTS _internal;\n    {{ sp_create_prod_clone('_internal') }};\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.polygon_models.sp_create_prod_clone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.2779179}, "macro.polygon_models.if_data_call_function": {"unique_id": "macro.polygon_models.if_data_call_function", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "macros/utils.sql", "original_file_path": "macros/utils.sql", "name": "if_data_call_function", "macro_sql": "{% macro if_data_call_function(\n        func,\n        target\n    ) %}\n    {% if var(\n            \"STREAMLINE_INVOKE_STREAMS\"\n        ) %}\n        {% if execute %}\n            {{ log(\n                \"Running macro `if_data_call_function`: Calling udf \" ~ func ~ \" on \" ~ target,\n                True\n            ) }}\n        {% endif %}\n    SELECT\n        {{ func }}\n    WHERE\n        EXISTS(\n            SELECT\n                1\n            FROM\n                {{ target }}\n            LIMIT\n                1\n        )\n    {% else %}\n        {% if execute %}\n            {{ log(\n                \"Running macro `if_data_call_function`: NOOP\",\n                False\n            ) }}\n        {% endif %}\n    SELECT\n        NULL\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.279538}, "macro.polygon_models.generate_schema_name": {"unique_id": "macro.polygon_models.generate_schema_name", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name[0] | trim }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.28097}, "macro.polygon_models.generate_alias_name": {"unique_id": "macro.polygon_models.generate_alias_name", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name[1] | trim }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.2817159}, "macro.polygon_models.create_js_hex_to_int": {"unique_id": "macro.polygon_models.create_js_hex_to_int", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "macros/js_hextoint.sql", "original_file_path": "macros/js_hextoint.sql", "name": "create_js_hex_to_int", "macro_sql": "{% macro create_js_hex_to_int() %}\n    CREATE\n    OR REPLACE FUNCTION {{ target.schema }}.js_hex_to_int (\n        s STRING\n    ) returns DOUBLE LANGUAGE javascript AS 'if (S !== null) { yourNumber = parseInt(S, 16); } return yourNumber'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.282274}, "macro.polygon_models.run_sp_create_prod_clone": {"unique_id": "macro.polygon_models.run_sp_create_prod_clone", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "macros/run_sp_create_prod_clone.sql", "original_file_path": "macros/run_sp_create_prod_clone.sql", "name": "run_sp_create_prod_clone", "macro_sql": "{% macro run_sp_create_prod_clone() %}\n    {% set clone_query %}\n    call polygon._internal.create_prod_clone(\n        'polygon',\n        'polygon_dev',\n        'internal_dev'\n    );\n{% endset %}\n    {% do run_query(clone_query) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.282943}, "macro.polygon_models.sp_create_prod_clone": {"unique_id": "macro.polygon_models.sp_create_prod_clone", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "macros/sp_create_prod_clone.sql", "original_file_path": "macros/sp_create_prod_clone.sql", "name": "sp_create_prod_clone", "macro_sql": "{% macro sp_create_prod_clone(target_schema) -%}\n\ncreate or replace procedure {{ target_schema }}.create_prod_clone(source_db_name string, destination_db_name string, role_name string)\nreturns boolean \nlanguage javascript\nexecute as caller\nas\n$$\n    snowflake.execute({sqlText: `BEGIN TRANSACTION;`});\n    try {\n        snowflake.execute({sqlText: `DROP DATABASE IF EXISTS ${DESTINATION_DB_NAME}`});\n        snowflake.execute({sqlText: `CREATE DATABASE ${DESTINATION_DB_NAME} CLONE ${SOURCE_DB_NAME}`});\n        snowflake.execute({sqlText: `DROP SCHEMA ${DESTINATION_DB_NAME}._INTERNAL`}); /* this only needs to be in prod */\n\n        var existing_schemas = snowflake.execute({sqlText: `SELECT table_schema\n            FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.TABLE_PRIVILEGES\n            WHERE grantor IS NOT NULL\n            GROUP BY 1\n            UNION\n            SELECT 'PUBLIC';`});\n\n        while (existing_schemas.next()) {\n            var schema = existing_schemas.getColumnValue(1);\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON SCHEMA ${DESTINATION_DB_NAME}.${schema} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`});\n            snowflake.execute({sqlText: `REVOKE OWNERSHIP ON FUTURE FUNCTIONS IN SCHEMA ${DESTINATION_DB_NAME}.${schema} FROM ROLE DBT_CLOUD_POLYGON`});\n            snowflake.execute({sqlText: `REVOKE OWNERSHIP ON FUTURE PROCEDURES IN SCHEMA ${DESTINATION_DB_NAME}.${schema} FROM ROLE DBT_CLOUD_POLYGON`});\n            snowflake.execute({sqlText: `REVOKE OWNERSHIP ON FUTURE TABLES IN SCHEMA ${DESTINATION_DB_NAME}.${schema} FROM ROLE DBT_CLOUD_POLYGON`});\n            snowflake.execute({sqlText: `REVOKE OWNERSHIP ON FUTURE VIEWS IN SCHEMA ${DESTINATION_DB_NAME}.${schema} FROM ROLE DBT_CLOUD_POLYGON`});\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE FUNCTIONS IN SCHEMA ${DESTINATION_DB_NAME}.${schema} TO ROLE ${ROLE_NAME};`});\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE PROCEDURES IN SCHEMA ${DESTINATION_DB_NAME}.${schema} TO ROLE ${ROLE_NAME};`});\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE TABLES IN SCHEMA ${DESTINATION_DB_NAME}.${schema} TO ROLE ${ROLE_NAME};`});\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUTURE VIEWS IN SCHEMA ${DESTINATION_DB_NAME}.${schema} TO ROLE ${ROLE_NAME};`});\n        }\n\n        var existing_tables = snowflake.execute({sqlText: `SELECT table_schema, table_name\n            FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.TABLE_PRIVILEGES\n            WHERE grantor IS NOT NULL\n            GROUP BY 1,2;`});\n\n        while (existing_tables.next()) {\n            var schema = existing_tables.getColumnValue(1);\n            var table_name = existing_tables.getColumnValue(2);\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON TABLE ${DESTINATION_DB_NAME}.${schema}.${table_name} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`});\n        }\n\n        var existing_functions = snowflake.execute({sqlText: `SELECT function_schema, function_name, concat('(',array_to_string(regexp_substr_all(argument_signature, 'VARCHAR|NUMBER|FLOAT|ARRAY|VARIANT|OBJECT|DOUBLE'),','),')') as argument_signature\n            FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.FUNCTIONS;`});\n\n        while (existing_functions.next()) {\n            var schema = existing_functions.getColumnValue(1);\n            var function_name = existing_functions.getColumnValue(2);\n            var argument_signature = existing_functions.getColumnValue(3);\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUNCTION ${DESTINATION_DB_NAME}.${schema}.${function_name}${argument_signature} to role ${ROLE_NAME} REVOKE CURRENT GRANTS;`});\n        }\n\n        var existing_procedures = snowflake.execute({sqlText: `SELECT procedure_schema, procedure_name, concat('(',array_to_string(regexp_substr_all(argument_signature, 'VARCHAR|NUMBER|FLOAT|ARRAY|VARIANT|OBJECT|DOUBLE'),','),')') as argument_signature\n            FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.PROCEDURES;`});\n\n        while (existing_procedures.next()) {\n            var schema = existing_procedures.getColumnValue(1);\n            var procedure_name = existing_procedures.getColumnValue(2);\n            var argument_signature = existing_procedures.getColumnValue(3);\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON PROCEDURE ${DESTINATION_DB_NAME}.${schema}.${procedure_name}${argument_signature} to role ${ROLE_NAME} REVOKE CURRENT GRANTS;`});\n        }\n\n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`})\n        snowflake.execute({sqlText: `COMMIT;`});\n    } catch (err) {\n        snowflake.execute({sqlText: `ROLLBACK;`});\n        throw(err);\n    }\n    \n    return true\n$$\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.2864041}, "macro.polygon_models.create_udf_hex_to_int": {"unique_id": "macro.polygon_models.create_udf_hex_to_int", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "macros/python/udfs.sql", "original_file_path": "macros/python/udfs.sql", "name": "create_udf_hex_to_int", "macro_sql": "{% macro create_udf_hex_to_int(schema) %}\ncreate or replace function {{ schema }}.udf_hex_to_int(hex string)\nreturns string\nlanguage python\nruntime_version = '3.8'\nhandler = 'hex_to_int'\nas\n$$\ndef hex_to_int(hex) -> str:\n  \"\"\"\n  Converts hex (of any size) to int (as a string). Snowflake and java script can only handle up to 64-bit (38 digits of precision)\n  select hex_to_int('200000000000000000000000000000211');\n  >> 680564733841876926926749214863536423441\n  select hex_to_int('0x200000000000000000000000000000211');\n  >> 680564733841876926926749214863536423441\n  select hex_to_int(NULL);\n  >> NULL\n  \"\"\"\n  return str(int(hex, 16)) if hex else None\n$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.2869382}, "macro.polygon_models.tx_gaps": {"unique_id": "macro.polygon_models.tx_gaps", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "macros/tests/tx_gaps.sql", "original_file_path": "macros/tests/tx_gaps.sql", "name": "tx_gaps", "macro_sql": "{% macro tx_gaps(\n        model\n    ) %}\n    WITH block_base AS (\n        SELECT\n            block_number,\n            tx_count\n        FROM\n            {{ ref('silver__blocks') }}\n    ),\n    model_name AS (\n        SELECT\n            block_number,\n            COUNT(\n                DISTINCT tx_hash\n            ) AS model_tx_count\n        FROM\n            {{ model }}\n        GROUP BY\n            block_number\n    )\nSELECT\n    block_base.block_number,\n    tx_count,\n    model_name.block_number AS model_block_number,\n    model_tx_count\nFROM\n    block_base\n    LEFT JOIN model_name\n    ON block_base.block_number = model_name.block_number\nWHERE\n    tx_count <> model_tx_count\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.287616}, "macro.polygon_models.test_sequence_gaps": {"unique_id": "macro.polygon_models.test_sequence_gaps", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "macros/tests/sequence_gaps.sql", "original_file_path": "macros/tests/sequence_gaps.sql", "name": "test_sequence_gaps", "macro_sql": "{% test sequence_gaps(\n    model,\n    partition_by,\n    column_name\n) %}\n{%- set partition_sql = partition_by | join(\", \") -%}\n{%- set previous_column = \"prev_\" ~ column_name -%}\nWITH source AS (\n    SELECT\n        {{ partition_sql + \",\" if partition_sql }}\n        {{ column_name }},\n        LAG(\n            {{ column_name }},\n            1\n        ) over (\n            {{ \"PARTITION BY \" ~ partition_sql if partition_sql }}\n            ORDER BY\n                {{ column_name }} ASC\n        ) AS {{ previous_column }}\n    FROM\n        {{ model }}\n)\nSELECT\n    {{ partition_sql + \",\" if partition_sql }}\n    {{ previous_column }},\n    {{ column_name }},\n    {{ column_name }} - {{ previous_column }}\n    - 1 AS gap\nFROM\n    source\nWHERE\n    {{ column_name }} - {{ previous_column }} <> 1\nORDER BY\n    gap DESC {% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.289461}, "macro.polygon_models.create_blocks_realtime": {"unique_id": "macro.polygon_models.create_blocks_realtime", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "macros/streamline/blocks_realtime.sql", "original_file_path": "macros/streamline/blocks_realtime.sql", "name": "create_blocks_realtime", "macro_sql": "{% macro create_blocks_realtime() %}\n    {% set sql %}\n    CREATE\n    OR REPLACE PROCEDURE streamline.blocks_realtime() returns variant LANGUAGE SQL AS $$\nDECLARE\n    RESULT variant;\nrow_cnt INTEGER;\nBEGIN\n    row_cnt:= (\n        SELECT\n            COUNT(1)\n        FROM\n            {{ ref('streamline__blocks_realtime') }}\n    );\nif (\n        row_cnt > 0\n    ) THEN RESULT:= (\n        SELECT\n            streamline.udf_get_blocks()\n    );\n    ELSE RESULT:= NULL;\nEND if;\nRETURN RESULT;\nEND;$$ {% endset %}\n{% do run_query(sql) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.2902179}, "macro.polygon_models.create_udtf_get_base_table": {"unique_id": "macro.polygon_models.create_udtf_get_base_table", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "macros/streamline/get_base_table_udft.sql", "original_file_path": "macros/streamline/get_base_table_udft.sql", "name": "create_udtf_get_base_table", "macro_sql": "{% macro create_udtf_get_base_table(schema) %}\ncreate or replace function {{ schema }}.udtf_get_base_table(max_height integer)\nreturns table (height number)\nas\n$$\n    with base as (\n        select\n            row_number() over (\n                order by\n                    seq4()\n            ) as id\n        from\n            table(generator(rowcount => 100000000))\n    )\nselect\n    id as height\nfrom\n    base\nwhere\n    id <= max_height\n$$\n;\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.29087}, "macro.polygon_models.create_blocks_history": {"unique_id": "macro.polygon_models.create_blocks_history", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "macros/streamline/blocks_history.sql", "original_file_path": "macros/streamline/blocks_history.sql", "name": "create_blocks_history", "macro_sql": "{% macro create_blocks_history() %}\n    {% set sql %}\n    CREATE\n    OR REPLACE PROCEDURE streamline.blocks_history() returns variant LANGUAGE SQL AS $$\nDECLARE\n    RESULT variant;\nrow_cnt INTEGER;\nBEGIN\n    row_cnt:= (\n        SELECT\n            COUNT(1)\n        FROM\n            {{ ref('streamline__blocks_history') }}\n    );\nif (\n        row_cnt > 0\n    ) THEN RESULT:= (\n        SELECT\n            streamline.udf_get_blocks()\n    );\n    ELSE RESULT:= NULL;\nEND if;\nRETURN RESULT;\nEND;$$ {% endset %}\n{% do run_query(sql) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.292216}, "macro.polygon_models.create_aws_polygon_api": {"unique_id": "macro.polygon_models.create_aws_polygon_api", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "macros/streamline/api_integrations.sql", "original_file_path": "macros/streamline/api_integrations.sql", "name": "create_aws_polygon_api", "macro_sql": "{% macro create_aws_polygon_api() %}\n    {% if target.name == \"prod\" %}\n        {% set sql %}\n        CREATE api integration IF NOT EXISTS aws_polygon_api api_provider = aws_api_gateway api_aws_role_arn = 'arn:aws:iam::490041342817:role/snowflake-api-polygon' api_allowed_prefixes = (\n            'https://088pv40k78.execute-api.us-east-1.amazonaws.com/prod/',\n            'https://ug2z7nx4bi.execute-api.us-east-1.amazonaws.com/dev/'\n        ) enabled = TRUE;\n{% endset %}\n        {% do run_query(sql) %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.295222}, "macro.dbt_snowflake.snowflake__get_catalog": {"unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.298156}, "macro.dbt_snowflake.snowflake__create_table_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, sql) -%}\n  {%- set transient = config.get('transient', default=true) -%}\n  {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n  {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n  {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n    {%- set cluster_by_keys = [cluster_by_keys] -%}\n  {%- endif -%}\n  {%- if cluster_by_keys is not none -%}\n    {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n  {% else %}\n    {%- set cluster_by_string = none -%}\n  {%- endif -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n      create or replace {% if temporary -%}\n        temporary\n      {%- elif transient -%}\n        transient\n      {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n      (\n        {%- if cluster_by_string is not none -%}\n          select * from(\n            {{ sql }}\n            ) order by ({{ cluster_by_string }})\n        {%- else -%}\n          {{ sql }}\n        {%- endif %}\n      );\n    {% if cluster_by_string is not none and not temporary -%}\n      alter table {{relation}} cluster by ({{cluster_by_string}});\n    {%- endif -%}\n    {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n      alter table {{relation}} resume recluster;\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.319594}, "macro.dbt_snowflake.get_column_comment_sql": {"unique_id": "macro.dbt_snowflake.get_column_comment_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.320993}, "macro.dbt_snowflake.get_persist_docs_column_list": {"unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.321646}, "macro.dbt_snowflake.snowflake__create_view_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.3231869}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.324866}, "macro.dbt_snowflake.snowflake__list_schemas": {"unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.326429}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.327543}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.328351}, "macro.dbt_snowflake.snowflake__current_timestamp": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.3286002}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.3290272}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.329289}, "macro.dbt_snowflake.snowflake__rename_relation": {"unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.329708}, "macro.dbt_snowflake.snowflake__alter_column_type": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.3302789}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.330724}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.331809}, "macro.dbt_snowflake.get_current_query_tag": {"unique_id": "macro.dbt_snowflake.get_current_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.33218}, "macro.dbt_snowflake.set_query_tag": {"unique_id": "macro.dbt_snowflake.set_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.332515}, "macro.dbt_snowflake.snowflake__set_query_tag": {"unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.333416}, "macro.dbt_snowflake.unset_query_tag": {"unique_id": "macro.dbt_snowflake.unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.3338308}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.334784}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.337057}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.337595}, "macro.dbt_snowflake.snowflake__truncate_relation": {"unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.33816}, "macro.dbt_snowflake.snowflake__copy_grants": {"unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.3385432}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.338748}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.3414552}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.342036}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.34253}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.346866}, "macro.dbt_snowflake.materialization_seed_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.347662}, "macro.dbt_snowflake.materialization_view_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.349233}, "macro.dbt_snowflake.materialization_table_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake' %}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  --build model\n  {% call statement('main') -%}\n    {{ create_table_as(false, target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.352565}, "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_snowflake_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'delete+insert'\n  {%- endset %}\n  {% if strategy not in ['merge', 'delete+insert'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.355077}, "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_get_incremental_sql", "macro_sql": "{% macro dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  {% if strategy == 'merge' %}\n    {% do return(get_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% elif strategy == 'delete+insert' %}\n    {% do return(get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% else %}\n    {% do exceptions.raise_compiler_error('invalid strategy: ' ~ strategy) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql", "macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.35608}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake' -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {% set  grant_config = config.get('grants') %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_snowflake_validate_get_incremental_strategy(config) -%}\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.361058}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.3622139}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.362839}, "macro.dbt_snowflake.snowflake__right": {"unique_id": "macro.dbt_snowflake.snowflake__right", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.3633978}, "macro.dbt_snowflake.snowflake__safe_cast": {"unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.363853}, "macro.dbt_snowflake.snowflake__bool_or": {"unique_id": "macro.dbt_snowflake.snowflake__bool_or", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.364238}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.366184}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.3665578}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.366831}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.367094}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.367362}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.368145}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.3689039}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.369952}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.371211}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.371926}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.377901}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.3783538}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.378874}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.379219}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.379433}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.3809159}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.3813848}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.3820438}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_sql'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.3852632}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.388281}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.3941178}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.3946948}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.395015}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.3951879}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.395498}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.3957372}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.3961868}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.3980181}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.398412}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.398885}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.399682}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.410597}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.4156291}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.416843}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.417463}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.4184608}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.419374}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.421113}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.4222772}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.4234738}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.431485}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.43471}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.435353}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n        {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.437234}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.437993}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.439681}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.441258}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, temp_relation, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.450746}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.458396}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.461329}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.464413}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.465952}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.471461}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.472967}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.473415}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.473841}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.474792}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.479912}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.480682}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.48113}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.4848661}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.4858618}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.48629}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.486777}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.4874701}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.493361}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.50036}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.502342}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.502997}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.5041459}, "macro.dbt.get_csv_sql": {"unique_id": "macro.dbt.get_csv_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.5045362}, "macro.dbt.default__get_csv_sql": {"unique_id": "macro.dbt.default__get_csv_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.504813}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.505087}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.505315}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.505933}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.506185}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.507145}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.507482}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.509919}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.510866}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.511306}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.512369}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.5128598}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.513393}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.5142138}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.514697}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.515415}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.5162072}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.517128}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.51881}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.521299}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.5224378}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.522995}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.525814}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.528678}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.530238}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.530677}, "macro.dbt.except": {"unique_id": "macro.dbt.except", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.531344}, "macro.dbt.default__except": {"unique_id": "macro.dbt.default__except", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.531487}, "macro.dbt.replace": {"unique_id": "macro.dbt.replace", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.53224}, "macro.dbt.default__replace": {"unique_id": "macro.dbt.default__replace", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.532556}, "macro.dbt.concat": {"unique_id": "macro.dbt.concat", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.53314}, "macro.dbt.default__concat": {"unique_id": "macro.dbt.default__concat", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.533376}, "macro.dbt.length": {"unique_id": "macro.dbt.length", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.533968}, "macro.dbt.default__length": {"unique_id": "macro.dbt.default__length", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.534174}, "macro.dbt.dateadd": {"unique_id": "macro.dbt.dateadd", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.535145}, "macro.dbt.default__dateadd": {"unique_id": "macro.dbt.default__dateadd", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.535477}, "macro.dbt.intersect": {"unique_id": "macro.dbt.intersect", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.536181}, "macro.dbt.default__intersect": {"unique_id": "macro.dbt.default__intersect", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.53636}, "macro.dbt.escape_single_quotes": {"unique_id": "macro.dbt.escape_single_quotes", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.537065}, "macro.dbt.default__escape_single_quotes": {"unique_id": "macro.dbt.default__escape_single_quotes", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.5374432}, "macro.dbt.right": {"unique_id": "macro.dbt.right", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.5382679}, "macro.dbt.default__right": {"unique_id": "macro.dbt.default__right", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.538595}, "macro.dbt.listagg": {"unique_id": "macro.dbt.listagg", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.540214}, "macro.dbt.default__listagg": {"unique_id": "macro.dbt.default__listagg", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.5412061}, "macro.dbt.datediff": {"unique_id": "macro.dbt.datediff", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.542042}, "macro.dbt.default__datediff": {"unique_id": "macro.dbt.default__datediff", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.542355}, "macro.dbt.safe_cast": {"unique_id": "macro.dbt.safe_cast", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.5432441}, "macro.dbt.default__safe_cast": {"unique_id": "macro.dbt.default__safe_cast", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.543518}, "macro.dbt.hash": {"unique_id": "macro.dbt.hash", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.5441248}, "macro.dbt.default__hash": {"unique_id": "macro.dbt.default__hash", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.54443}, "macro.dbt.cast_bool_to_text": {"unique_id": "macro.dbt.cast_bool_to_text", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.545003}, "macro.dbt.default__cast_bool_to_text": {"unique_id": "macro.dbt.default__cast_bool_to_text", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.545302}, "macro.dbt.any_value": {"unique_id": "macro.dbt.any_value", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.5459158}, "macro.dbt.default__any_value": {"unique_id": "macro.dbt.default__any_value", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.546122}, "macro.dbt.position": {"unique_id": "macro.dbt.position", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.5467782}, "macro.dbt.default__position": {"unique_id": "macro.dbt.default__position", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.547039}, "macro.dbt.string_literal": {"unique_id": "macro.dbt.string_literal", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.54762}, "macro.dbt.default__string_literal": {"unique_id": "macro.dbt.default__string_literal", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.54782}, "macro.dbt.type_string": {"unique_id": "macro.dbt.type_string", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.549259}, "macro.dbt.default__type_string": {"unique_id": "macro.dbt.default__type_string", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.5496588}, "macro.dbt.type_timestamp": {"unique_id": "macro.dbt.type_timestamp", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.550217}, "macro.dbt.default__type_timestamp": {"unique_id": "macro.dbt.default__type_timestamp", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.55058}, "macro.dbt.type_float": {"unique_id": "macro.dbt.type_float", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.5511942}, "macro.dbt.default__type_float": {"unique_id": "macro.dbt.default__type_float", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.5516858}, "macro.dbt.type_numeric": {"unique_id": "macro.dbt.type_numeric", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.5520132}, "macro.dbt.default__type_numeric": {"unique_id": "macro.dbt.default__type_numeric", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.552352}, "macro.dbt.type_bigint": {"unique_id": "macro.dbt.type_bigint", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.5526872}, "macro.dbt.default__type_bigint": {"unique_id": "macro.dbt.default__type_bigint", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.55306}, "macro.dbt.type_int": {"unique_id": "macro.dbt.type_int", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.553438}, "macro.dbt.default__type_int": {"unique_id": "macro.dbt.default__type_int", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "name": "default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.553819}, "macro.dbt.bool_or": {"unique_id": "macro.dbt.bool_or", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.554688}, "macro.dbt.default__bool_or": {"unique_id": "macro.dbt.default__bool_or", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.554898}, "macro.dbt.last_day": {"unique_id": "macro.dbt.last_day", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.555704}, "macro.dbt.default_last_day": {"unique_id": "macro.dbt.default_last_day", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.556193}, "macro.dbt.default__last_day": {"unique_id": "macro.dbt.default__last_day", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.5564659}, "macro.dbt.split_part": {"unique_id": "macro.dbt.split_part", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.55742}, "macro.dbt.default__split_part": {"unique_id": "macro.dbt.default__split_part", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.557732}, "macro.dbt._split_part_negative": {"unique_id": "macro.dbt._split_part_negative", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.558146}, "macro.dbt.date_trunc": {"unique_id": "macro.dbt.date_trunc", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.5587788}, "macro.dbt.default__date_trunc": {"unique_id": "macro.dbt.default__date_trunc", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.559021}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.559772}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.5601249}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.560422}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.560905}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.5622349}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.562548}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.562905}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.5637162}, "macro.dbt.make_intermediate_relation": {"unique_id": "macro.dbt.make_intermediate_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.568702}, "macro.dbt.default__make_intermediate_relation": {"unique_id": "macro.dbt.default__make_intermediate_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.569029}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.569442}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.569983}, "macro.dbt.make_backup_relation": {"unique_id": "macro.dbt.make_backup_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.5704331}, "macro.dbt.default__make_backup_relation": {"unique_id": "macro.dbt.default__make_backup_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.5710158}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.571487}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.571959}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.5723362}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.572719}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.573258}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.573892}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.574495}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.575671}, "macro.dbt.load_cached_relation": {"unique_id": "macro.dbt.load_cached_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.576107}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.5763788}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.57678}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.577792}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.578071}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.578491}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.5792818}, "macro.dbt.copy_grants": {"unique_id": "macro.dbt.copy_grants", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.5818582}, "macro.dbt.default__copy_grants": {"unique_id": "macro.dbt.default__copy_grants", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.582082}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.582391}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.582597}, "macro.dbt.should_revoke": {"unique_id": "macro.dbt.should_revoke", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.583234}, "macro.dbt.get_show_grant_sql": {"unique_id": "macro.dbt.get_show_grant_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.583698}, "macro.dbt.default__get_show_grant_sql": {"unique_id": "macro.dbt.default__get_show_grant_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.5839329}, "macro.dbt.get_grant_sql": {"unique_id": "macro.dbt.get_grant_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.584529}, "macro.dbt.default__get_grant_sql": {"unique_id": "macro.dbt.default__get_grant_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.584973}, "macro.dbt.get_revoke_sql": {"unique_id": "macro.dbt.get_revoke_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.585502}, "macro.dbt.default__get_revoke_sql": {"unique_id": "macro.dbt.default__get_revoke_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.5859299}, "macro.dbt.get_dcl_statement_list": {"unique_id": "macro.dbt.get_dcl_statement_list", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.5863621}, "macro.dbt.default__get_dcl_statement_list": {"unique_id": "macro.dbt.default__get_dcl_statement_list", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.5879319}, "macro.dbt.call_dcl_statements": {"unique_id": "macro.dbt.call_dcl_statements", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.5883641}, "macro.dbt.default__call_dcl_statements": {"unique_id": "macro.dbt.default__call_dcl_statements", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.588833}, "macro.dbt.apply_grants": {"unique_id": "macro.dbt.apply_grants", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.5892549}, "macro.dbt.default__apply_grants": {"unique_id": "macro.dbt.default__apply_grants", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "name": "default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.591486}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.592866}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.593193}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.5935721}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.5938802}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.594572}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.595867}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.598505}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.59904}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.599427}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.59973}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.600065}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.600522}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.600897}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.6014662}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.601838}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.60213}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.6052392}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.6057532}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.606862}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.607316}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.608074}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.608513}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.609768}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.610244}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.611755}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.6129851}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.613426}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.61396}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.6145332}, "macro.dbt_utils.cast_array_to_string": {"unique_id": "macro.dbt_utils.cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "cast_array_to_string", "macro_sql": "{% macro cast_array_to_string(array) %}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('cast_array_to_string', model.package_name, model.name) %}\n  {{ adapter.dispatch('cast_array_to_string', 'dbt_utils') (array) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__cast_array_to_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.615647}, "macro.dbt_utils.default__cast_array_to_string": {"unique_id": "macro.dbt_utils.default__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "default__cast_array_to_string", "macro_sql": "{% macro default__cast_array_to_string(array) %}\n    cast({{ array }} as {{ type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.615933}, "macro.dbt_utils.postgres__cast_array_to_string": {"unique_id": "macro.dbt_utils.postgres__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "postgres__cast_array_to_string", "macro_sql": "{% macro postgres__cast_array_to_string(array) %}\n    {%- set array_as_string -%}cast({{ array }} as {{ type_string() }}){%- endset -%}\n    {{ replace(replace(array_as_string,\"'}'\",\"']'\"),\"'{'\",\"'['\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.6164658}, "macro.dbt_utils.redshift__cast_array_to_string": {"unique_id": "macro.dbt_utils.redshift__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "redshift__cast_array_to_string", "macro_sql": "{% macro redshift__cast_array_to_string(array) %}\n    cast({{ array }} as {{ type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.616875}, "macro.dbt_utils.bigquery__cast_array_to_string": {"unique_id": "macro.dbt_utils.bigquery__cast_array_to_string", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_array_to_string.sql", "original_file_path": "macros/cross_db_utils/cast_array_to_string.sql", "name": "bigquery__cast_array_to_string", "macro_sql": "{% macro bigquery__cast_array_to_string(array) %}\n    '['||(select string_agg(cast(element as string), ',') from unnest({{ array }}) element)||']'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.6171992}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('current_timestamp', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.618931}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.6191812}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.6193368}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.619482}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('current_timestamp_in_utc', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.snowflake__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.6203132}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{ dbt_utils.current_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.620592}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{ dbt_utils.current_timestamp() }})::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.621035}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.621309}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.621568}, "macro.dbt_utils.array_concat": {"unique_id": "macro.dbt_utils.array_concat", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('array_concat', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('array_concat', 'dbt_utils')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.6227012}, "macro.dbt_utils.default__array_concat": {"unique_id": "macro.dbt_utils.default__array_concat", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.622962}, "macro.dbt_utils.bigquery__array_concat": {"unique_id": "macro.dbt_utils.bigquery__array_concat", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.623214}, "macro.dbt_utils.redshift__array_concat": {"unique_id": "macro.dbt_utils.redshift__array_concat", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_concat.sql", "original_file_path": "macros/cross_db_utils/array_concat.sql", "name": "redshift__array_concat", "macro_sql": "{% macro redshift__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.623459}, "macro.dbt_utils.array_construct": {"unique_id": "macro.dbt_utils.array_construct", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs = [], data_type = api.Column.translate_type('integer')) -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('array_construct', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('array_construct', 'dbt_utils')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.624892}, "macro.dbt_utils.default__array_construct": {"unique_id": "macro.dbt_utils.default__array_construct", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.625609}, "macro.dbt_utils.snowflake__array_construct": {"unique_id": "macro.dbt_utils.snowflake__array_construct", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.625904}, "macro.dbt_utils.redshift__array_construct": {"unique_id": "macro.dbt_utils.redshift__array_construct", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "redshift__array_construct", "macro_sql": "{% macro redshift__array_construct(inputs, data_type) -%}\n    array( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.626174}, "macro.dbt_utils.bigquery__array_construct": {"unique_id": "macro.dbt_utils.bigquery__array_construct", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_construct.sql", "original_file_path": "macros/cross_db_utils/array_construct.sql", "name": "bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    [ {{ inputs|join(' , ') }} ]\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.626444}, "macro.dbt_utils.array_append": {"unique_id": "macro.dbt_utils.array_append", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('array_append', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('array_append', 'dbt_utils')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.627607}, "macro.dbt_utils.default__array_append": {"unique_id": "macro.dbt_utils.default__array_append", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.627863}, "macro.dbt_utils.bigquery__array_append": {"unique_id": "macro.dbt_utils.bigquery__array_append", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.628234}, "macro.dbt_utils.redshift__array_append": {"unique_id": "macro.dbt_utils.redshift__array_append", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/array_append.sql", "original_file_path": "macros/cross_db_utils/array_append.sql", "name": "redshift__array_append", "macro_sql": "{% macro redshift__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.6285949}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/except.sql", "original_file_path": "macros/cross_db_utils/deprecated/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.629627}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/except.sql", "original_file_path": "macros/cross_db_utils/deprecated/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n  {% do dbt_utils.xdb_deprecation_warning('except', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.except", "macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.630265}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/replace.sql", "original_file_path": "macros/cross_db_utils/deprecated/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.63134}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/replace.sql", "original_file_path": "macros/cross_db_utils/deprecated/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) -%}\n  {% do dbt_utils.xdb_deprecation_warning('replace', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.replace", "macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.63259}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/concat.sql", "original_file_path": "macros/cross_db_utils/deprecated/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.633386}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/concat.sql", "original_file_path": "macros/cross_db_utils/deprecated/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n  {% do dbt_utils.xdb_deprecation_warning('concat', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.concat", "macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.6339068}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n    {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.635354}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_string', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_string", "macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.635869}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n    {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.6361809}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_timestamp', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_timestamp", "macro.dbt_expectations.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.636678}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n    {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.63698}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_float', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_float", "macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.637475}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n    {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.637782}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_numeric', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_numeric", "macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.638273}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n    {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.6385732}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_bigint', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_bigint", "macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.639071}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n    {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.639652}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datatypes.sql", "original_file_path": "macros/cross_db_utils/deprecated/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_int', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_int", "macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.6403232}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/length.sql", "original_file_path": "macros/cross_db_utils/deprecated/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.641217}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/length.sql", "original_file_path": "macros/cross_db_utils/deprecated/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('length', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.length", "macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.6417432}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/dateadd.sql", "original_file_path": "macros/cross_db_utils/deprecated/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.642525}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/dateadd.sql", "original_file_path": "macros/cross_db_utils/deprecated/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n  {% do dbt_utils.xdb_deprecation_warning('dateadd', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.dateadd", "macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.643126}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/intersect.sql", "original_file_path": "macros/cross_db_utils/deprecated/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.6437252}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/intersect.sql", "original_file_path": "macros/cross_db_utils/deprecated/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n  {% do dbt_utils.xdb_deprecation_warning('intersect', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.intersect", "macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.644584}, "macro.dbt_utils.escape_single_quotes": {"unique_id": "macro.dbt_utils.escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/deprecated/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.645246}, "macro.dbt_utils.default__escape_single_quotes": {"unique_id": "macro.dbt_utils.default__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/deprecated/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) %}\n      {% do dbt_utils.xdb_deprecation_warning('escape_single_quotes', model.package_name, model.name) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.escape_single_quotes", "macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.64577}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/right.sql", "original_file_path": "macros/cross_db_utils/deprecated/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.646464}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/right.sql", "original_file_path": "macros/cross_db_utils/deprecated/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('right', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.right", "macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.647042}, "macro.dbt_utils.listagg": {"unique_id": "macro.dbt_utils.listagg", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/listagg.sql", "original_file_path": "macros/cross_db_utils/deprecated/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt_utils') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.6479092}, "macro.dbt_utils.default__listagg": {"unique_id": "macro.dbt_utils.default__listagg", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/listagg.sql", "original_file_path": "macros/cross_db_utils/deprecated/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {% do dbt_utils.xdb_deprecation_warning('listagg', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.listagg", "macro.dbt_utils.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.6487281}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datediff.sql", "original_file_path": "macros/cross_db_utils/deprecated/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.649517}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/datediff.sql", "original_file_path": "macros/cross_db_utils/deprecated/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) %}\n  {% do dbt_utils.xdb_deprecation_warning('datediff', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.datediff", "macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.650125}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/safe_cast.sql", "original_file_path": "macros/cross_db_utils/deprecated/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.6508532}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/safe_cast.sql", "original_file_path": "macros/cross_db_utils/deprecated/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n  {% do dbt_utils.xdb_deprecation_warning('safe_cast', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.safe_cast", "macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.651896}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/hash.sql", "original_file_path": "macros/cross_db_utils/deprecated/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.6528482}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/hash.sql", "original_file_path": "macros/cross_db_utils/deprecated/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n  {% do dbt_utils.xdb_deprecation_warning('hash', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.hash", "macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.6533928}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/deprecated/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.654109}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/deprecated/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n  {% do dbt_utils.xdb_deprecation_warning('cast_bool_to_text', model.package_name, model.name) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.cast_bool_to_text", "macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.65467}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/identifier.sql", "original_file_path": "macros/cross_db_utils/deprecated/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__identifier"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.655734}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/identifier.sql", "original_file_path": "macros/cross_db_utils/deprecated/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.655939}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/identifier.sql", "original_file_path": "macros/cross_db_utils/deprecated/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.656147}, "macro.dbt_utils.any_value": {"unique_id": "macro.dbt_utils.any_value", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/any_value.sql", "original_file_path": "macros/cross_db_utils/deprecated/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.6568089}, "macro.dbt_utils.default__any_value": {"unique_id": "macro.dbt_utils.default__any_value", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/any_value.sql", "original_file_path": "macros/cross_db_utils/deprecated/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('any_value', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.any_value", "macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.70075}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/position.sql", "original_file_path": "macros/cross_db_utils/deprecated/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.7017899}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/position.sql", "original_file_path": "macros/cross_db_utils/deprecated/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) -%}\n    {% do dbt_utils.xdb_deprecation_warning('position', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.position", "macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.702392}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/literal.sql", "original_file_path": "macros/cross_db_utils/deprecated/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.703299}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/literal.sql", "original_file_path": "macros/cross_db_utils/deprecated/literal.sql", "name": "default__string_literal", "macro_sql": "{%- macro default__string_literal(value) -%}\n  {% do dbt_utils.xdb_deprecation_warning('string_literal', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.string_literal", "macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.7039208}, "macro.dbt_utils.bool_or": {"unique_id": "macro.dbt_utils.bool_or", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/bool_or.sql", "original_file_path": "macros/cross_db_utils/deprecated/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.704801}, "macro.dbt_utils.default__bool_or": {"unique_id": "macro.dbt_utils.default__bool_or", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/bool_or.sql", "original_file_path": "macros/cross_db_utils/deprecated/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('bool_or', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.bool_or", "macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.7053509}, "macro.dbt_utils.xdb_deprecation_warning": {"unique_id": "macro.dbt_utils.xdb_deprecation_warning", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/xdb_deprecation_warning.sql", "original_file_path": "macros/cross_db_utils/deprecated/xdb_deprecation_warning.sql", "name": "xdb_deprecation_warning", "macro_sql": "{% macro xdb_deprecation_warning(macro, package, model) %}\n    {%- set error_message = \"Warning: the `\" ~ macro ~\"` macro is now provided in dbt Core. It is no longer available in dbt_utils and backwards compatibility will be removed in a future version of the package. Use `\" ~ macro ~ \"` (no prefix) instead. The \" ~ package ~ \".\" ~ model ~ \" model triggered this warning.\" -%}\n    {%- do exceptions.warn(error_message) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.706262}, "macro.dbt_utils.xdb_deprecation_warning_without_replacement": {"unique_id": "macro.dbt_utils.xdb_deprecation_warning_without_replacement", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/xdb_deprecation_warning.sql", "original_file_path": "macros/cross_db_utils/deprecated/xdb_deprecation_warning.sql", "name": "xdb_deprecation_warning_without_replacement", "macro_sql": "{% macro xdb_deprecation_warning_without_replacement(macro, package, model) %}\n    {%- set error_message = \"Warning: the `\" ~ macro ~\"` macro is deprecated and will be removed in a future version of the package, once equivalent functionality is implemented in dbt Core. The \" ~ package ~ \".\" ~ model ~ \" model triggered this warning.\" -%}\n    {%- do exceptions.warn(error_message) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.7067251}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/last_day.sql", "original_file_path": "macros/cross_db_utils/deprecated/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.7075999}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/last_day.sql", "original_file_path": "macros/cross_db_utils/deprecated/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) %}\n  {% do dbt_utils.xdb_deprecation_warning('last_day', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.last_day", "macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.708359}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/split_part.sql", "original_file_path": "macros/cross_db_utils/deprecated/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.709384}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/split_part.sql", "original_file_path": "macros/cross_db_utils/deprecated/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n  {% do dbt_utils.xdb_deprecation_warning('split_part', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.split_part", "macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.710015}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/date_trunc.sql", "original_file_path": "macros/cross_db_utils/deprecated/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.710727}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/deprecated/date_trunc.sql", "original_file_path": "macros/cross_db_utils/deprecated/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n  {% do dbt_utils.xdb_deprecation_warning('date_trunc', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.711278}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.7208278}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{ dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\") }},\n            {{ dbt_utils.current_timestamp() }}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{ datediff('start_timestamp',\n                           'stop_timestamp',\n                           period) }}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.721997}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.7226398}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.723592}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- set deprecation_warning = \"Warning: the `insert_by_period` materialization will be removed from dbt_utils in version 1.0.0. Install from dbt-labs/dbt-labs-experimental-features instead (see https://github.com/dbt-labs/dbt-utils/discussions/487). The \" ~ package ~ \".\" ~ model ~ \" model triggered this warning.\" -%}\n  {%- do exceptions.warn(deprecation_warning) -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n\n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.733956}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.735054}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    split_part(\n        split_part(\n            replace(\n                replace(\n                    replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.735947}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.737195}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        replace(\n            replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ position(\"'/'\", stripped_url) }}, 0),\n            {{ position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        split_part(\n            right(\n                stripped_url,\n                length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ safe_cast(\n        parsed_path,\n        type_string()\n    )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.7384892}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.7393239}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = split_part(split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.7399092}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.7410848}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.7416089}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.742687}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.7432718}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.744621}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.7453141}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.7462232}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dateadd(datepart, interval * -1, current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.7468228}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.7476501}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.747985}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.749451}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.750818}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.752447}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.753577}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.7551382}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.7555032}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.756398}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.756798}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.758107}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.759337}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.760401}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.761002}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.7619789}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.762539}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.763482}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.764974}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.766359}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ type_timestamp() }})= cast({{ dateadd(datepart, interval, previous_column_name) }} as {{ type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.767715}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.768733}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.7690592}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.770369}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.772235}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.777917}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.781287}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.78208}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.782397}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.78337}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.7840152}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.78438}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.785066}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.785392}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.786918}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.789141}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.790615}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.791738}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.7921689}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.7928178}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.793555}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.7942688}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.795486}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.797342}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.799275}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.8001049}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.800519}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.8016472}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.802953}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.804745}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.80566}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.806187}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.807452}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('*') }}\n    {%- endif -%}\n\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n    {%- if cols|length <= 0 -%}\n      {{- return('*') -}}\n    {%- else -%}\n        {%- for col in cols %}\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n            {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n        {%- endfor -%}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.80973}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.812684}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.8166022}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.8209028}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ string_literal(relation) }} as {{ type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.826803}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.827588}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.828059}, "macro.dbt_utils.deduplicate": {"unique_id": "macro.dbt_utils.deduplicate", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by=none, relation_alias=none) -%}\n\n    {%- set error_message_group_by -%}\nWarning: the `group_by` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nUse `partition_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if kwargs.get('group_by') %}\n    {%- do exceptions.warn(error_message_group_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_order_by -%}\nWarning: `order_by` as an optional parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nSupply a non-null value for `order_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if not order_by %}\n    {%- do exceptions.warn(error_message_order_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_alias -%}\nWarning: the `relation_alias` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nIf you were using `relation_alias` to point to a CTE previously then you can now pass the alias directly to `relation` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if relation_alias %}\n    {%- do exceptions.warn(error_message_alias) -%}\n    {%- endif -%}\n\n    {% set partition_by = partition_by or kwargs.get('group_by') %}\n    {% set relation = relation_alias or relation %}\n    {% set order_by = order_by or \"'1'\" %}\n\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.8326}, "macro.dbt_utils.default__deduplicate": {"unique_id": "macro.dbt_utils.default__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.833189}, "macro.dbt_utils.redshift__deduplicate": {"unique_id": "macro.dbt_utils.redshift__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.833618}, "macro.dbt_utils.postgres__deduplicate": {"unique_id": "macro.dbt_utils.postgres__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.8339999}, "macro.dbt_utils.snowflake__deduplicate": {"unique_id": "macro.dbt_utils.snowflake__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.834311}, "macro.dbt_utils.bigquery__deduplicate": {"unique_id": "macro.dbt_utils.bigquery__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.834644}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.8358982}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ hash(concat(fields)) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.837877}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.8387752}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.839316}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.8400798}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.840724}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.843627}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.844518}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.846056}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.847011}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.848966}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.8518898}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.854163}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt_utils.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.856166}, "macro.dbt_utils.get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.8572228}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.858604}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.860708}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.861639}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt.safe_cast(expr, type_numeric() ) }} %\n                {{ dbt.safe_cast(bin_size, type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.8624692}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.862832}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.863639}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.8648262}, "macro.dbt_utils.get_table_types_sql": {"unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.8658519}, "macro.dbt_utils.default__get_table_types_sql": {"unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.866189}, "macro.dbt_utils.postgres__get_table_types_sql": {"unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.866459}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.868213}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.868737}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.8714921}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.8732312}, "macro.dbt_date.get_date_dimension": {"unique_id": "macro.dbt_date.get_date_dimension", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.8850062}, "macro.dbt_date.default__get_date_dimension": {"unique_id": "macro.dbt_date.default__get_date_dimension", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ type_int() }}) as quarter_of_year,\n    cast({{ date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ type_int() }}) as year_number,\n    cast({{ date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt_utils.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_date.month_name", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.8893702}, "macro.dbt_date.postgres__get_date_dimension": {"unique_id": "macro.dbt_date.postgres__get_date_dimension", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ type_int() }}) as quarter_of_year,\n    cast({{ date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dateadd('day', '-1', dateadd('month', '3', date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ type_int() }}) as year_number,\n    cast({{ date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt_utils.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_date.month_name", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.893564}, "macro.dbt_date.get_base_dates": {"unique_id": "macro.dbt_date.get_base_dates", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "get_base_dates", "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.895346}, "macro.dbt_date.default__get_base_dates": {"unique_id": "macro.dbt_date.default__get_base_dates", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_utils.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.896686}, "macro.dbt_date.bigquery__get_base_dates": {"unique_id": "macro.dbt_date.bigquery__get_base_dates", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as date )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as date )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine", "macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.8979259}, "macro.dbt_date.get_intervals_between": {"unique_id": "macro.dbt_date.get_intervals_between", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_date')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.8994932}, "macro.dbt_date.default__get_intervals_between": {"unique_id": "macro.dbt_date.default__get_intervals_between", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.9007602}, "macro.dbt_date.date_spine": {"unique_id": "macro.dbt_date.date_spine", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_date')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.901207}, "macro.dbt_date.default__date_spine": {"unique_id": "macro.dbt_date.default__date_spine", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{\n        dbt_date.generate_series(\n            dbt_date.get_intervals_between(start_date, end_date, datepart)\n        )\n    }}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.generate_series", "macro.dbt_date.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.901868}, "macro.dbt_date.get_powers_of_two": {"unique_id": "macro.dbt_date.get_powers_of_two", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.903469}, "macro.dbt_date.default__get_powers_of_two": {"unique_id": "macro.dbt_date.default__get_powers_of_two", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.9042659}, "macro.dbt_date.generate_series": {"unique_id": "macro.dbt_date.generate_series", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.904618}, "macro.dbt_date.default__generate_series": {"unique_id": "macro.dbt_date.default__generate_series", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_date.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.9055989}, "macro.dbt_date.get_fiscal_year_dates": {"unique_id": "macro.dbt_date.get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "name": "get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.908329}, "macro.dbt_date.default__get_fiscal_year_dates": {"unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "name": "default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.909333}, "macro.dbt_date.get_fiscal_periods": {"unique_id": "macro.dbt_date.get_fiscal_periods", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_periods.sql", "original_file_path": "macros/fiscal_date/get_fiscal_periods.sql", "name": "get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{#\nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case\n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year,\n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom\n    fscl_periods_quarters\norder by 1,2\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.911335}, "macro.dbt_date.tomorrow": {"unique_id": "macro.dbt_date.tomorrow", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/tomorrow.sql", "original_file_path": "macros/calendar_date/tomorrow.sql", "name": "tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.912043}, "macro.dbt_date.next_week": {"unique_id": "macro.dbt_date.next_week", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/next_week.sql", "original_file_path": "macros/calendar_date/next_week.sql", "name": "next_week", "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.912566}, "macro.dbt_date.next_month_name": {"unique_id": "macro.dbt_date.next_month_name", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month_name.sql", "original_file_path": "macros/calendar_date/next_month_name.sql", "name": "next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(1, tz), short=short) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.9132202}, "macro.dbt_date.next_month": {"unique_id": "macro.dbt_date.next_month", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month.sql", "original_file_path": "macros/calendar_date/next_month.sql", "name": "next_month", "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.9137018}, "macro.dbt_date.day_name": {"unique_id": "macro.dbt_date.day_name", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__day_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.914942}, "macro.dbt_date.default__day_name": {"unique_id": "macro.dbt_date.default__day_name", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "default__day_name", "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.915584}, "macro.dbt_date.snowflake__day_name": {"unique_id": "macro.dbt_date.snowflake__day_name", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "snowflake__day_name", "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.916115}, "macro.dbt_date.bigquery__day_name": {"unique_id": "macro.dbt_date.bigquery__day_name", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "bigquery__day_name", "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.916499}, "macro.dbt_date.postgres__day_name": {"unique_id": "macro.dbt_date.postgres__day_name", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "postgres__day_name", "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.916882}, "macro.dbt_date.to_unixtimestamp": {"unique_id": "macro.dbt_date.to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.917653}, "macro.dbt_date.default__to_unixtimestamp": {"unique_id": "macro.dbt_date.default__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "default__to_unixtimestamp", "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.917923}, "macro.dbt_date.snowflake__to_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "snowflake__to_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.918185}, "macro.dbt_date.bigquery__to_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "bigquery__to_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.918379}, "macro.dbt_date.n_days_away": {"unique_id": "macro.dbt_date.n_days_away", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/n_days_away.sql", "original_file_path": "macros/calendar_date/n_days_away.sql", "name": "n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.918985}, "macro.dbt_date.week_start": {"unique_id": "macro.dbt_date.week_start", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.919926}, "macro.dbt_date.default__week_start": {"unique_id": "macro.dbt_date.default__week_start", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ date_trunc('week', date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.920191}, "macro.dbt_date.snowflake__week_start": {"unique_id": "macro.dbt_date.snowflake__week_start", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "snowflake__week_start", "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.920863}, "macro.dbt_date.postgres__week_start": {"unique_id": "macro.dbt_date.postgres__week_start", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "postgres__week_start", "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dateadd('day', -1, date_trunc('week', dateadd('day', 1, date))) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.921389}, "macro.dbt_date.iso_week_start": {"unique_id": "macro.dbt_date.iso_week_start", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.922719}, "macro.dbt_date._iso_week_start": {"unique_id": "macro.dbt_date._iso_week_start", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "_iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ date_trunc(week_type, date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.923014}, "macro.dbt_date.default__iso_week_start": {"unique_id": "macro.dbt_date.default__iso_week_start", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "default__iso_week_start", "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.9232872}, "macro.dbt_date.snowflake__iso_week_start": {"unique_id": "macro.dbt_date.snowflake__iso_week_start", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "snowflake__iso_week_start", "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.92355}, "macro.dbt_date.postgres__iso_week_start": {"unique_id": "macro.dbt_date.postgres__iso_week_start", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "postgres__iso_week_start", "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.923844}, "macro.dbt_date.n_days_ago": {"unique_id": "macro.dbt_date.n_days_ago", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/n_days_ago.sql", "original_file_path": "macros/calendar_date/n_days_ago.sql", "name": "n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.9248052}, "macro.dbt_date.last_week": {"unique_id": "macro.dbt_date.last_week", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/last_week.sql", "original_file_path": "macros/calendar_date/last_week.sql", "name": "last_week", "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.925347}, "macro.dbt_date.now": {"unique_id": "macro.dbt_date.now", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/now.sql", "original_file_path": "macros/calendar_date/now.sql", "name": "now", "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(current_timestamp(), tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.9258618}, "macro.dbt_date.periods_since": {"unique_id": "macro.dbt_date.periods_since", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/periods_since.sql", "original_file_path": "macros/calendar_date/periods_since.sql", "name": "periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.926858}, "macro.dbt_date.today": {"unique_id": "macro.dbt_date.today", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/today.sql", "original_file_path": "macros/calendar_date/today.sql", "name": "today", "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.9273548}, "macro.dbt_date.last_month": {"unique_id": "macro.dbt_date.last_month", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month.sql", "original_file_path": "macros/calendar_date/last_month.sql", "name": "last_month", "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.927831}, "macro.dbt_date.day_of_year": {"unique_id": "macro.dbt_date.day_of_year", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.9284842}, "macro.dbt_date.default__day_of_year": {"unique_id": "macro.dbt_date.default__day_of_year", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "default__day_of_year", "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.9287522}, "macro.dbt_date.postgres__day_of_year": {"unique_id": "macro.dbt_date.postgres__day_of_year", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "postgres__day_of_year", "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.9290109}, "macro.dbt_date.redshift__day_of_year": {"unique_id": "macro.dbt_date.redshift__day_of_year", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "redshift__day_of_year", "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ type_bigint() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.9293451}, "macro.dbt_date.round_timestamp": {"unique_id": "macro.dbt_date.round_timestamp", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/round_timestamp.sql", "original_file_path": "macros/calendar_date/round_timestamp.sql", "name": "round_timestamp", "macro_sql": "{% macro round_timestamp(timestamp) %}\n    {{ date_trunc(\"day\", dateadd(\"hour\", 12, timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.929899}, "macro.dbt_date.from_unixtimestamp": {"unique_id": "macro.dbt_date.from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.931757}, "macro.dbt_date.default__from_unixtimestamp": {"unique_id": "macro.dbt_date.default__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "default__from_unixtimestamp", "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.93228}, "macro.dbt_date.postgres__from_unixtimestamp": {"unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "postgres__from_unixtimestamp", "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.932995}, "macro.dbt_date.snowflake__from_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "snowflake__from_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.934102}, "macro.dbt_date.bigquery__from_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "bigquery__from_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.935055}, "macro.dbt_date.n_months_ago": {"unique_id": "macro.dbt_date.n_months_ago", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/n_months_ago.sql", "original_file_path": "macros/calendar_date/n_months_ago.sql", "name": "n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ date_trunc('month',\n    dateadd('month', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.936012}, "macro.dbt_date.date_part": {"unique_id": "macro.dbt_date.date_part", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.936914}, "macro.dbt_date.default__date_part": {"unique_id": "macro.dbt_date.default__date_part", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.9371881}, "macro.dbt_date.bigquery__date_part": {"unique_id": "macro.dbt_date.bigquery__date_part", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.9374442}, "macro.dbt_date.n_weeks_away": {"unique_id": "macro.dbt_date.n_weeks_away", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/n_weeks_away.sql", "original_file_path": "macros/calendar_date/n_weeks_away.sql", "name": "n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ date_trunc('week',\n    dateadd('week', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.93823}, "macro.dbt_date.day_of_month": {"unique_id": "macro.dbt_date.day_of_month", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "name": "day_of_month", "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.938758}, "macro.dbt_date.redshift__day_of_month": {"unique_id": "macro.dbt_date.redshift__day_of_month", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "name": "redshift__day_of_month", "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ type_bigint() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.9390929}, "macro.dbt_date.yesterday": {"unique_id": "macro.dbt_date.yesterday", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/yesterday.sql", "original_file_path": "macros/calendar_date/yesterday.sql", "name": "yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.9397671}, "macro.dbt_date.day_of_week": {"unique_id": "macro.dbt_date.day_of_week", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.942474}, "macro.dbt_date.default__day_of_week": {"unique_id": "macro.dbt_date.default__day_of_week", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "default__day_of_week", "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.943054}, "macro.dbt_date.snowflake__day_of_week": {"unique_id": "macro.dbt_date.snowflake__day_of_week", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "snowflake__day_of_week", "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.943995}, "macro.dbt_date.bigquery__day_of_week": {"unique_id": "macro.dbt_date.bigquery__day_of_week", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "bigquery__day_of_week", "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.944892}, "macro.dbt_date.postgres__day_of_week": {"unique_id": "macro.dbt_date.postgres__day_of_week", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "postgres__day_of_week", "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.945785}, "macro.dbt_date.redshift__day_of_week": {"unique_id": "macro.dbt_date.redshift__day_of_week", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "redshift__day_of_week", "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.946452}, "macro.dbt_date.iso_week_end": {"unique_id": "macro.dbt_date.iso_week_end", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.9474869}, "macro.dbt_date._iso_week_end": {"unique_id": "macro.dbt_date._iso_week_end", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "_iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.947883}, "macro.dbt_date.default__iso_week_end": {"unique_id": "macro.dbt_date.default__iso_week_end", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "default__iso_week_end", "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.948143}, "macro.dbt_date.snowflake__iso_week_end": {"unique_id": "macro.dbt_date.snowflake__iso_week_end", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "snowflake__iso_week_end", "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.948398}, "macro.dbt_date.n_weeks_ago": {"unique_id": "macro.dbt_date.n_weeks_ago", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/n_weeks_ago.sql", "original_file_path": "macros/calendar_date/n_weeks_ago.sql", "name": "n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ date_trunc('week',\n    dateadd('week', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.9492211}, "macro.dbt_date.month_name": {"unique_id": "macro.dbt_date.month_name", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__month_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.9501429}, "macro.dbt_date.default__month_name": {"unique_id": "macro.dbt_date.default__month_name", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "default__month_name", "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.950527}, "macro.dbt_date.bigquery__month_name": {"unique_id": "macro.dbt_date.bigquery__month_name", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "bigquery__month_name", "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.950901}, "macro.dbt_date.snowflake__month_name": {"unique_id": "macro.dbt_date.snowflake__month_name", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "snowflake__month_name", "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.951273}, "macro.dbt_date.postgres__month_name": {"unique_id": "macro.dbt_date.postgres__month_name", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "postgres__month_name", "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.951654}, "macro.dbt_date.last_month_name": {"unique_id": "macro.dbt_date.last_month_name", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month_name.sql", "original_file_path": "macros/calendar_date/last_month_name.sql", "name": "last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(1, tz), short=short) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.952276}, "macro.dbt_date.week_of_year": {"unique_id": "macro.dbt_date.week_of_year", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.9531431}, "macro.dbt_date.default__week_of_year": {"unique_id": "macro.dbt_date.default__week_of_year", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.95361}, "macro.dbt_date.postgres__week_of_year": {"unique_id": "macro.dbt_date.postgres__week_of_year", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "postgres__week_of_year", "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.953883}, "macro.dbt_date.convert_timezone": {"unique_id": "macro.dbt_date.convert_timezone", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.9560409}, "macro.dbt_date.default__convert_timezone": {"unique_id": "macro.dbt_date.default__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\nconvert_timezone('{{ source_tz }}', '{{ target_tz }}',\n    cast({{ column }} as {{ type_timestamp() }})\n)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.956507}, "macro.dbt_date.bigquery__convert_timezone": {"unique_id": "macro.dbt_date.bigquery__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.956863}, "macro.dbt_date.spark__convert_timezone": {"unique_id": "macro.dbt_date.spark__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.957171}, "macro.dbt_date.postgres__convert_timezone": {"unique_id": "macro.dbt_date.postgres__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\ncast(\n    cast({{ column }} as {{ type_timestamp() }})\n        at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ type_timestamp() }}\n)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.957582}, "macro.dbt_date.redshift__convert_timezone": {"unique_id": "macro.dbt_date.redshift__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "redshift__convert_timezone", "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.957933}, "macro.dbt_date.n_months_away": {"unique_id": "macro.dbt_date.n_months_away", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/n_months_away.sql", "original_file_path": "macros/calendar_date/n_months_away.sql", "name": "n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ date_trunc('month',\n    dateadd('month', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.9587998}, "macro.dbt_date.iso_week_of_year": {"unique_id": "macro.dbt_date.iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.959876}, "macro.dbt_date._iso_week_of_year": {"unique_id": "macro.dbt_date._iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "_iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.9602292}, "macro.dbt_date.default__iso_week_of_year": {"unique_id": "macro.dbt_date.default__iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "default__iso_week_of_year", "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.960505}, "macro.dbt_date.snowflake__iso_week_of_year": {"unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "snowflake__iso_week_of_year", "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.960765}, "macro.dbt_date.postgres__iso_week_of_year": {"unique_id": "macro.dbt_date.postgres__iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "postgres__iso_week_of_year", "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.9610329}, "macro.dbt_date.week_end": {"unique_id": "macro.dbt_date.week_end", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.961953}, "macro.dbt_date.default__week_end": {"unique_id": "macro.dbt_date.default__week_end", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "default__week_end", "macro_sql": "{%- macro default__week_end(date) -%}\n{{ last_day(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.962205}, "macro.dbt_date.snowflake__week_end": {"unique_id": "macro.dbt_date.snowflake__week_end", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "snowflake__week_end", "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.962581}, "macro.dbt_date.postgres__week_end": {"unique_id": "macro.dbt_date.postgres__week_end", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "postgres__week_end", "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.962945}, "macro.dbt_date.next_month_number": {"unique_id": "macro.dbt_date.next_month_number", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month_number.sql", "original_file_path": "macros/calendar_date/next_month_number.sql", "name": "next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(1, tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.963521}, "macro.dbt_date.last_month_number": {"unique_id": "macro.dbt_date.last_month_number", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month_number.sql", "original_file_path": "macros/calendar_date/last_month_number.sql", "name": "last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(1, tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.9641469}, "macro.dbt_external_tables.bigquery__create_external_table": {"unique_id": "macro.dbt_external_tables.bigquery__create_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/bigquery/create_external_table.sql", "original_file_path": "macros/plugins/bigquery/create_external_table.sql", "name": "bigquery__create_external_table", "macro_sql": "{% macro bigquery__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n    \n    {%- set uris = [] -%}\n    {%- if options is mapping and options.get('uris', none) -%}\n        {%- set uris = external.options.get('uris') -%}\n    {%- else -%}\n        {%- set uris = [external.location] -%}\n    {%- endif -%}\n\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n        {%- if columns -%}(\n            {% for column in columns %}\n                {{column.name}} {{column.data_type}} {{- ',' if not loop.last -}}\n            {%- endfor -%}\n        )\n        {% endif %}\n        {% if options and options.get('hive_partition_uri_prefix', none) %}\n        with partition columns {%- if partitions %} (\n            {%- for partition in partitions %}\n                {{partition.name}} {{partition.data_type}}{{',' if not loop.last}}\n            {%- endfor -%}\n        ) {% endif -%}\n        {% endif %}\n        options (\n            uris = [{%- for uri in uris -%} '{{uri}}' {{- \",\" if not loop.last}} {%- endfor -%}]\n            {%- if options is mapping -%}\n            {%- for key, value in options.items() if key != 'uris' %}\n                {%- if value is string -%}\n                , {{key}} = '{{value}}'\n                {%- else -%}\n                , {{key}} = {{value}}\n                {%- endif -%}\n            {%- endfor -%}\n            {%- endif -%}\n        )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.969548}, "macro.dbt_external_tables.bigquery__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.bigquery__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/bigquery/get_external_build_plan.sql", "original_file_path": "macros/plugins/bigquery/get_external_build_plan.sql", "name": "bigquery__get_external_build_plan", "macro_sql": "{% macro bigquery__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [dbt_external_tables.create_external_table(source_node)] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.9713438}, "macro.dbt_external_tables.snowflake__create_external_table": {"unique_id": "macro.dbt_external_tables.snowflake__create_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/create_external_table.sql", "original_file_path": "macros/plugins/snowflake/create_external_table.sql", "name": "snowflake__create_external_table", "macro_sql": "{% macro snowflake__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) -%}\n\n{# https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html #}\n{# This assumes you have already created an external stage #}\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n    {%- if columns or partitions -%}\n    (\n        {%- if partitions -%}{%- for partition in partitions %}\n            {{partition.name}} {{partition.data_type}} as {{partition.expression}}{{- ',' if not loop.last or columns|length > 0 -}}\n        {%- endfor -%}{%- endif -%}\n        {%- for column in columns %}\n            {%- set column_quoted = adapter.quote(column.name) if column.quote else column.name %}\n            {%- set col_expression -%}\n                {%- set col_id = 'value:c' ~ loop.index if is_csv else 'value:' ~ column.name -%}\n                (case when is_null_value({{col_id}}) or lower({{col_id}}) = 'null' then null else {{col_id}} end)\n            {%- endset %}\n            {{column_quoted}} {{column.data_type}} as ({{col_expression}}::{{column.data_type}})\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    {%- endif -%}\n    {% if partitions %} partition by ({{partitions|map(attribute='name')|join(', ')}}) {% endif %}\n    location = {{external.location}} {# stage #}\n    {% if external.auto_refresh in (true, false) -%}\n      auto_refresh = {{external.auto_refresh}}\n    {%- endif %}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if external.integration -%} integration = '{{external.integration}}' {%- endif %}\n    file_format = {{external.file_format}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.is_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.975681}, "macro.dbt_external_tables.snowflake__refresh_external_table": {"unique_id": "macro.dbt_external_tables.snowflake__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/refresh_external_table.sql", "original_file_path": "macros/plugins/snowflake/refresh_external_table.sql", "name": "snowflake__refresh_external_table", "macro_sql": "{% macro snowflake__refresh_external_table(source_node) %}\n\n    {% set external = source_node.external %}\n    {% set snowpipe = source_node.external.get('snowpipe', none) %}\n    \n    {% set auto_refresh = external.get('auto_refresh', false) %}\n    {% set partitions = external.get('partitions', none) %}\n    \n    {% set manual_refresh = (partitions and not auto_refresh) %}\n    \n    {% if manual_refresh %}\n\n        {% set ddl %}\n        begin;\n        alter external table {{source(source_node.source_name, source_node.name)}} refresh;\n        commit;\n        {% endset %}\n        \n        {% do return([ddl]) %}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.9779751}, "macro.dbt_external_tables.snowflake__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.snowflake__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/get_external_build_plan.sql", "original_file_path": "macros/plugins/snowflake/get_external_build_plan.sql", "name": "snowflake__get_external_build_plan", "macro_sql": "{% macro snowflake__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if source_node.external.get('snowpipe', none) is not none %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [\n                dbt_external_tables.snowflake_create_empty_table(source_node),\n                dbt_external_tables.snowflake_get_copy_sql(source_node, explicit_transaction=true),\n                dbt_external_tables.snowflake_create_snowpipe(source_node)\n            ] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.snowflake_refresh_snowpipe(source_node) %}\n        {% endif %}\n            \n    {% else %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [dbt_external_tables.create_external_table(source_node)] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n        {% endif %}\n        \n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake_create_empty_table", "macro.dbt_external_tables.snowflake_get_copy_sql", "macro.dbt_external_tables.snowflake_create_snowpipe", "macro.dbt_external_tables.snowflake_refresh_snowpipe", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.981156}, "macro.dbt_external_tables.snowflake_create_snowpipe": {"unique_id": "macro.dbt_external_tables.snowflake_create_snowpipe", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/create_snowpipe.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/create_snowpipe.sql", "name": "snowflake_create_snowpipe", "macro_sql": "{% macro snowflake_create_snowpipe(source_node) %}\n\n    {%- set external = source_node.external -%}\n    {%- set snowpipe = external.snowpipe -%}\n\n{# https://docs.snowflake.com/en/sql-reference/sql/create-pipe.html #}\n    create or replace pipe {{source(source_node.source_name, source_node.name)}}\n        {% if snowpipe.auto_ingest -%} auto_ingest = {{snowpipe.auto_ingest}} {%- endif %}\n        {% if snowpipe.aws_sns_topic -%} aws_sns_topic = '{{snowpipe.aws_sns_topic}}' {%- endif %}\n        {% if snowpipe.integration -%} integration = '{{snowpipe.integration}}' {%- endif %}\n        as {{ dbt_external_tables.snowflake_get_copy_sql(source_node) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake_get_copy_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.982646}, "macro.dbt_external_tables.snowflake_create_empty_table": {"unique_id": "macro.dbt_external_tables.snowflake_create_empty_table", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/create_empty_table.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/create_empty_table.sql", "name": "snowflake_create_empty_table", "macro_sql": "{% macro snowflake_create_empty_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() %}\n\n    create or replace table {{source(source_node.source_name, source_node.name)}} (\n        {% if columns|length == 0 %}\n            value variant,\n        {% else -%}\n        {%- for column in columns -%}\n            {{column.name}} {{column.data_type}},\n        {% endfor -%}\n        {% endif %}\n            metadata_filename varchar,\n            metadata_file_row_number bigint,\n            _dbt_copied_at timestamp\n    );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.983826}, "macro.dbt_external_tables.snowflake_refresh_snowpipe": {"unique_id": "macro.dbt_external_tables.snowflake_refresh_snowpipe", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/refresh_snowpipe.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/refresh_snowpipe.sql", "name": "snowflake_refresh_snowpipe", "macro_sql": "{% macro snowflake_refresh_snowpipe(source_node) %}\n\n    {% set snowpipe = source_node.external.snowpipe %}\n    {% set auto_ingest = snowpipe.get('auto_ingest', false) if snowpipe is mapping %}\n    \n    {% if auto_ingest is true %}\n    \n        {% do return([]) %}\n    \n    {% else %}\n    \n        {% set ddl %}\n        alter pipe {{source(source_node.source_name, source_node.name)}} refresh\n        {% endset %}\n        \n        {{ return([ddl]) }}\n    \n    {% endif %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.985224}, "macro.dbt_external_tables.snowflake_get_copy_sql": {"unique_id": "macro.dbt_external_tables.snowflake_get_copy_sql", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/get_copy_sql.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/get_copy_sql.sql", "name": "snowflake_get_copy_sql", "macro_sql": "{% macro snowflake_get_copy_sql(source_node, explicit_transaction=false) %}\n{# This assumes you have already created an external stage #}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) %}\n    {%- set copy_options = external.snowpipe.get('copy_options', none) -%}\n   \n    {%- if explicit_transaction -%} begin; {%- endif %}\n    \n    copy into {{source(source_node.source_name, source_node.name)}}\n    from ( \n        select\n        {% if columns|length == 0 %}\n            $1::variant as value,\n        {% else -%}\n        {%- for column in columns -%}\n            {%- set col_expression -%}\n                {%- if is_csv -%}nullif(${{loop.index}},''){# special case: get columns by ordinal position #}\n                {%- else -%}nullif($1:{{column.name}},''){# standard behavior: get columns by name #}\n                {%- endif -%}\n            {%- endset -%}\n            {{col_expression}}::{{column.data_type}} as {{column.name}},\n        {% endfor -%}\n        {% endif %}\n            metadata$filename::varchar as metadata_filename,\n            metadata$file_row_number::bigint as metadata_file_row_number,\n            current_timestamp::timestamp as _dbt_copied_at\n        from {{external.location}} {# stage #}\n    )\n    file_format = {{external.file_format}}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if copy_options %} {{copy_options}} {% endif %};\n    \n    {% if explicit_transaction -%} commit; {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.is_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.9880588}, "macro.dbt_external_tables.is_csv": {"unique_id": "macro.dbt_external_tables.is_csv", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/helpers/is_csv.sql", "original_file_path": "macros/plugins/snowflake/helpers/is_csv.sql", "name": "is_csv", "macro_sql": "{% macro is_csv(file_format) %}\n\n{# From https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html:\n\nImportant: The external table does not inherit the file format, if any, in the \nstage definition. You must explicitly specify any file format options for the \nexternal table using the FILE_FORMAT parameter.\n\nNote: FORMAT_NAME and TYPE are mutually exclusive; to avoid unintended behavior, \nyou should only specify one or the other when creating an external table.\n\n#}\n\n    {% set ff_ltrimmed = file_format|lower|replace(' ','') %}\n\n    {% if 'type=' in ff_ltrimmed %}\n    \n        {% if 'type=csv' in ff_ltrimmed %}\n\n            {{return(true)}}\n\n        {% else %}\n\n            {{return(false)}}\n            \n        {% endif %}\n        \n    {% else %}\n    \n        {% set ff_standardized = ff_ltrimmed\n            | replace('(','') | replace(')','')\n            | replace('format_name=','') %}\n        {% set fqn = ff_standardized.split('.') %}\n        \n        {% if fqn | length == 3 %}\n            {% set ff_database, ff_schema, ff_identifier = fqn[0], fqn[1], fqn[2] %}\n        {% elif fqn | length == 2 %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, fqn[0], fqn[1] %}\n        {% else %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, target.schema, fqn[0] %}\n        {% endif %}\n    \n        {% call statement('get_file_format', fetch_result = True) %}\n            show file formats in {{ff_database}}.{{ff_schema}}\n        {% endcall %}\n        \n        {% set ffs = load_result('get_file_format').table %}\n        \n        {% for ff in ffs %}\n            \n            {% if ff['name']|lower == ff_identifier and ff['type']|lower == 'csv' %}\n            \n                {{return(true)}}\n            \n            {% endif %}\n        \n        {% endfor %}\n        \n        {{return(false)}}        \n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.9931881}, "macro.dbt_external_tables.redshift__create_external_table": {"unique_id": "macro.dbt_external_tables.redshift__create_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/create_external_table.sql", "original_file_path": "macros/plugins/redshift/create_external_table.sql", "name": "redshift__create_external_table", "macro_sql": "{% macro redshift__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n\n{# https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_EXTERNAL_TABLE.html #}\n{# This assumes you have already created an external schema #}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {{adapter.quote(column.name)}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{adapter.quote(partition.name)}} {{partition.data_type}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} table properties {{external.table_properties}} {%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126487.996025}, "macro.dbt_external_tables.redshift__refresh_external_table": {"unique_id": "macro.dbt_external_tables.redshift__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/refresh_external_table.sql", "original_file_path": "macros/plugins/redshift/refresh_external_table.sql", "name": "redshift__refresh_external_table", "macro_sql": "{% macro redshift__refresh_external_table(source_node) %}\n\n    {%- set partitions = source_node.external.get('partitions',[]) -%}\n\n    {%- if partitions -%}\n    \n        {%- set part_len = partitions|length -%}\n    \n        {%- set get_partitions_sql -%}\n        \n        select * from\n        \n        {%- for partition in partitions %} (\n        \n            {%- set part_num = loop.index -%}\n            \n            {%- if partition.vals.macro -%}\n                {%- set vals = dbt_external_tables.render_from_context(partition.vals.macro, **partition.vals.args) -%}\n            {%- elif partition.vals is string -%}\n                {%- set vals = [partition.vals] -%}\n            {%- else -%}\n                {%- set vals = partition.vals -%}\n            {%- endif -%}\n        \n            {%- for val in vals %}\n            \n                select\n                    '\"{{ partition.name }}\"' as name_{{ part_num }},\n                    '\"{{ val }}\"' as val_{{ part_num }},\n                    '\"{{ dbt_external_tables.render_from_context(partition.path_macro, partition.name, val) }}\"' as path_{{ part_num }}\n                \n                {{ 'union all' if not loop.last else ') ' }}\n            \n            {%- endfor -%}\n            \n            {{ 'cross join' if not loop.last }}\n            \n        {%- endfor -%}\n        \n        {%- endset -%}\n        \n        {%- set finals = [] -%}\n        \n        {%- if execute -%}\n            {%- set results = run_query(get_partitions_sql) -%}\n            {%- for row in results -%}\n                \n                {%- set partition_parts = [] -%}\n                {%- set path_parts = [] -%}\n                \n                {%- for i in range(0, part_len) -%}\n                    {%- do partition_parts.append({\n                        'name': row[i * 3][1:-1],\n                        'value': row[i * 3 + 1][1:-1]\n                    }) -%}\n                    {%- do path_parts.append(row[i * 3 + 2][1:-1]) -%}\n                {%- endfor -%}\n                \n                {%- set construct = {\n                    'partition_by': partition_parts,\n                    'path': path_parts | join('/')\n                }  -%}\n                \n                {% do finals.append(construct) %}\n            {%- endfor -%}\n        {%- endif -%}\n    \n        {%- set ddl = dbt_external_tables.redshift_alter_table_add_partitions(source_node, finals) -%}\n        {{ return(ddl) }}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.render_from_context", "macro.dbt.run_query", "macro.dbt_external_tables.redshift_alter_table_add_partitions"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.0043771}, "macro.dbt_external_tables.redshift__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.redshift__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/get_external_build_plan.sql", "original_file_path": "macros/plugins/redshift/get_external_build_plan.sql", "name": "redshift__get_external_build_plan", "macro_sql": "{% macro redshift__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set create_or_replace = (var('ext_full_refresh', false) or not redshift_is_ext_tbl(source_node)) %}\n    \n    {% if create_or_replace %}\n\n        {% set build_plan = [\n                dbt_external_tables.dropif(source_node),\n                dbt_external_tables.create_external_table(source_node)\n            ] + dbt_external_tables.refresh_external_table(source_node) \n        %}\n        \n    {% else %}\n    \n        {% set build_plan = dbt_external_tables.refresh_external_table(source_node) %}\n        \n    {% endif %}\n    \n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.redshift_is_ext_tbl", "macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.006031}, "macro.dbt_external_tables.render_from_context": {"unique_id": "macro.dbt_external_tables.render_from_context", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/render_macro.sql", "original_file_path": "macros/plugins/redshift/helpers/render_macro.sql", "name": "render_from_context", "macro_sql": "{% macro render_from_context(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called by macro '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  \n    {{ return(package_context[name](*varargs, **kwargs)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.00812}, "macro.dbt_external_tables.redshift__dropif": {"unique_id": "macro.dbt_external_tables.redshift__dropif", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/dropif.sql", "original_file_path": "macros/plugins/redshift/helpers/dropif.sql", "name": "redshift__dropif", "macro_sql": "{% macro redshift__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}} cascade\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.00882}, "macro.dbt_external_tables.redshift_alter_table_add_partitions": {"unique_id": "macro.dbt_external_tables.redshift_alter_table_add_partitions", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/add_partitions.sql", "original_file_path": "macros/plugins/redshift/helpers/add_partitions.sql", "name": "redshift_alter_table_add_partitions", "macro_sql": "{% macro redshift_alter_table_add_partitions(source_node, partitions) %}\n\n  {{ log(\"Generating ADD PARTITION statement for partition set between \" \n         ~ partitions[0]['path'] ~ \" and \" ~ (partitions|last)['path']) }}\n\n  {% set ddl = [] %}\n  \n  {% if partitions|length > 0 %}\n  \n    {% set alter_table_add %}\n        alter table {{source(source_node.source_name, source_node.name)}} add if not exists \n    {% endset %}\n  \n    {%- set alters -%}\n\n      {{ alter_table_add }}\n\n    {%- for partition in partitions -%}\n\n      {%- if loop.index0 != 0 and loop.index0 % 100 == 0 -%}\n\n        ; {{ alter_table_add }}\n\n      {%- endif -%}\n\n        partition ({%- for part in partition.partition_by -%}{{ part.name }}='{{ part.value }}'{{', ' if not loop.last}}{%- endfor -%})\n        location '{{ source_node.external.location }}/{{ partition.path }}/'\n\n    {% endfor -%}\n    \n    {%- endset -%}\n    \n    {% set ddl = ddl + alters.split(';') %}\n\n  {% else %}\n\n    {{ log(\"No partitions to be added\") }}\n\n  {% endif %}\n  \n  {% do return(ddl) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.012386}, "macro.dbt_external_tables.redshift__exit_transaction": {"unique_id": "macro.dbt_external_tables.redshift__exit_transaction", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/transaction.sql", "original_file_path": "macros/plugins/redshift/helpers/transaction.sql", "name": "redshift__exit_transaction", "macro_sql": "{% macro redshift__exit_transaction() %}\n    {{ return('begin; commit;') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.013046}, "macro.dbt_external_tables.year_month_day": {"unique_id": "macro.dbt_external_tables.year_month_day", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "name": "year_month_day", "macro_sql": "{% macro year_month_day(name, value) %}\n    {% set path = value.replace('-','/') %}\n    {{return(path)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.013825}, "macro.dbt_external_tables.key_value": {"unique_id": "macro.dbt_external_tables.key_value", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "name": "key_value", "macro_sql": "{% macro key_value(name, value) %}\n    {% set path = name ~ '=' ~ value %}\n    {{return(path)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.014196}, "macro.dbt_external_tables.value_only": {"unique_id": "macro.dbt_external_tables.value_only", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "name": "value_only", "macro_sql": "{% macro value_only(name, value) %}\n    {% set path = value %}\n    {{return(path)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.0145211}, "macro.dbt_external_tables.redshift_is_ext_tbl": {"unique_id": "macro.dbt_external_tables.redshift_is_ext_tbl", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/is_ext_tbl.sql", "original_file_path": "macros/plugins/redshift/helpers/is_ext_tbl.sql", "name": "redshift_is_ext_tbl", "macro_sql": "{% macro redshift_is_ext_tbl(node) %}\n\n    {% set existing_relation = load_relation(node) %}\n    \n    {#  external tables don't appear in information_schema.tables,\n        so dbt doesn't cache them #}\n    {% if existing_relation is none %}\n\n        {% set find_ext_tbl %}\n        \n            select count(*) from svv_external_tables\n            where schemaname = '{{node.schema}}'\n            and tablename = '{{node.identifier}}'\n        \n        {% endset %}\n        \n        {% if execute %}\n            {% set result = run_query(find_ext_tbl)[0][0] %}\n        {% else %}\n            {% set result = 0 %}\n        {% endif %}\n\n        {% set is_ext_tbl = (result > 0) %}\n        {% do return(is_ext_tbl) %}\n        \n    {% else %}\n    \n        {% do return(false) %}\n        \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.0163891}, "macro.dbt_external_tables.sqlserver__create_external_table": {"unique_id": "macro.dbt_external_tables.sqlserver__create_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/sqlserver/create_external_table.sql", "original_file_path": "macros/plugins/sqlserver/create_external_table.sql", "name": "sqlserver__create_external_table", "macro_sql": "{% macro sqlserver__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n\n    {% if external.ansi_nulls is true -%} SET ANSI_NULLS ON; {%- endif %}\n    {% if external.quoted_identifier is true -%} SET QUOTED_IDENTIFIER ON; {%- endif %}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {# TODO set nullity based on schema tests?? #}\n            {%- set nullity = 'NOT NULL' if 'not_null' in columns.tests else 'NULL'-%}\n            {{adapter.quote(column.name)}} {{column.data_type}} {{nullity}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    WITH (\n        {# remove keys that are None (i.e. not defined for a given source) #}\n        {%- for key, value in external.items() if value is not none and key not in ['ansi_nulls', 'quoted_identifier'] -%}\n            {{key}} = \n                {%- if key in [\"location\", \"schema_name\", \"object_name\"] -%}\n                    '{{value}}'\n                {% elif key in [\"data_source\",\"file_format\"] -%}\n                    [{{value}}]\n                {% else -%}\n                    {{value}}\n                {%- endif -%}\n            {{- ',' if not loop.last -}}\n            {%- endfor -%}\n    )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.019319}, "macro.dbt_external_tables.sqlserver__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.sqlserver__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/sqlserver/get_external_build_plan.sql", "original_file_path": "macros/plugins/sqlserver/get_external_build_plan.sql", "name": "sqlserver__get_external_build_plan", "macro_sql": "{% macro sqlserver__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [ \n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.021045}, "macro.dbt_external_tables.sqlserver__dropif": {"unique_id": "macro.dbt_external_tables.sqlserver__dropif", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/sqlserver/helpers/dropif.sql", "original_file_path": "macros/plugins/sqlserver/helpers/dropif.sql", "name": "sqlserver__dropif", "macro_sql": "{% macro sqlserver__dropif(node) %}\n    \n    {% set ddl %}\n      if object_id ('{{source(node.source_name, node.name)}}') is not null\n        begin\n        drop external table {{source(node.source_name, node.name)}}\n        end\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.021951}, "macro.dbt_external_tables.spark__create_external_table": {"unique_id": "macro.dbt_external_tables.spark__create_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/create_external_table.sql", "original_file_path": "macros/plugins/spark/create_external_table.sql", "name": "spark__create_external_table", "macro_sql": "{% macro spark__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n\n{# https://spark.apache.org/docs/latest/sql-data-sources-hive-tables.html #}\n    create table {{source(source_node.source_name, source_node.name)}} \n    {%- if columns|length > 0 %} (\n        {% for column in columns %}\n            {{column.name}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    ) {% endif -%}\n    {% if external.using %} using {{external.using}} {%- endif %}\n    {% if options -%} options (\n        {%- for key, value in options.items() -%}\n            '{{ key }}' = '{{value}}' {{- ', \\n' if not loop.last -}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{partition.name}} {{partition.data_type}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} tblproperties {{ external.table_properties }} {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.0264478}, "macro.dbt_external_tables.spark__refresh_external_table": {"unique_id": "macro.dbt_external_tables.spark__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/refresh_external_table.sql", "original_file_path": "macros/plugins/spark/refresh_external_table.sql", "name": "spark__refresh_external_table", "macro_sql": "{% macro spark__refresh_external_table(source_node) %}\n    \n    {% set refresh %}\n        refresh table {{source(source_node.source_name, source_node.name)}}\n    {% endset %}\n    \n    {% do return([refresh]) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.027321}, "macro.dbt_external_tables.spark__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.spark__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/get_external_build_plan.sql", "original_file_path": "macros/plugins/spark/get_external_build_plan.sql", "name": "spark__get_external_build_plan", "macro_sql": "{% macro spark__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = none,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [\n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% set recover_partitions = spark__recover_partitions(source_node) %}\n    {% if recover_partitions|length > 0 %}\n    {% set build_plan = build_plan + [\n        recover_partitions\n    ] %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table", "macro.dbt_external_tables.spark__recover_partitions"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.029508}, "macro.dbt_external_tables.spark__recover_partitions": {"unique_id": "macro.dbt_external_tables.spark__recover_partitions", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "name": "spark__recover_partitions", "macro_sql": "{% macro spark__recover_partitions(source_node) %}\n    {# https://docs.databricks.com/sql/language-manual/sql-ref-syntax-ddl-alter-table.html #}\n\n    {% set ddl %}\n    {%- if source_node.external.partitions and source_node.external.using and source_node.external.using|lower != 'delta' -%}\n        ALTER TABLE {{ source(source_node.source_name, source_node.name) }} RECOVER PARTITIONS\n    {%- endif -%}\n    {% endset %}\n\n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.0305789}, "macro.dbt_external_tables.spark__dropif": {"unique_id": "macro.dbt_external_tables.spark__dropif", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/helpers/dropif.sql", "original_file_path": "macros/plugins/spark/helpers/dropif.sql", "name": "spark__dropif", "macro_sql": "{% macro spark__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}}\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.031329}, "macro.dbt_external_tables.create_external_table": {"unique_id": "macro.dbt_external_tables.create_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_external_tables", "path": "macros/common/create_external_table.sql", "original_file_path": "macros/common/create_external_table.sql", "name": "create_external_table", "macro_sql": "{% macro create_external_table(source_node) %}\n    {{ adapter.dispatch('create_external_table', 'dbt_external_tables')(source_node) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__create_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.031904}, "macro.dbt_external_tables.default__create_external_table": {"unique_id": "macro.dbt_external_tables.default__create_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_external_tables", "path": "macros/common/create_external_table.sql", "original_file_path": "macros/common/create_external_table.sql", "name": "default__create_external_table", "macro_sql": "{% macro default__create_external_table(source_node) %}\n    {{ exceptions.raise_compiler_error(\"External table creation is not implemented for the default adapter\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.032156}, "macro.dbt_external_tables.refresh_external_table": {"unique_id": "macro.dbt_external_tables.refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_external_tables", "path": "macros/common/refresh_external_table.sql", "original_file_path": "macros/common/refresh_external_table.sql", "name": "refresh_external_table", "macro_sql": "{% macro refresh_external_table(source_node) %}\n    {{ return(adapter.dispatch('refresh_external_table', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.032737}, "macro.dbt_external_tables.default__refresh_external_table": {"unique_id": "macro.dbt_external_tables.default__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_external_tables", "path": "macros/common/refresh_external_table.sql", "original_file_path": "macros/common/refresh_external_table.sql", "name": "default__refresh_external_table", "macro_sql": "{% macro default__refresh_external_table(source_node) %}\n    {% do return([]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.032989}, "macro.dbt_external_tables.get_external_build_plan": {"unique_id": "macro.dbt_external_tables.get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_external_tables", "path": "macros/common/get_external_build_plan.sql", "original_file_path": "macros/common/get_external_build_plan.sql", "name": "get_external_build_plan", "macro_sql": "{% macro get_external_build_plan(source_node) %}\n    {{ return(adapter.dispatch('get_external_build_plan', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__get_external_build_plan"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.033639}, "macro.dbt_external_tables.default__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.default__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_external_tables", "path": "macros/common/get_external_build_plan.sql", "original_file_path": "macros/common/get_external_build_plan.sql", "name": "default__get_external_build_plan", "macro_sql": "{% macro default__get_external_build_plan(source_node) %}\n    {{ exceptions.raise_compiler_error(\"Staging external sources is not implemented for the default adapter\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.033896}, "macro.dbt_external_tables.stage_external_sources": {"unique_id": "macro.dbt_external_tables.stage_external_sources", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_external_tables", "path": "macros/common/stage_external_sources.sql", "original_file_path": "macros/common/stage_external_sources.sql", "name": "stage_external_sources", "macro_sql": "{% macro stage_external_sources(select=none) %}\n\n    {% set sources_to_stage = [] %}\n    \n    {% set source_nodes = graph.sources.values() if graph.sources else [] %}\n    \n    {% for node in source_nodes %}\n        {% if node.external %}\n            \n            {% if select %}\n            \n                {% for src in select.split(' ') %}\n                \n                    {% if '.' in src %}\n                        {% set src_s = src.split('.') %}\n                        {% if src_s[0] == node.source_name and src_s[1] == node.name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% else %}\n                        {% if src == node.source_name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% endif %}\n                    \n                {% endfor %}\n                        \n            {% else %}\n            \n                {% do sources_to_stage.append(node) %}\n                \n            {% endif %}\n        {% endif %}\n        \n    {% endfor %}\n    \n    {% if sources_to_stage|length == 0 %}\n        {% do log('No external sources selected', info = true) %}\n    {% endif %}\n            \n    {% for node in sources_to_stage %}\n\n        {% set loop_label = loop.index ~ ' of ' ~ loop.length %}\n\n        {% do log(loop_label ~ ' START external source ' ~ node.schema ~ '.' ~ node.identifier, info = true) -%}\n        \n        {% set run_queue = dbt_external_tables.get_external_build_plan(node) %}\n        \n        {% do log(loop_label ~ ' SKIP', info = true) if run_queue == [] %}\n        {% set width = flags.PRINTER_WIDTH %}\n        \n        {% for q in run_queue %}\n        \n            {% set q_msg = q|replace('\\n','')|replace('begin;','')|trim %}\n            {% set q_log = q_msg[:width] ~ '...  ' if q_msg|length > width else q_msg %}\n        \n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ q_log, info = true) %}\n            {% set exit_txn = dbt_external_tables.exit_transaction() %}\n        \n            {% call statement('runner', fetch_result = True, auto_begin = False) %}\n                {{ exit_txn }} {{ q }}\n            {% endcall %}\n            \n            {% set runner = load_result('runner') %}\n            {% set log_msg = runner['response'] if 'response' in runner.keys() else runner['status'] %}\n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ log_msg, info = true) %}\n            \n        {% endfor %}\n        \n    {% endfor %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.get_external_build_plan", "macro.dbt_external_tables.exit_transaction", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.042326}, "macro.dbt_external_tables.dropif": {"unique_id": "macro.dbt_external_tables.dropif", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_external_tables", "path": "macros/common/helpers/dropif.sql", "original_file_path": "macros/common/helpers/dropif.sql", "name": "dropif", "macro_sql": "{% macro dropif(node) %}\n    {{ adapter.dispatch('dropif', 'dbt_external_tables')(node) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.default__dropif"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.042957}, "macro.dbt_external_tables.default__dropif": {"unique_id": "macro.dbt_external_tables.default__dropif", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_external_tables", "path": "macros/common/helpers/dropif.sql", "original_file_path": "macros/common/helpers/dropif.sql", "name": "default__dropif", "macro_sql": "{% macro default__dropif() %}\n    {{ exceptions.raise_compiler_error(\n        \"Dropping external tables is not implemented for the default adapter\"\n    ) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.043206}, "macro.dbt_external_tables.exit_transaction": {"unique_id": "macro.dbt_external_tables.exit_transaction", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_external_tables", "path": "macros/common/helpers/transaction.sql", "original_file_path": "macros/common/helpers/transaction.sql", "name": "exit_transaction", "macro_sql": "{% macro exit_transaction() %}\n    {{ return(adapter.dispatch('exit_transaction', 'dbt_external_tables')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.default__exit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.043777}, "macro.dbt_external_tables.default__exit_transaction": {"unique_id": "macro.dbt_external_tables.default__exit_transaction", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_external_tables", "path": "macros/common/helpers/transaction.sql", "original_file_path": "macros/common/helpers/transaction.sql", "name": "default__exit_transaction", "macro_sql": "{% macro default__exit_transaction() %}\n    {{ return('') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.0439968}, "macro.dbt_expectations.type_timestamp": {"unique_id": "macro.dbt_expectations.type_timestamp", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_expectations')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.0450728}, "macro.dbt_expectations.default__type_timestamp": {"unique_id": "macro.dbt_expectations.default__type_timestamp", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() -%}\n    timestamp\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.045323}, "macro.dbt_expectations.snowflake__type_timestamp": {"unique_id": "macro.dbt_expectations.snowflake__type_timestamp", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() -%}\n    timestamp_ntz\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.045548}, "macro.dbt_expectations.postgres__type_timestamp": {"unique_id": "macro.dbt_expectations.postgres__type_timestamp", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() -%}\n    timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.045794}, "macro.dbt_expectations.type_datetime": {"unique_id": "macro.dbt_expectations.type_datetime", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "type_datetime", "macro_sql": "{% macro type_datetime() -%}\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.046112}, "macro.dbt_expectations.default__type_datetime": {"unique_id": "macro.dbt_expectations.default__type_datetime", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "default__type_datetime", "macro_sql": "{% macro default__type_datetime() -%}\n    datetime\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.046256}, "macro.dbt_expectations.snowflake__type_datetime": {"unique_id": "macro.dbt_expectations.snowflake__type_datetime", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "snowflake__type_datetime", "macro_sql": "{% macro snowflake__type_datetime() -%}\n    timestamp_ntz\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.046446}, "macro.dbt_expectations.postgres__type_datetime": {"unique_id": "macro.dbt_expectations.postgres__type_datetime", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "postgres__type_datetime", "macro_sql": "{% macro postgres__type_datetime() -%}\n    timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.046585}, "macro.dbt_expectations.group_by": {"unique_id": "macro.dbt_expectations.group_by", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/utils/groupby.sql", "original_file_path": "macros/utils/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_expectations')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.0473669}, "macro.dbt_expectations.default__group_by": {"unique_id": "macro.dbt_expectations.default__group_by", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/utils/groupby.sql", "original_file_path": "macros/utils/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}\n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.04785}, "macro.dbt_expectations.regexp_instr": {"unique_id": "macro.dbt_expectations.regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "regexp_instr", "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1, is_raw=False) %}\n\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\n        source_value, regexp, position, occurrence, is_raw\n    ) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__regexp_instr"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.049072}, "macro.dbt_expectations.default__regexp_instr": {"unique_id": "macro.dbt_expectations.default__regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "default__regexp_instr", "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence, is_raw) %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.0494459}, "macro.dbt_expectations.snowflake__regexp_instr": {"unique_id": "macro.dbt_expectations.snowflake__regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "snowflake__regexp_instr", "macro_sql": "{% macro snowflake__regexp_instr(source_value, regexp, position, occurrence, is_raw) %}\n{%- set regexp = \"$$\" ~ regexp ~ \"$$\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.050015}, "macro.dbt_expectations.bigquery__regexp_instr": {"unique_id": "macro.dbt_expectations.bigquery__regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "bigquery__regexp_instr", "macro_sql": "{% macro bigquery__regexp_instr(source_value, regexp, position, occurrence, is_raw) %}\n{%- set regexp = \"r'\" ~ regexp ~ \"'\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.0507038}, "macro.dbt_expectations.postgres__regexp_instr": {"unique_id": "macro.dbt_expectations.postgres__regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "postgres__regexp_instr", "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence, is_raw) %}\narray_length((select regexp_matches({{ source_value }}, '{{ regexp }}')), 1)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.051009}, "macro.dbt_expectations.redshift__regexp_instr": {"unique_id": "macro.dbt_expectations.redshift__regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "redshift__regexp_instr", "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence, is_raw) %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.0513742}, "macro.dbt_expectations.log_natural": {"unique_id": "macro.dbt_expectations.log_natural", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "log_natural", "macro_sql": "{% macro log_natural(x) -%}\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__log_natural"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.052072}, "macro.dbt_expectations.default__log_natural": {"unique_id": "macro.dbt_expectations.default__log_natural", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "default__log_natural", "macro_sql": "{% macro default__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.052268}, "macro.dbt_expectations.bigquery__log_natural": {"unique_id": "macro.dbt_expectations.bigquery__log_natural", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "bigquery__log_natural", "macro_sql": "{% macro bigquery__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.052514}, "macro.dbt_expectations.snowflake__log_natural": {"unique_id": "macro.dbt_expectations.snowflake__log_natural", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "snowflake__log_natural", "macro_sql": "{% macro snowflake__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.052763}, "macro.dbt_expectations.rand": {"unique_id": "macro.dbt_expectations.rand", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "rand", "macro_sql": "{% macro rand() -%}\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__rand"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.053468}, "macro.dbt_expectations.default__rand": {"unique_id": "macro.dbt_expectations.default__rand", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "default__rand", "macro_sql": "{% macro default__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.053616}, "macro.dbt_expectations.bigquery__rand": {"unique_id": "macro.dbt_expectations.bigquery__rand", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "bigquery__rand", "macro_sql": "{% macro bigquery__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.053788}, "macro.dbt_expectations.snowflake__rand": {"unique_id": "macro.dbt_expectations.snowflake__rand", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "snowflake__rand", "macro_sql": "{% macro snowflake__rand(seed) -%}\n\n    uniform(0::float, 1::float, random())\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.053969}, "macro.dbt_expectations.postgres__rand": {"unique_id": "macro.dbt_expectations.postgres__rand", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "postgres__rand", "macro_sql": "{% macro postgres__rand() -%}\n\n    random()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.054106}, "macro.dbt_expectations.redshift__rand": {"unique_id": "macro.dbt_expectations.redshift__rand", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "redshift__rand", "macro_sql": "{% macro redshift__rand() -%}\n\n    random()\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.054243}, "macro.dbt_expectations.median": {"unique_id": "macro.dbt_expectations.median", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/math/median.sql", "original_file_path": "macros/math/median.sql", "name": "median", "macro_sql": "{% macro median(field) %}\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.0549178}, "macro.dbt_expectations.percentile_cont": {"unique_id": "macro.dbt_expectations.percentile_cont", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "percentile_cont", "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__quantile"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.055792}, "macro.dbt_expectations.default__quantile": {"unique_id": "macro.dbt_expectations.default__quantile", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "default__quantile", "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.056421}, "macro.dbt_expectations.bigquery__quantile": {"unique_id": "macro.dbt_expectations.bigquery__quantile", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "bigquery__quantile", "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) -%}\n    percentile_cont({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.057009}, "macro.dbt_expectations.ignore_row_if_expression": {"unique_id": "macro.dbt_expectations.ignore_row_if_expression", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "name": "ignore_row_if_expression", "macro_sql": "{% macro ignore_row_if_expression(ignore_row_if, columns) %}\n    {{ adapter.dispatch('ignore_row_if_expression', 'dbt_expectations') (ignore_row_if, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.058122}, "macro.dbt_expectations.default__ignore_row_if_expression": {"unique_id": "macro.dbt_expectations.default__ignore_row_if_expression", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "name": "default__ignore_row_if_expression", "macro_sql": "{% macro default__ignore_row_if_expression(ignore_row_if, columns) %}\n  {%- set ignore_row_if_values = [\"all_values_are_missing\", \"any_value_is_missing\"] -%}\n    {% if ignore_row_if not in ignore_row_if_values %}\n        {{ exceptions.raise_compiler_error(\n            \"`ignore_row_if` must be one of \" ~ (ignore_row_if_values | join(\", \")) ~ \". Got: '\" ~ ignore_row_if ~\"'.'\"\n        ) }}\n    {% endif %}\n\n    {%- set op = \"and\" if ignore_row_if == \"all_values_are_missing\" else \"or\" -%}\n    not (\n        {% for column in columns -%}\n        {{ column }} is null{% if not loop.last %} {{ op }} {% endif %}\n        {% endfor %}\n    )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.059322}, "macro.dbt_expectations.test_expression_between": {"unique_id": "macro.dbt_expectations.test_expression_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "name": "test_expression_between", "macro_sql": "{% test expression_between(model,\n                                 expression,\n                                 min_value=None,\n                                 max_value=None,\n                                 group_by_columns=None,\n                                 row_condition=None,\n                                 strictly=False\n                                 ) %}\n\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.06127}, "macro.dbt_expectations.expression_between": {"unique_id": "macro.dbt_expectations.expression_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "name": "expression_between", "macro_sql": "{% macro expression_between(model,\n                            expression,\n                            min_value,\n                            max_value,\n                            group_by_columns,\n                            row_condition,\n                            strictly\n                            ) %}\n\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\n\n{% set expression_min_max %}\n( 1=1\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\n)\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression_min_max,\n                                        group_by_columns=group_by_columns,\n                                        row_condition=row_condition)\n                                        }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.063105}, "macro.dbt_expectations.test_expression_is_true": {"unique_id": "macro.dbt_expectations.test_expression_is_true", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.0647502}, "macro.dbt_expectations.expression_is_true": {"unique_id": "macro.dbt_expectations.expression_is_true", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "expression_is_true", "macro_sql": "{% macro expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.065293}, "macro.dbt_expectations.default__expression_is_true": {"unique_id": "macro.dbt_expectations.default__expression_is_true", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "default__expression_is_true", "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\nwith grouped_expression as (\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ dbt_expectations.truth_expression(expression) }}\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.0664551}, "macro.dbt_expectations.get_select": {"unique_id": "macro.dbt_expectations.get_select", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "get_select", "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__get_select"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.073741}, "macro.dbt_expectations.default__get_select": {"unique_id": "macro.dbt_expectations.default__get_select", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "default__get_select", "macro_sql": "\n\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\n    select\n        {% if group_by %}\n        {% for g in group_by -%}\n            {{ g }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by %}\n    group by\n        {% for g in group_by -%}\n            {{ loop.index }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.074903}, "macro.dbt_expectations.test_equal_expression": {"unique_id": "macro.dbt_expectations.test_equal_expression", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "test_equal_expression", "macro_sql": "{% test equal_expression(model, expression,\n                                compare_model=None,\n                                compare_expression=None,\n                                group_by=None,\n                                compare_group_by=None,\n                                row_condition=None,\n                                compare_row_condition=None,\n                                tolerance=0.0,\n                                tolerance_percent=None\n                                ) -%}\n\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.075785}, "macro.dbt_expectations.default__test_equal_expression": {"unique_id": "macro.dbt_expectations.default__test_equal_expression", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "default__test_equal_expression", "macro_sql": "\n\n{%- macro default__test_equal_expression(\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        {% if n_cols > 0 %}\n            a\n            full outer join\n            b on\n            {% for i in range(1, n_cols + 1) -%}\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n            {% endfor -%}\n        {% else %}\n            a cross join b\n        {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.get_select"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.0781472}, "macro.dbt_expectations.truth_expression": {"unique_id": "macro.dbt_expectations.truth_expression", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "name": "truth_expression", "macro_sql": "{% macro truth_expression(expression) %}\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.0789492}, "macro.dbt_expectations.default__truth_expression": {"unique_id": "macro.dbt_expectations.default__truth_expression", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "name": "default__truth_expression", "macro_sql": "{% macro default__truth_expression(expression) %}\n  {{ expression }} as expression\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.0792}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "name": "test_expect_column_values_to_match_like_pattern", "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.080586}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "name": "test_expect_column_values_to_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.0825229}, "macro.dbt_expectations.test_expect_column_values_to_match_regex": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "name": "test_expect_column_values_to_match_regex", "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw) }} > 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.083746}, "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "name": "test_expect_column_value_lengths_to_equal", "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\n                                                    value,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = length(column_name) ~ \" = \" ~ value %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.length", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.0847301}, "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "name": "test_expect_column_value_lengths_to_be_between", "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\n                                                         min_value=None,\n                                                         max_value=None,\n                                                         row_condition=None,\n                                                         strictly=False\n                                                      ) %}\n{% set expression %}\n{{ length(column_name) }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.length", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.086102}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "name": "test_expect_column_values_to_not_match_regex", "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw) }} = 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.087329}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "name": "test_expect_column_values_to_not_match_regex_list", "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False\n                                                    ) %}\n\n{% set expression %}\n{% for regex in regex_list %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw) }} = 0\n{%- if not loop.last %}\n{{ \" and \" if match_on == \"all\" else \" or \"}}\n{% endif -%}\n{% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.0891478}, "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "name": "test_expect_column_values_to_match_regex_list", "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False\n                                                    ) %}\n\n{% set expression %}\n    {% for regex in regex_list %}\n    {{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw) }} > 0\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.0916421}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "name": "test_expect_column_values_to_not_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.093576}, "macro.dbt_expectations._get_like_pattern_expression": {"unique_id": "macro.dbt_expectations._get_like_pattern_expression", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "original_file_path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "name": "_get_like_pattern_expression", "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.094226}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "name": "test_expect_column_values_to_not_match_like_pattern", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.095244}, "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "name": "test_expect_row_values_to_have_recent_data", "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\n                                                column_name,\n                                                datepart,\n                                                interval,\n                                                row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                        column_name,\n                                                                                        datepart,\n                                                                                        interval,\n                                                                                        row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.096968}, "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "name": "default__test_expect_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\n{%- set default_start_date = '1970-01-01' -%}\nwith max_recency as (\n\n    select max(cast({{ column_name }} as {{ type_timestamp() }})) as max_timestamp\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ column_name }} as {{ type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('{{ default_start_date }}' as {{ type_timestamp() }}))\n        <\n        cast({{ dateadd(datepart, interval * -1, dbt_date.now()) }} as {{ type_timestamp() }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.098047}, "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "name": "test_expect_table_columns_to_contain_set", "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        input_columns i\n        left join\n        relation_columns r on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        r.relation_column is null\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.100273}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "name": "test_expect_table_row_count_to_equal_other_table", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model, compare_model, factor=1, row_condition=None, compare_row_condition=None) -%}\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\n    compare_model=compare_model,\n    compare_expression=\"count(*) * \" + factor|string,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.1013608}, "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "name": "test_expect_table_columns_to_not_contain_set", "macro_sql": "{%- test expect_table_columns_to_not_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    -- catch any column in input list that is in the list of table columns\n    select *\n    from\n        input_columns i\n        inner join\n        relation_columns r on r.relation_column = i.input_column\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.103774}, "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "name": "test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\n                                                        group_by,\n                                                        timestamp_column,\n                                                        datepart,\n                                                        interval,\n                                                        row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                                group_by,\n                                                                                                timestamp_column,\n                                                                                                datepart,\n                                                                                                interval,\n                                                                                                row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.107198}, "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "name": "default__test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\n                                                                        group_by,\n                                                                        timestamp_column,\n                                                                        datepart,\n                                                                        interval,\n                                                                        row_condition) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        max(cast({{ timestamp_column }} as {{ type_timestamp() }})) as latest_timestamp_column\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ timestamp_column }} as {{ type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n),\ntotal_row_counts as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        -- are the max timestamps per group older than the specified cutoff?\n        latest_timestamp_column <\n            cast(\n                {{ dateadd(datepart, interval * -1, dbt_date.now()) }}\n                as {{ type_timestamp() }}\n            )\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on\n            {% for g in group_by %}\n            r.{{ g }} = t.{{ g }} and\n            {% endfor %}\n            r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt_expectations.group_by", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.1090188}, "macro.dbt_expectations.test_expect_column_to_exist": {"unique_id": "macro.dbt_expectations.test_expect_column_to_exist", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "original_file_path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "name": "test_expect_column_to_exist", "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | map(transform) | join -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\n\n    {%- if column_index -%}\n\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\n\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\n\n    {%- else -%}\n\n        {%- set column_index_matches = true -%}\n\n    {%- endif %}\n\n    with test_data as (\n\n        select\n            cast('{{ column_name }}' as {{ type_string() }}) as column_name,\n            {{ matching_column_index }} as matching_column_index,\n            {{ column_index_matches }} as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.111161}, "macro.dbt_expectations.test_expect_table_row_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "name": "test_expect_table_row_count_to_equal", "macro_sql": "{%- test expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\n                        'dbt_expectations') (model,\n                                                                        value,\n                                                                        group_by,\n                                                                        row_condition\n                                                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.1131132}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {"unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "name": "default__test_expect_table_row_count_to_equal", "macro_sql": "\n\n\n\n{%- macro default__test_expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) -%}\n{% set expression %}\ncount(*) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.113787}, "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "name": "test_expect_table_row_count_to_be_between", "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n{% set expression %}\ncount(*)\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.115314}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "name": "test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model, compare_model, factor, row_condition=None, compare_row_condition=None) -%}\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model, compare_model,\n    factor=factor,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.116081}, "macro.dbt_expectations.test_expect_table_columns_to_match_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "name": "test_expect_table_columns_to_match_set", "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.118391}, "macro.dbt_expectations._get_column_list": {"unique_id": "macro.dbt_expectations._get_column_list", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/_get_column_list.sql", "original_file_path": "macros/schema_tests/table_shape/_get_column_list.sql", "name": "_get_column_list", "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\n{%- do return(relation_column_names) -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.1192331}, "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "name": "test_expect_table_columns_to_match_ordered_list", "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select\n            {{ loop.index }} as relation_column_idx,\n            cast('{{ col_name }}' as {{ type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select\n            {{ loop.index }} as input_column_idx,\n            cast('{{ col_name }}' as {{ type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.121753}, "macro.dbt_expectations._list_intersect": {"unique_id": "macro.dbt_expectations._list_intersect", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/_list_intersect.sql", "original_file_path": "macros/schema_tests/table_shape/_list_intersect.sql", "name": "_list_intersect", "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\n{%- set matching_items = [] -%}\n{%- for itm in list1 -%}\n    {%- if itm in list2 -%}\n        {%- do matching_items.append(itm) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- do return(matching_items) -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.1226492}, "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "name": "test_expect_table_column_count_to_equal_other_table", "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\n{%- if execute -%}\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_columns }} as number_columns,\n        {{ compare_number_columns }} as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.123693}, "macro.dbt_expectations.test_expect_table_column_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "name": "test_expect_table_column_count_to_equal", "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ value }} as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.124785}, "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "name": "test_expect_table_column_count_to_be_between", "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\n                                                        min_value=None,\n                                                        max_value=None\n                                                        ) -%}\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\n\n{%- set expression %}\n( 1=1\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\n)\n{% endset -%}\n\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ min_value if min_value else 0 }} as min_value,\n        {{ max_value if max_value else 0 }} as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not {{ expression }}\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.126785}, "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "name": "test_expect_column_values_to_not_be_in_set", "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.128417}, "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "name": "test_expect_column_values_to_be_in_set", "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.1301079}, "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "name": "test_expect_column_values_to_be_increasing", "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \">\" if strictly else \">=\" -%}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.13249}, "macro.dbt_expectations.test_expect_column_values_to_be_null": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "name": "test_expect_column_values_to_be_null", "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.1333928}, "macro.dbt_expectations.test_expect_column_values_to_be_unique": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "name": "test_expect_column_values_to_be_unique", "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.1339898}, "macro.dbt_expectations.test_expect_column_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "name": "test_expect_column_values_to_be_between", "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\n                                                   min_value=None,\n                                                   max_value=None,\n                                                   row_condition=None,\n                                                   strictly=False\n                                                   ) %}\n\n{% set expression %}\n{{ column_name }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.135495}, "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "name": "test_expect_column_values_to_be_decreasing", "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \"<\" if strictly else \"<=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.137853}, "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "name": "test_expect_column_values_to_be_in_type_list", "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\n    with relation_columns as (\n\n        {% for column in columns_in_relation %}\n        select\n            cast('{{ column.name | upper }}' as {{ type_string() }}) as relation_column,\n            cast('{{ column.dtype | upper }}' as {{ type_string() }}) as relation_column_type\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '{{ column_name }}'\n            and\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\n\n    )\n    select *\n    from test_data\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.139793}, "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "name": "test_expect_column_values_to_be_of_type", "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.140364}, "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "name": "test_expect_column_values_to_have_consistent_casing", "macro_sql": "{% test expect_column_values_to_have_consistent_casing(model, column_name, display_inconsistent_columns=False) %}\n\nwith test_data as (\n\n    select\n        distinct {{ column_name }} as distinct_values\n    from\n        {{ model }}\n\n ),\n {% if display_inconsistent_columns %}\n validation_errors as (\n\n    select\n        lower(distinct_values) as inconsistent_columns,\n        count(distinct_values) as set_count_case_insensitive\n    from\n        test_data\n    group by 1\n    having\n        count(distinct_values) > 1\n\n )\n select * from validation_errors\n {% else %}\n validation_errors as (\n\n    select\n        count(1) as set_count,\n        count(distinct lower(distinct_values)) as set_count_case_insensitive\n    from\n        test_data\n\n )\n select *\n from\n    validation_errors\n where\n    set_count != set_count_case_insensitive\n {% endif %}\n {%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.141176}, "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "name": "test_expect_column_values_to_not_be_null", "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is not null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.142163}, "macro.dbt_expectations.test_expect_column_min_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "name": "test_expect_column_min_to_be_between", "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\nmin({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.143594}, "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "name": "test_expect_column_unique_value_count_to_be_between", "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.144999}, "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "name": "test_expect_column_quantile_values_to_be_between", "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\n                                                            quantile,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n\n{% set expression %}\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.147137}, "macro.dbt_expectations.test_expect_column_median_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "name": "test_expect_column_median_to_be_between", "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.median(column_name) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.median", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.148851}, "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "name": "test_expect_column_proportion_of_unique_values_to_be_between", "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})/count({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.150385}, "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "name": "test_expect_column_distinct_values_to_equal_set", "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as column_value\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.column_value = s.value_field\n    where\n        v.column_value is null or\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.152013}, "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "name": "test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values=False,\n                                                            data_type=\"decimal\",\n                                                            row_condition=None\n                                                            ) -%}\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (model, column_name, value_set, top_n, quote_values, data_type, row_condition) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.15447}, "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {"unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "name": "default__test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values,\n                                                            data_type,\n                                                            row_condition\n                                                            ) %}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.155909}, "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "name": "test_expect_column_distinct_values_to_contain_set", "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.15766}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "name": "test_expect_column_distinct_count_to_equal", "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\n                                                    column_name,\n                                                    value,\n                                                    quote_values=False,\n                                                    group_by=None,\n                                                    row_condition=None\n                                                    ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.159389}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_less_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_less_than.sql", "name": "test_expect_column_distinct_count_to_be_less_than", "macro_sql": "{% test expect_column_distinct_count_to_be_less_than(model,\n                                                                column_name,\n                                                                value,\n                                                                quote_values=False,\n                                                                group_by=None,\n                                                                row_condition=None\n                                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) < {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.160684}, "macro.dbt_expectations.test_expect_column_sum_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "name": "test_expect_column_sum_to_be_between", "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nsum({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.162071}, "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "name": "test_expect_column_stdev_to_be_between", "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.164421}, "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {"unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "name": "default__test_expect_column_stdev_to_be_between", "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) %}\n\n{% set expression %}\nstddev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.165165}, "macro.dbt_expectations.test_expect_column_mean_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "name": "test_expect_column_mean_to_be_between", "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\navg({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.166629}, "macro.dbt_expectations.test_expect_column_max_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "name": "test_expect_column_max_to_be_between", "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nmax({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.16802}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "name": "test_expect_column_distinct_count_to_be_greater_than", "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\n                                                                column_name,\n                                                                value,\n                                                                quote_values=False,\n                                                                group_by=None,\n                                                                row_condition=None\n                                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) > {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.1696892}, "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "name": "test_expect_column_distinct_values_to_be_in_set", "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model, column_name,\n                                                    value_set,\n                                                    quote_values=False,\n                                                    row_condition=None\n                                                    ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.1715388}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "name": "test_expect_column_distinct_count_to_equal_other_table", "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\n                                                                compare_model,\n                                                                column_name,\n                                                                compare_column_name,\n                                                                row_condition=None,\n                                                                compare_row_condition=None\n                                                                ) %}\n{%- set expression -%}\ncount(distinct {{ column_name }})\n{%- endset -%}\n{%- set compare_expression -%}\n{%- if compare_column_name -%}\ncount(distinct {{ compare_column_name }})\n{%- else -%}\n{{ expression }}\n{%- endif -%}\n{%- endset -%}\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.1729941}, "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {"unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "original_file_path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "name": "test_expect_row_values_to_have_data_for_every_n_datepart", "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\n                                                            date_col,\n                                                            date_part=\"day\",\n                                                            interval=None,\n                                                            row_condition=None,\n                                                            exclusion_condition=None,\n                                                            test_start_date=None,\n                                                            test_end_date=None) -%}\n{% if not execute %}\n    {{ return('') }}\n{% endif %}\n\n{% if not test_start_date or not test_end_date %}\n    {% set sql %}\n\n        select\n            min({{ date_col }}) as start_{{ date_part }},\n            max({{ date_col }}) as end_{{ date_part }}\n        from {{ model }}\n        {% if row_condition %}\n        where {{ row_condition }}\n        {% endif %}\n\n    {% endset %}\n\n    {%- set dr = run_query(sql) -%}\n    {%- set db_start_date = dr.columns[0].values()[0].strftime('%Y-%m-%d') -%}\n    {%- set db_end_date = dr.columns[1].values()[0].strftime('%Y-%m-%d') -%}\n\n{% endif %}\n\n{% if not test_start_date %}\n{% set start_date = db_start_date %}\n{% else %}\n{% set start_date = test_start_date %}\n{% endif %}\n\n\n{% if not test_end_date %}\n{% set end_date = db_end_date %}\n{% else %}\n{% set end_date = test_end_date %}\n{% endif %}\nwith base_dates as (\n\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\n    {% if interval %}\n    {#\n        Filter the date spine created above down to the interval granularity using a modulo operation.\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals,\n        e.g. for 2-day interval from a starting Jan 1, 2020:\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\n    #}\n    where mod(\n            cast({{ datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ type_int() }}),\n            cast({{interval}} as {{ type_int() }})\n        ) = 0\n    {% endif %}\n\n),\nmodel_data as (\n\n    select\n    {% if not interval %}\n\n        cast({{ date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n\n    {% else %}\n        {#\n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine\n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\n                all of which align with records from the interval-date spine\n        #}\n        {{dateadd(\n            date_part,\n            \"mod(\n                cast(\" ~ datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ type_int() ~ \" ),\n                cast(\" ~ interval ~ \" as  \" ~ type_int() ~ \" )\n            ) * (-1)\",\n            \"cast( \" ~ date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\n        )}} as date_{{ date_part }},\n\n    {% endif %}\n\n        count(*) as row_cnt\n    from\n        {{ model }} f\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n    group by\n        date_{{date_part}}\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n{% if exclusion_condition %}\n  and {{ exclusion_condition }}\n{% endif %}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_date.get_base_dates", "macro.dbt_utils.datediff", "macro.dbt_utils.type_int", "macro.dbt_utils.date_trunc", "macro.dbt_expectations.type_datetime", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.180104}, "macro.dbt_expectations._get_metric_expression": {"unique_id": "macro.dbt_expectations._get_metric_expression", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "_get_metric_expression", "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.log_natural"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.186302}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by=None,\n                                  period='day',\n                                  lookback_periods=1,\n                                  trend_periods=7,\n                                  test_periods=14,\n                                  sigma_threshold=3,\n                                  sigma_threshold_upper=None,\n                                  sigma_threshold_lower=None,\n                                  take_diffs=true,\n                                  take_logs=true\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.187336}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {"unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "default__test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n{%- set partition_by = \"partition by \" ~ (group_by | join(\",\")) if group_by -%}\n{%- set group_by_length = (group_by | length ) if group_by else 0 -%}\n\nwith metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            {{ date_trunc(period, date_column_name) }} as metric_period,\n            {{ group_by | join(\",\") ~ \",\" if group_by }}\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        {{  dbt_expectations.group_by(1 + group_by_length) }}\n\n    )\n    {%- if take_diffs %}\n    , grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, {{ lookback_periods }}) over(\n                {{ partition_by }}\n                order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n    {%- else %}\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values\n\n    {%- endif %}\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/\n            nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dateadd(period, -test_periods, date_trunc(period, dbt_date.now())) }}\n            as {{ type_timestamp() }})\n    and\n    metric_period < {{ date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_expectations.group_by", "macro.dbt_expectations._get_metric_expression", "macro.dbt_utils.dateadd", "macro.dbt_date.now", "macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.1900392}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "name": "test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by=None,\n                                  sigma_threshold=3\n                                ) -%}\n    {{\n        adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (\n            model, column_name, group_by, sigma_threshold\n        )\n    }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.192047}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {"unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "name": "default__test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\n\nwith metric_values as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/\n            nullif({{ column_name }}_stddev, 0) as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.193258}, "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {"unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "name": "test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    )  -%}\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.195641}, "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {"unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "name": "default__test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith column_values as (\n\n    select\n        row_number() over(order by 1) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ column }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.1977239}, "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {"unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "original_file_path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "name": "test_expect_compound_columns_to_be_unique", "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                column_list,\n                                                quote_columns=False,\n                                                ignore_row_if=\"all_values_are_missing\",\n                                                row_condition=None\n                                                ) %}\n{% if not column_list %}\n    {{ exceptions.raise_compiler_error(\n        \"`column_list` must be specified as a list of columns. Got: '\" ~ column_list ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.2011771}, "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "name": "test_expect_multicolumn_sum_to_equal", "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\n                                                column_list,\n                                                sum_total,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n\n{% set expression %}\n{% for column in column_list %}\nsum({{ column }}){% if not loop.last %} + {% endif %}\n{% endfor %} = {{ sum_total }}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.203137}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "name": "test_expect_column_pair_values_to_be_equal", "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\n                                                        column_A,\n                                                        column_B,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set operator = \"=\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.204444}, "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "name": "test_expect_column_pair_values_A_to_be_greater_than_B", "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\n                                                                column_A,\n                                                                column_B,\n                                                                or_equal=False,\n                                                                row_condition=None\n                                                                ) %}\n\n{% set operator = \">=\" if or_equal else \">\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.205728}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/polygon-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "name": "test_expect_column_pair_values_to_be_in_set", "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\n                                                        column_A,\n                                                        column_B,\n                                                        value_pairs_set,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set expression %}\n{% for pair in value_pairs_set %}\n{%- if (pair | length) == 2 %}\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\n{% else %}\n{{ exceptions.raise_compiler_error(\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\n        Got: '\" ~ pair ~ \"'.'\"\n    ) }}\n{% endif %}\n{% endfor %}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669126488.208087}, "macro.polygon_models.create_transactions_history": {"unique_id": "macro.polygon_models.create_transactions_history", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "macros/streamline/transactions_history.sql", "original_file_path": "macros/streamline/transactions_history.sql", "name": "create_transactions_history", "macro_sql": "{% macro create_transactions_history() %}\n    {% set sql %}\n    CREATE\n    OR REPLACE PROCEDURE streamline.transactions_history() returns variant LANGUAGE SQL AS $$\nDECLARE\n    RESULT variant;\nrow_cnt INTEGER;\nBEGIN\n    row_cnt:= (\n        SELECT\n            COUNT(1)\n        FROM\n            {{ ref('streamline__transactions_history') }}\n    );\nif (\n        row_cnt > 0\n    ) THEN RESULT:= (\n        SELECT\n            streamline.udf_get_transactions()\n    );\n    ELSE RESULT:= NULL;\nEND if;\nRETURN RESULT;\nEND;$$ {% endset %}\n{% do run_query(sql) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669664396.4449978}, "macro.polygon_models.create_transactions_realtime": {"unique_id": "macro.polygon_models.create_transactions_realtime", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "macros/streamline/transactions_realtime.sql", "original_file_path": "macros/streamline/transactions_realtime.sql", "name": "create_transactions_realtime", "macro_sql": "{% macro create_transactions_realtime() %}\n    {% set sql %}\n    CREATE\n    OR REPLACE PROCEDURE streamline.transactions_realtime() returns variant LANGUAGE SQL AS $$\nDECLARE\n    RESULT variant;\nrow_cnt INTEGER;\nBEGIN\n    row_cnt:= (\n        SELECT\n            COUNT(1)\n        FROM\n            {{ ref('streamline__transactions_realtime') }}\n    );\nif (\n        row_cnt > 0\n    ) THEN RESULT:= (\n        SELECT\n            streamline.udf_get_transactions()\n    );\n    ELSE RESULT:= NULL;\nEND if;\nRETURN RESULT;\nEND;$$ {% endset %}\n{% do run_query(sql) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669664396.446054}, "macro.polygon_models.create_udfs": {"unique_id": "macro.polygon_models.create_udfs", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "macros/create_udfs.sql", "original_file_path": "macros/create_udfs.sql", "name": "create_udfs", "macro_sql": "{% macro create_udfs() %}\n    {% if var(\"UPDATE_UDFS_AND_SPS\") %}\n        {% set sql %}\n        CREATE schema if NOT EXISTS silver;\n    {{ create_js_hex_to_int() }};\n    {{ create_udf_hex_to_int(\n            schema = \"public\"\n        ) }}\n        {{ create_udtf_get_base_table(\n            schema = \"streamline\"\n        ) }}\n\n        {% endset %}\n        {% do run_query(sql) %}\n        {% if target.database != \"POLYGON_COMMUNITY_DEV\" %}\n            {% set sql %}\n            {{ create_udf_get_chainhead() }}\n            {{ create_udf_get_blocks() }}\n            {{ create_udf_get_transactions() }}\n\n            {% endset %}\n            {% do run_query(sql) %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.polygon_models.create_js_hex_to_int", "macro.polygon_models.create_udf_hex_to_int", "macro.polygon_models.create_udtf_get_base_table", "macro.dbt.run_query", "macro.polygon_models.create_udf_get_chainhead", "macro.polygon_models.create_udf_get_blocks", "macro.polygon_models.create_udf_get_transactions"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669664396.448003}, "macro.polygon_models.create_udf_get_chainhead": {"unique_id": "macro.polygon_models.create_udf_get_chainhead", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "macros/streamline/streamline_udfs.sql", "original_file_path": "macros/streamline/streamline_udfs.sql", "name": "create_udf_get_chainhead", "macro_sql": "{% macro create_udf_get_chainhead() %}\n    CREATE OR REPLACE EXTERNAL FUNCTION streamline.udf_get_chainhead(\n    ) returns variant api_integration = aws_polygon_api AS {% if target.name == \"prod\" %}\n        'https://088pv40k78.execute-api.us-east-1.amazonaws.com/prod/get_chainhead'\n    {% else %}\n        'https://ug2z7nx4bi.execute-api.us-east-1.amazonaws.com/dev/get_chainhead'\n    {%- endif %};\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669664396.4492888}, "macro.polygon_models.create_udf_get_blocks": {"unique_id": "macro.polygon_models.create_udf_get_blocks", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "macros/streamline/streamline_udfs.sql", "original_file_path": "macros/streamline/streamline_udfs.sql", "name": "create_udf_get_blocks", "macro_sql": "{% macro create_udf_get_blocks() %}\n    CREATE OR REPLACE EXTERNAL FUNCTION streamline.udf_get_blocks(\n        json variant\n    ) returns text api_integration = aws_polygon_api AS {% if target.name == \"prod\" %}\n        'https://088pv40k78.execute-api.us-east-1.amazonaws.com/prod/bulk_get_blocks'\n    {% else %}\n        'https://ug2z7nx4bi.execute-api.us-east-1.amazonaws.com/dev/bulk_get_blocks'\n    {%- endif %};\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669664396.450048}, "macro.polygon_models.create_udf_get_transactions": {"unique_id": "macro.polygon_models.create_udf_get_transactions", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "macros/streamline/streamline_udfs.sql", "original_file_path": "macros/streamline/streamline_udfs.sql", "name": "create_udf_get_transactions", "macro_sql": "{% macro create_udf_get_transactions() %}\n    CREATE OR REPLACE EXTERNAL FUNCTION streamline.udf_get_transactions(\n        json variant\n    ) returns text api_integration = aws_polygon_api AS {% if target.name == \"prod\" %}\n        'https://088pv40k78.execute-api.us-east-1.amazonaws.com/prod/bulk_get_transactions'\n    {% else %}\n        'https://ug2z7nx4bi.execute-api.us-east-1.amazonaws.com/dev/bulk_get_transactions'\n    {%- endif %};\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669664396.450494}, "macro.polygon_models.task_get_token_reads": {"unique_id": "macro.polygon_models.task_get_token_reads", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "macros/api_udf/task_get_token_reads.sql", "original_file_path": "macros/api_udf/task_get_token_reads.sql", "name": "task_get_token_reads", "macro_sql": "{% macro task_get_token_reads() %}\n    {% set sql %}\n    EXECUTE IMMEDIATE \n    'create or replace task bronze_api.get_token_reads\n    warehouse = DBT_CLOUD_POLYGON\n    allow_overlapping_execution = false \n    schedule = \\'10 minute\\' \n    as \n    BEGIN \n    INSERT INTO\n    bronze_api.token_reads(\n        contract_address,\n        block_number,\n        function_sig,\n        function_input,\n        read_result,\n        _inserted_timestamp\n) \nwith base as (\nselect \ncontract_address,\ncreated_block\nfrom silver.relevant_token_contracts\nwhere contract_address not in (select contract_address from bronze_api.token_reads)\nlimit 500\n)\n, function_sigs as (\nselect \\'0x313ce567\\' as function_sig, \\'decimals\\' as function_name\nunion select \\'0x06fdde03\\', \\'name\\'\nunion select \\'0x95d89b41\\', \\'symbol\\'\n),\nall_reads as (\nselect *\nfrom base\njoin function_sigs on 1=1\n),\nready_reads as (\nselect \ncontract_address,\ncreated_block,\nfunction_sig,\nconcat(\\'[!\\',contract_address,\\'!,\\', created_block, \\',!\\',function_sig,\\'!,!!]\\') as read_input1,\nreplace(read_input1, $$!$$,$$\\'$$) as read_input\nfrom all_reads\n)\n, batch_reads as (\nselect concat(\\'[\\',listagg(read_input,\\',\\'),\\']\\') as batch_read\nfrom ready_reads\n),\nresults as (\nselect\n    ethereum.streamline.udf_json_rpc_read_calls(\n        node_url,\n        headers,\n        parse_json(batch_read)\n    ) as read_output\nfrom batch_reads\njoin streamline.crosschain.node_mapping \non 1=1 and chain = \\'polygon\\'\nwhere exists (select 1 from ready_reads limit 1)\n)\n, final as (\nselect \nvalue:id::string as read_id,\nvalue:result::string as read_result,\nsplit(read_id,\\'-\\') as read_id_object,\nread_id_object[0]::string as contract_address,\nread_id_object[1]::string as block_number,\nread_id_object[2]::string as function_sig,\nread_id_object[3]::string as function_input\nfrom results,\nlateral flatten(input=> read_output[0]:data)\n)\nselect \ncontract_address,\nblock_number,\nfunction_sig,\nfunction_input,\nread_result,\nsysdate()::timestamp as _inserted_timestamp\nfrom final;\nend;'\n\n{% endset %}\n    {% do run_query(sql) %}\n\n{% if target.database.upper() == 'POLYGON' %}\n    {% set sql %}\n        alter task bronze_api.get_token_reads resume;\n    {% endset %}\n    {% do run_query(sql) %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669681976.829411}, "macro.polygon_models.create_tasks": {"unique_id": "macro.polygon_models.create_tasks", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "macros/create_tasks.sql", "original_file_path": "macros/create_tasks.sql", "name": "create_tasks", "macro_sql": "{% macro create_tasks() %}\n  {% if var(\"UPDATE_UDFS_AND_SPS\") %}\n    {% if target.database == 'POLYGON' %}\n        {{ task_get_abis() }};\n    {% endif %}\n{% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.polygon_models.task_get_abis"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669692076.388569}, "macro.polygon_models.task_get_abis": {"unique_id": "macro.polygon_models.task_get_abis", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "macros/api_udf/task_get_abis.sql", "original_file_path": "macros/api_udf/task_get_abis.sql", "name": "task_get_abis", "macro_sql": "{% macro task_get_abis() %}\n    {% set sql %}\n    EXECUTE IMMEDIATE \n    'create or replace task bronze_api.get_block_explorer_abis\n    warehouse = DBT_CLOUD_POLYGON\n    allow_overlapping_execution = false \n    schedule = \\'10 minute\\' \n    as \n    BEGIN \nINSERT INTO\n    bronze_api.contract_abis(\n        contract_address,\n        abi_data,\n        _inserted_timestamp\n    ) \n    \nWITH api_keys AS (\n        SELECT\n            api_key\n        FROM\n            crosschain.silver.apis_keys\n        WHERE\n            api_name = \\'polyscan\\'\n    ),\n    base AS (\n        SELECT\n            contract_address\n        FROM\n            silver.relevant_abi_contracts\n        EXCEPT\n        SELECT\n            contract_address\n        FROM\n            bronze_api.contract_abis\n        WHERE\n            abi_data :data :result :: STRING <> \\'Max rate limit reached\\'\n        LIMIT\n            100\n    )\nSELECT\n    contract_address,\n    ethereum.streamline.udf_api(\n        \\'GET\\',\n        CONCAT(\n            \\'https://api.polygonscan.com/api?module=contract&action=getabi&address=\\',\n            contract_address,\n            \\'&apikey=\\',\n            api_key\n        ),{},{}\n    ) AS abi_data,\n    SYSDATE()\nFROM\n    base\n    LEFT JOIN api_keys\n    ON 1 = 1\n    where exists (select 1 from base limit 1);\nEND;' \n\n{% endset %}\n    {% do run_query(sql) %}\n\n{% if target.database.upper() == 'POLYGON' %}\n    {% set sql %}\n        alter task bronze_api.get_block_explorer_abis resume;\n    {% endset %}\n    {% do run_query(sql) %}\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1669692076.389919}}, "docs": {"polygon_models.poly_sha3_uncles": {"unique_id": "polygon_models.poly_sha3_uncles", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/blocks/poly_sha3_uncles.md", "original_file_path": "models/doc_descriptions/blocks/poly_sha3_uncles.md", "name": "poly_sha3_uncles", "block_contents": "The mechanism which Ethereum Javascript RLP encodes an empty string."}, "polygon_models.poly_blocks_nonce": {"unique_id": "polygon_models.poly_blocks_nonce", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/blocks/poly_blocks_nonce.md", "original_file_path": "models/doc_descriptions/blocks/poly_blocks_nonce.md", "name": "poly_blocks_nonce", "block_contents": "Block nonce is a value used during mining to demonstrate proof of work for a given block."}, "polygon_models.poly_difficulty": {"unique_id": "polygon_models.poly_difficulty", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/blocks/poly_difficulty.md", "original_file_path": "models/doc_descriptions/blocks/poly_difficulty.md", "name": "poly_difficulty", "block_contents": "The effort required to mine the block."}, "polygon_models.poly_block_header_json": {"unique_id": "polygon_models.poly_block_header_json", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/blocks/poly_block_header_json.md", "original_file_path": "models/doc_descriptions/blocks/poly_block_header_json.md", "name": "poly_block_header_json", "block_contents": "This JSON column contains the block header details."}, "polygon_models.poly_extra_data": {"unique_id": "polygon_models.poly_extra_data", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/blocks/poly_extra_data.md", "original_file_path": "models/doc_descriptions/blocks/poly_extra_data.md", "name": "poly_extra_data", "block_contents": "Any data included by the validator for a given block."}, "polygon_models.poly_network": {"unique_id": "polygon_models.poly_network", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/blocks/poly_network.md", "original_file_path": "models/doc_descriptions/blocks/poly_network.md", "name": "poly_network", "block_contents": "The network on the blockchain used by a transaction."}, "polygon_models.poly_receipts_root": {"unique_id": "polygon_models.poly_receipts_root", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/blocks/poly_receipts_root.md", "original_file_path": "models/doc_descriptions/blocks/poly_receipts_root.md", "name": "poly_receipts_root", "block_contents": "The root of the state trie."}, "polygon_models.poly_gas_limit": {"unique_id": "polygon_models.poly_gas_limit", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/blocks/poly_gas_limit.md", "original_file_path": "models/doc_descriptions/blocks/poly_gas_limit.md", "name": "poly_gas_limit", "block_contents": "Total gas limit provided by all transactions in the block."}, "polygon_models.poly_blocks_hash": {"unique_id": "polygon_models.poly_blocks_hash", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/blocks/poly_blocks_hash.md", "original_file_path": "models/doc_descriptions/blocks/poly_blocks_hash.md", "name": "poly_blocks_hash", "block_contents": "The hash of the block header for a given block."}, "polygon_models.poly_total_difficulty": {"unique_id": "polygon_models.poly_total_difficulty", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/blocks/poly_total_difficulty.md", "original_file_path": "models/doc_descriptions/blocks/poly_total_difficulty.md", "name": "poly_total_difficulty", "block_contents": "Total difficulty of the chain at a given block."}, "polygon_models.poly_gas_used": {"unique_id": "polygon_models.poly_gas_used", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/blocks/poly_gas_used.md", "original_file_path": "models/doc_descriptions/blocks/poly_gas_used.md", "name": "poly_gas_used", "block_contents": "Total gas used in the block."}, "polygon_models.poly_blocks_table_doc": {"unique_id": "polygon_models.poly_blocks_table_doc", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/blocks/poly_blocks_table_doc.md", "original_file_path": "models/doc_descriptions/blocks/poly_blocks_table_doc.md", "name": "poly_blocks_table_doc", "block_contents": "This table contains block level data for the Polygon Blockchain. This table can be used to analyze trends at a block level, for example gas fees vs. total transactions over time. For more information on EVM transactions, please see [Etherscan Resources](https://etherscan.io/directory/Learning_Resources/Ethereum) or [The Ethereum Organization](https://ethereum.org/en/developers/docs/blocks/)"}, "polygon_models.poly_miner": {"unique_id": "polygon_models.poly_miner", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/blocks/poly_miner.md", "original_file_path": "models/doc_descriptions/blocks/poly_miner.md", "name": "poly_miner", "block_contents": "Miner who successfully added a given block to the blockchain."}, "polygon_models.poly_blockchain": {"unique_id": "polygon_models.poly_blockchain", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/blocks/poly_blockchain.md", "original_file_path": "models/doc_descriptions/blocks/poly_blockchain.md", "name": "poly_blockchain", "block_contents": "The blockchain on which transactions are being confirmed."}, "polygon_models.poly_size": {"unique_id": "polygon_models.poly_size", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/blocks/poly_size.md", "original_file_path": "models/doc_descriptions/blocks/poly_size.md", "name": "poly_size", "block_contents": "Block size, which is determined by a given block's gas limit."}, "polygon_models.poly_parent_hash": {"unique_id": "polygon_models.poly_parent_hash", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/blocks/poly_parent_hash.md", "original_file_path": "models/doc_descriptions/blocks/poly_parent_hash.md", "name": "poly_parent_hash", "block_contents": "The hash of the block from which a given block is generated. Also known as the parent block."}, "polygon_models.poly_tx_count": {"unique_id": "polygon_models.poly_tx_count", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/blocks/poly_tx_count.md", "original_file_path": "models/doc_descriptions/blocks/poly_tx_count.md", "name": "poly_tx_count", "block_contents": "Total number of transactions within a block."}, "polygon_models.poly_uncle_blocks": {"unique_id": "polygon_models.poly_uncle_blocks", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/blocks/poly_uncle_blocks.md", "original_file_path": "models/doc_descriptions/blocks/poly_uncle_blocks.md", "name": "poly_uncle_blocks", "block_contents": "Uncle blocks occur when two blocks are mined and broadcasted at the same time, with the same block number. The block validated across the most nodes will be added to the primary chain, and the other one becomes an uncle block. Miners do receive rewards for uncle blocks."}, "polygon_models.poly_logs_contract_address": {"unique_id": "polygon_models.poly_logs_contract_address", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/event_logs/poly_logs_contract_address.md", "original_file_path": "models/doc_descriptions/event_logs/poly_logs_contract_address.md", "name": "poly_logs_contract_address", "block_contents": "The address interacted with for a given event."}, "polygon_models.poly_event_removed": {"unique_id": "polygon_models.poly_event_removed", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/event_logs/poly_event_removed.md", "original_file_path": "models/doc_descriptions/event_logs/poly_event_removed.md", "name": "poly_event_removed", "block_contents": "Whether the event has been removed from the transaction."}, "polygon_models.poly_logs_data": {"unique_id": "polygon_models.poly_logs_data", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/event_logs/poly_logs_data.md", "original_file_path": "models/doc_descriptions/event_logs/poly_logs_data.md", "name": "poly_logs_data", "block_contents": "The un-decoded event data."}, "polygon_models.poly_logs_contract_name": {"unique_id": "polygon_models.poly_logs_contract_name", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/event_logs/poly_logs_contract_name.md", "original_file_path": "models/doc_descriptions/event_logs/poly_logs_contract_name.md", "name": "poly_logs_contract_name", "block_contents": "The name of the contract or token, where possible."}, "polygon_models.poly_origin_to": {"unique_id": "polygon_models.poly_origin_to", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/event_logs/poly_origin_to.md", "original_file_path": "models/doc_descriptions/event_logs/poly_origin_to.md", "name": "poly_origin_to", "block_contents": "The to address of this transaction."}, "polygon_models.poly_logs_table_doc": {"unique_id": "polygon_models.poly_logs_table_doc", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/event_logs/poly_logs_table_doc.md", "original_file_path": "models/doc_descriptions/event_logs/poly_logs_table_doc.md", "name": "poly_logs_table_doc", "block_contents": "This table contains flattened event logs from transactions on the Polygon Blockchain. Transactions may have multiple events, which are denoted by the event index for a transaction hash. Therefore, this table is unique on the combination of transaction hash and event index. Event names are decoded in this table where possible. The event inputs column will contain the log details in JSON format. Specific fields can be pulled from this column using the following sample format: ```event_inputs:<FILED_NAME>::<DATA TYPE> as <FIELD_NAME>```."}, "polygon_models.poly_origin_sig": {"unique_id": "polygon_models.poly_origin_sig", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/event_logs/poly_event_sig.md", "original_file_path": "models/doc_descriptions/event_logs/poly_event_sig.md", "name": "poly_origin_sig", "block_contents": "The function signature of this transaction."}, "polygon_models.poly_topics": {"unique_id": "polygon_models.poly_topics", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/event_logs/poly_topics.md", "original_file_path": "models/doc_descriptions/event_logs/poly_topics.md", "name": "poly_topics", "block_contents": "The un-decoded event input topics."}, "polygon_models.poly_event_index": {"unique_id": "polygon_models.poly_event_index", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/event_logs/poly_event_index.md", "original_file_path": "models/doc_descriptions/event_logs/poly_event_index.md", "name": "poly_event_index", "block_contents": "Event number within a transaction."}, "polygon_models.poly_event_name": {"unique_id": "polygon_models.poly_event_name", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/event_logs/poly_event_name.md", "original_file_path": "models/doc_descriptions/event_logs/poly_event_name.md", "name": "poly_event_name", "block_contents": "The decoded event name for a given event."}, "polygon_models.poly_log_id_events": {"unique_id": "polygon_models.poly_log_id_events", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/event_logs/poly_log_id_events.md", "original_file_path": "models/doc_descriptions/event_logs/poly_log_id_events.md", "name": "poly_log_id_events", "block_contents": "This is the primary key for this table. This is a concatenation of the transaction hash and the event index at which the event occurred."}, "polygon_models.poly_origin_from": {"unique_id": "polygon_models.poly_origin_from", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/event_logs/poly_origin_from.md", "original_file_path": "models/doc_descriptions/event_logs/poly_origin_from.md", "name": "poly_origin_from", "block_contents": "The from address of this transaction."}, "polygon_models.poly_logs_tx_hash": {"unique_id": "polygon_models.poly_logs_tx_hash", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/event_logs/poly_logs_tx_hash.md", "original_file_path": "models/doc_descriptions/event_logs/poly_logs_tx_hash.md", "name": "poly_logs_tx_hash", "block_contents": "Transaction hash is a unique 66-character identifier that is generated when a transaction is executed. This field will not be unique in this table, as a given transaction can include multiple events."}, "polygon_models.poly_event_inputs": {"unique_id": "polygon_models.poly_event_inputs", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/event_logs/poly_event_inputs.md", "original_file_path": "models/doc_descriptions/event_logs/poly_event_inputs.md", "name": "poly_event_inputs", "block_contents": "The decoded event inputs for a given event."}, "polygon_models.eth_dex_pool_address": {"unique_id": "polygon_models.eth_dex_pool_address", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/dex - (imported from layer 1)/eth_dex_pool_address.md", "original_file_path": "models/doc_descriptions/dex - (imported from layer 1)/eth_dex_pool_address.md", "name": "eth_dex_pool_address", "block_contents": "The contract address for the liquidity pool."}, "polygon_models.eth_dex_swaps_symbol_out": {"unique_id": "polygon_models.eth_dex_swaps_symbol_out", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/dex - (imported from layer 1)/eth_dex_swaps_symbol_out.md", "original_file_path": "models/doc_descriptions/dex - (imported from layer 1)/eth_dex_swaps_symbol_out.md", "name": "eth_dex_swaps_symbol_out", "block_contents": "The symbol of the token being swapped to."}, "polygon_models.eth_dex_creation_tx": {"unique_id": "polygon_models.eth_dex_creation_tx", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/dex - (imported from layer 1)/eth_dex_creation_tx.md", "original_file_path": "models/doc_descriptions/dex - (imported from layer 1)/eth_dex_creation_tx.md", "name": "eth_dex_creation_tx", "block_contents": "The transaction where this contract was created, where possible."}, "polygon_models.eth_dex_swaps_amount_in": {"unique_id": "polygon_models.eth_dex_swaps_amount_in", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/dex - (imported from layer 1)/eth_dex_swaps_amount_in.md", "original_file_path": "models/doc_descriptions/dex - (imported from layer 1)/eth_dex_swaps_amount_in.md", "name": "eth_dex_swaps_amount_in", "block_contents": "The amount of tokens put into the swap."}, "polygon_models.eth_dex_swaps_amount_in_usd": {"unique_id": "polygon_models.eth_dex_swaps_amount_in_usd", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/dex - (imported from layer 1)/eth_dex_swaps_amount_in_usd.md", "original_file_path": "models/doc_descriptions/dex - (imported from layer 1)/eth_dex_swaps_amount_in_usd.md", "name": "eth_dex_swaps_amount_in_usd", "block_contents": "The amount of tokens put into the swap converted to USD using the price of the token."}, "polygon_models.eth_dex_swaps_tx_to": {"unique_id": "polygon_models.eth_dex_swaps_tx_to", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/dex - (imported from layer 1)/eth_dex_swaps_tx_to.md", "original_file_path": "models/doc_descriptions/dex - (imported from layer 1)/eth_dex_swaps_tx_to.md", "name": "eth_dex_swaps_tx_to", "block_contents": "The tx_to is the address who receives the swapped token. This corresponds to the \"to\" field in the swap function."}, "polygon_models.eth_dex_swaps_token_in": {"unique_id": "polygon_models.eth_dex_swaps_token_in", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/dex - (imported from layer 1)/eth_dex_swaps_token_In.md", "original_file_path": "models/doc_descriptions/dex - (imported from layer 1)/eth_dex_swaps_token_In.md", "name": "eth_dex_swaps_token_in", "block_contents": "The address of the token sent for swap."}, "polygon_models.poly_sushi__ez_swaps": {"unique_id": "polygon_models.poly_sushi__ez_swaps", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/dex - (imported from layer 1)/poly_sushi__ez_swaps.md", "original_file_path": "models/doc_descriptions/dex - (imported from layer 1)/poly_sushi__ez_swaps.md", "name": "poly_sushi__ez_swaps", "block_contents": "This table currently contains swap events from the ```fact_event_logs``` table for SushiSwap, along with other helpful columns including an amount USD where possible. \nNote: A rule has been put in place to null out the amount_USD if that number is too divergent between amount_in_USD and amount_out_usd. This can happen for swaps of less liquid tokens during very high fluctuation of price."}, "polygon_models.eth_dex_platform": {"unique_id": "polygon_models.eth_dex_platform", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/dex - (imported from layer 1)/eth_dex_platform.md", "original_file_path": "models/doc_descriptions/dex - (imported from layer 1)/eth_dex_platform.md", "name": "eth_dex_platform", "block_contents": "This field denotes which application the liquidity pool belongs to."}, "polygon_models.eth_dex_pool_name": {"unique_id": "polygon_models.eth_dex_pool_name", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/dex - (imported from layer 1)/eth_dex_pool_name.md", "original_file_path": "models/doc_descriptions/dex - (imported from layer 1)/eth_dex_pool_name.md", "name": "eth_dex_pool_name", "block_contents": "The name of the liquidity pool, where possible."}, "polygon_models.eth_dex_tokens": {"unique_id": "polygon_models.eth_dex_tokens", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/dex - (imported from layer 1)/eth_dex_tokens.md", "original_file_path": "models/doc_descriptions/dex - (imported from layer 1)/eth_dex_tokens.md", "name": "eth_dex_tokens", "block_contents": "This field contains the tokens within the liquidity pool as a JSON objects."}, "polygon_models.eth_dex_factory_address": {"unique_id": "polygon_models.eth_dex_factory_address", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/dex - (imported from layer 1)/eth_dex_factory_address.md", "original_file_path": "models/doc_descriptions/dex - (imported from layer 1)/eth_dex_factory_address.md", "name": "eth_dex_factory_address", "block_contents": "The address that created or deployed this pool, where possible."}, "polygon_models.eth_dex_swaps_token_out": {"unique_id": "polygon_models.eth_dex_swaps_token_out", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/dex - (imported from layer 1)/eth_dex_swaps_token_out.md", "original_file_path": "models/doc_descriptions/dex - (imported from layer 1)/eth_dex_swaps_token_out.md", "name": "eth_dex_swaps_token_out", "block_contents": "The address of the token being swapped to."}, "polygon_models.eth_dex_creation_time": {"unique_id": "polygon_models.eth_dex_creation_time", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/dex - (imported from layer 1)/eth_dex_creation_time.md", "original_file_path": "models/doc_descriptions/dex - (imported from layer 1)/eth_dex_creation_time.md", "name": "eth_dex_creation_time", "block_contents": "When this pool was created, where possible."}, "polygon_models.eth_dex_lp_table_doc": {"unique_id": "polygon_models.eth_dex_lp_table_doc", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/dex - (imported from layer 1)/Poly_dex_lp_table_doc.md", "original_file_path": "models/doc_descriptions/dex - (imported from layer 1)/Poly_dex_lp_table_doc.md", "name": "eth_dex_lp_table_doc", "block_contents": "This table contains details on different Liquidity Pools belonging to sushiswap on the Polygon blockchain"}, "polygon_models.eth_dex_swaps_amount_out_usd": {"unique_id": "polygon_models.eth_dex_swaps_amount_out_usd", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/dex - (imported from layer 1)/eth_dex_swaps_amount_out_usd.md", "original_file_path": "models/doc_descriptions/dex - (imported from layer 1)/eth_dex_swaps_amount_out_usd.md", "name": "eth_dex_swaps_amount_out_usd", "block_contents": "The amount of tokens taken out of or received from the swap converted to USD using the price of the token."}, "polygon_models.eth_dex_token1": {"unique_id": "polygon_models.eth_dex_token1", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/dex - (imported from layer 1)/eth_dex_token1.md", "original_file_path": "models/doc_descriptions/dex - (imported from layer 1)/eth_dex_token1.md", "name": "eth_dex_token1", "block_contents": "Token 1 is the second token in the pair, and will show up second within the event logs for relevant transactions."}, "polygon_models.eth_dex_swaps_amount_out": {"unique_id": "polygon_models.eth_dex_swaps_amount_out", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/dex - (imported from layer 1)/eth_dex_swaps_amount_out.md", "original_file_path": "models/doc_descriptions/dex - (imported from layer 1)/eth_dex_swaps_amount_out.md", "name": "eth_dex_swaps_amount_out", "block_contents": "The amount of tokens taken out of or received from the swap."}, "polygon_models.eth_dex_swaps_symbol_in": {"unique_id": "polygon_models.eth_dex_swaps_symbol_in", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/dex - (imported from layer 1)/eth_dex_swaps_symbol_in.md", "original_file_path": "models/doc_descriptions/dex - (imported from layer 1)/eth_dex_swaps_symbol_in.md", "name": "eth_dex_swaps_symbol_in", "block_contents": "The symbol of the token sent for swap."}, "polygon_models.eth_dex_swaps_sender": {"unique_id": "polygon_models.eth_dex_swaps_sender", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/dex - (imported from layer 1)/eth_dex_swaps_sender.md", "original_file_path": "models/doc_descriptions/dex - (imported from layer 1)/eth_dex_swaps_sender.md", "name": "eth_dex_swaps_sender", "block_contents": "The Router is the Sender in the swap function."}, "polygon_models.eth_dex_token0": {"unique_id": "polygon_models.eth_dex_token0", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/dex - (imported from layer 1)/eth_dex_token0.md", "original_file_path": "models/doc_descriptions/dex - (imported from layer 1)/eth_dex_token0.md", "name": "eth_dex_token0", "block_contents": "Token 0 is the first token in the pair, and will show up first within the event logs for relevant transactions."}, "polygon_models.poly_traces_value": {"unique_id": "polygon_models.poly_traces_value", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/traces/poly_traces_value.md", "original_file_path": "models/doc_descriptions/traces/poly_traces_value.md", "name": "poly_traces_value", "block_contents": "The amount of MATIC transferred in this trace."}, "polygon_models.poly_traces_gas_used": {"unique_id": "polygon_models.poly_traces_gas_used", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/traces/poly_traces_gas_used.md", "original_file_path": "models/doc_descriptions/traces/poly_traces_gas_used.md", "name": "poly_traces_gas_used", "block_contents": "The gas used for this trace."}, "polygon_models.poly_traces_sub": {"unique_id": "polygon_models.poly_traces_sub", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/traces/poly_traces_sub.md", "original_file_path": "models/doc_descriptions/traces/poly_traces_sub.md", "name": "poly_traces_sub", "block_contents": "The amount of nested sub traces for this trace."}, "polygon_models.poly_traces_table_doc": {"unique_id": "polygon_models.poly_traces_table_doc", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/traces/poly_traces_table_doc.md", "original_file_path": "models/doc_descriptions/traces/poly_traces_table_doc.md", "name": "poly_traces_table_doc", "block_contents": "This table contains flattened trace data for internal contract calls on the Polygon Blockchain. Hex encoded fields can be decoded to integers by using `polygon.public.udf_hex_to_int()`."}, "polygon_models.poly_traces_type": {"unique_id": "polygon_models.poly_traces_type", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/traces/poly_traces_type.md", "original_file_path": "models/doc_descriptions/traces/poly_traces_type.md", "name": "poly_traces_type", "block_contents": "The type of internal transaction. Common trace types are `CALL`, `DELEGATECALL`, and `STATICCALL`."}, "polygon_models.poly_traces_input": {"unique_id": "polygon_models.poly_traces_input", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/traces/poly_traces_input.md", "original_file_path": "models/doc_descriptions/traces/poly_traces_input.md", "name": "poly_traces_input", "block_contents": "The input data for this trace."}, "polygon_models.poly_traces_gas": {"unique_id": "polygon_models.poly_traces_gas", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/traces/poly_traces_gas.md", "original_file_path": "models/doc_descriptions/traces/poly_traces_gas.md", "name": "poly_traces_gas", "block_contents": "The gas supplied for this trace."}, "polygon_models.poly_traces_output": {"unique_id": "polygon_models.poly_traces_output", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/traces/poly_traces_output.md", "original_file_path": "models/doc_descriptions/traces/poly_traces_output.md", "name": "poly_traces_output", "block_contents": "The output data for this trace."}, "polygon_models.poly_traces_block_no": {"unique_id": "polygon_models.poly_traces_block_no", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/traces/poly_traces_block_no.md", "original_file_path": "models/doc_descriptions/traces/poly_traces_block_no.md", "name": "poly_traces_block_no", "block_contents": "The block number of this transaction."}, "polygon_models.poly_traces_call_data": {"unique_id": "polygon_models.poly_traces_call_data", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/traces/poly_traces_call_data.md", "original_file_path": "models/doc_descriptions/traces/poly_traces_call_data.md", "name": "poly_traces_call_data", "block_contents": "The raw JSON data for this trace."}, "polygon_models.poly_traces_tx_hash": {"unique_id": "polygon_models.poly_traces_tx_hash", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/traces/poly_traces_tx_hash.md", "original_file_path": "models/doc_descriptions/traces/poly_traces_tx_hash.md", "name": "poly_traces_tx_hash", "block_contents": "The transaction hash for the trace. Please note, this is not necessarily unique in this table as transactions frequently have multiple traces."}, "polygon_models.poly_traces_identifier": {"unique_id": "polygon_models.poly_traces_identifier", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/traces/poly_traces_identifier.md", "original_file_path": "models/doc_descriptions/traces/poly_traces_identifier.md", "name": "poly_traces_identifier", "block_contents": "This field represents the position and type of the trace within the transaction."}, "polygon_models.poly_traces_from": {"unique_id": "polygon_models.poly_traces_from", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/traces/poly_traces_from.md", "original_file_path": "models/doc_descriptions/traces/poly_traces_from.md", "name": "poly_traces_from", "block_contents": "The sending address of this trace. This is not necessarily the from address of the transaction."}, "polygon_models.poly_traces_blocktime": {"unique_id": "polygon_models.poly_traces_blocktime", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/traces/poly_traces_blocktime.md", "original_file_path": "models/doc_descriptions/traces/poly_traces_blocktime.md", "name": "poly_traces_blocktime", "block_contents": "The block timestamp of this transaction."}, "polygon_models.poly_traces_to": {"unique_id": "polygon_models.poly_traces_to", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/traces/poly_traces_to.md", "original_file_path": "models/doc_descriptions/traces/poly_traces_to.md", "name": "poly_traces_to", "block_contents": "The receiving address of this trace. This is not necessarily the to address of the transaction."}, "polygon_models.borrower": {"unique_id": "polygon_models.borrower", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/Borrowing/Borrower.md", "original_file_path": "models/doc_descriptions/Borrowing/Borrower.md", "name": "borrower", "block_contents": "Its the address of the user who is Borrowing or repaying the loan, depending on the action."}, "polygon_models.borrow_amount_usd": {"unique_id": "polygon_models.borrow_amount_usd", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/Borrowing/amount_usd.md", "original_file_path": "models/doc_descriptions/Borrowing/amount_usd.md", "name": "borrow_amount_usd", "block_contents": "The meaning depends on the action:\nBorrow: The amount of the asset in USD that the user is borrowing or\nRepay: The amount of the asset in USD that the user is repaying\nAdd collateral: The amount of collateral in USD that the user is depositing\nRemove collateral: The amount of collateral in USD that the user is withdrawing"}, "polygon_models.borrow_symbol": {"unique_id": "polygon_models.borrow_symbol", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/Borrowing/Borrow_symbol.md", "original_file_path": "models/doc_descriptions/Borrowing/Borrow_symbol.md", "name": "borrow_symbol", "block_contents": "The symbol of the asset/collateral that is payed or received, depending on the action"}, "polygon_models.collateral_address": {"unique_id": "polygon_models.collateral_address", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/Borrowing/collateral_address.md", "original_file_path": "models/doc_descriptions/Borrowing/collateral_address.md", "name": "collateral_address", "block_contents": "The address of the asset that is used for collateral when borrowing funds."}, "polygon_models.borrow_amount": {"unique_id": "polygon_models.borrow_amount", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/Borrowing/amount.md", "original_file_path": "models/doc_descriptions/Borrowing/amount.md", "name": "borrow_amount", "block_contents": "The meaning depends on the action:\nBorrow: The amount of the asset that the user is borrowing or\nRepay: The amount of the asset that the user is repaying\nAdd collateral: The amount of collateral that the user is depositing\nRemove collateral: The amount of collateral that the user is withdrawing"}, "polygon_models.borrow_asset": {"unique_id": "polygon_models.borrow_asset", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/Borrowing/asset.md", "original_file_path": "models/doc_descriptions/Borrowing/asset.md", "name": "borrow_asset", "block_contents": "The address of the asset/collateral token that is being borrowed/repayed/deposited etc. depending on the action"}, "polygon_models.collateral_symbol": {"unique_id": "polygon_models.collateral_symbol", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/Borrowing/collateral_symbol.md", "original_file_path": "models/doc_descriptions/Borrowing/collateral_symbol.md", "name": "collateral_symbol", "block_contents": "The symbol of the asset that is used for collateral when borrowing funds."}, "polygon_models.borrow_action": {"unique_id": "polygon_models.borrow_action", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/Borrowing/action.md", "original_file_path": "models/doc_descriptions/Borrowing/action.md", "name": "borrow_action", "block_contents": "The action that the user is taking.\n Borrow: user is borrowing an asset\n Repay: user is repaying the asset that they have borrowed in a previous loan\n Add collateral: user is depositing collateral for their loan. This happens some times in the same transaction as the borrowing transaction and some times in a separate transaction. \n Remove collateral: user is withdrawing collateral. This happens some times in the same transaction as the borrowing transaction and some times in a separate transaction."}, "polygon_models.__overview__": {"unique_id": "polygon_models.__overview__", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/general/__overview__.md", "original_file_path": "models/doc_descriptions/general/__overview__.md", "name": "__overview__", "block_contents": "# Welcome to the Flipside Crypto Polygon Models Documentation!\n\n# NOTE: Data is in 'lite mode' - meaning, historical data have not yet been backfilled. Please see min(block_timestamp)\n\n## **What is Flipside?**\n\n[Flipside Crypto](https://flipsidecrypto.xyz/earn) provides Community Enabled Crypto Analytics, allowing our users to create and share data insights on the crypto projects they care most about.\n\n**Flipside Crypto puts pre-modeled and labeled blockchain data in the hands of communities.**\n\nThrough dashboard and visualization tools, as well as auto-generated API endpoints, data analysts can easily create queries that answer any question via a tool called [Velocity](https://app.flipsidecrypto.com/velocity?nav=Discover).\n\n**Community members earn bounties for answering questions with data.**\n\nBounties provide incentive and direction, so crypto projects can quickly source the data insights they need in order to grow.\n\n**Flipside works directly with leading crypto projects to reward on-demand analytics through structured bounty programs.**\n\nQuestions sourced directly from the community provide insight into what communities care about as well as analytics needed to drive ecosystem engagement and growth.\n\n## **What does this documentation cover?**\nThe documentation included here details the design of the Polygon tables and views available via [Flipside Crypto.](https://flipsidecrypto.xyz/earn) For more information on how these models are built, please see [the github repository.](https://github.com/FlipsideCrypto/polygon-models)\n\n### **Quick Links to Table Documentation**\n\n- [fact_blocks](https://flipsidecrypto.github.io/polygon-models/#!/model/model.polygon_models.core__fact_blocks)\n- [fact_event_logs](https://flipsidecrypto.github.io/polygon-models/#!/model/model.polygon_models.core__fact_event_logs)\n- [fact_traces](https://flipsidecrypto.github.io/polygon-models/#!/model/model.polygon_models.core__fact_traces)\n- [fact_transactions](https://flipsidecrypto.github.io/polygon-models/#!/model/model.polygon_models.core__fact_transactions)\n- [dim_lables](https://flipsidecrypto.github.io/polygon-models/#!/model/model.polygon_models.core__dim_labels)\n- [ez_matic_transfers](https://flipsidecrypto.github.io/polygon-models/#!/model/model.polygon_models.core__ez_matic_transfers)\n- [fact_token_transfers](https://flipsidecrypto.github.io/polygon-models/#!/model/model.polygon_models.core__fact_token_transfers)\n\n## **Data Model Overview**\n\nThe Polygon models are built a few different ways, but the core fact table are built using three layers of sql models: **bronze, silver, and gold (or core).**\n\n- Bronze: Data is loaded in from the source as a view\n- Silver: All necessary parsing, filtering, de-duping, and other transformations are done here\n- Gold (or core): Final views and tables that are available in Velocity\n\nThe dimension tables are sourced from a variety of on-chain and off-chain sources.\n\nConvenience views (denoted ez_) are a combination of different fact and dimension tables. \n\nA user-defined-function (UDF) is available to decode hex encoded values to integers in this database. You can call this UDF by using `polygon.public.udf_hex_to_int(FIELD)`.\n\n\n## **Using dbt docs**\n### Navigation\n\nYou can use the ```Project``` and ```Database``` navigation tabs on the left side of the window to explore the models in the project.\n\n### Database Tab\n\nThis view shows relations (tables and views) grouped into database schemas. Note that ephemeral models are *not* shown in this interface, as they do not exist in the database.\n\n### Graph Exploration\n\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the Expand button at the top-right of this lineage pane, you'll be able to see all of the models that are used to build, or are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the ```--models``` and ```--exclude``` model selection syntax to filter the models in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n\n### **More information**\n- [Flipside](https://flipsidecrypto.xyz/earn)\n- [Velocity](https://app.flipsidecrypto.com/velocity?nav=Discover)\n- [Tutorials](https://docs.flipsidecrypto.com/our-data/tutorials)\n- [Github](https://github.com/FlipsideCrypto/polygon-models)\n- [Query Editor Shortcuts](https://docs.flipsidecrypto.com/velocity/query-editor-shortcuts)\n- [What is dbt?](https://docs.getdbt.com/docs/introduction)"}, "polygon_models.poly_from_address": {"unique_id": "polygon_models.poly_from_address", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/general/poly_from_address.md", "original_file_path": "models/doc_descriptions/general/poly_from_address.md", "name": "poly_from_address", "block_contents": "The sending address of this transaction."}, "polygon_models.poly_symbol": {"unique_id": "polygon_models.poly_symbol", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/general/poly_symbol.md", "original_file_path": "models/doc_descriptions/general/poly_symbol.md", "name": "poly_symbol", "block_contents": "The symbol belonging to the address of the token"}, "polygon_models.poly_block_timestamp": {"unique_id": "polygon_models.poly_block_timestamp", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/general/poly_block_timestamp.md", "original_file_path": "models/doc_descriptions/general/poly_block_timestamp.md", "name": "poly_block_timestamp", "block_contents": "The date and time at which the block was produced."}, "polygon_models.poly_ingested_at": {"unique_id": "polygon_models.poly_ingested_at", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/general/poly_ingested_at.md", "original_file_path": "models/doc_descriptions/general/poly_ingested_at.md", "name": "poly_ingested_at", "block_contents": "Internal column."}, "polygon_models.poly_decimals": {"unique_id": "polygon_models.poly_decimals", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/general/poly_decimals.md", "original_file_path": "models/doc_descriptions/general/poly_decimals.md", "name": "poly_decimals", "block_contents": "The number of decimal places this contract needs adjusted where token values exist. For example, use the decimal field to correctly transform raw amounts in ```fact_transactions```."}, "polygon_models.poly_block_number": {"unique_id": "polygon_models.poly_block_number", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/general/poly_block_number.md", "original_file_path": "models/doc_descriptions/general/poly_block_number.md", "name": "poly_block_number", "block_contents": "Also known as block height. The block number, which indicates the length of the blockchain, increases after the addition of each new block."}, "polygon_models.poly_to_address": {"unique_id": "polygon_models.poly_to_address", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/general/poly_to_address.md", "original_file_path": "models/doc_descriptions/general/poly_to_address.md", "name": "poly_to_address", "block_contents": "The receiving address of this transaction. This can be a contract address."}, "polygon_models.matic_label_address": {"unique_id": "polygon_models.matic_label_address", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/labels/matic_label_address.md", "original_file_path": "models/doc_descriptions/labels/matic_label_address.md", "name": "matic_label_address", "block_contents": "Address that the label is for. This is the field that should be used to join other tables with labels."}, "polygon_models.matic_label_blockchain": {"unique_id": "polygon_models.matic_label_blockchain", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/labels/matic_label_blockchain.md", "original_file_path": "models/doc_descriptions/labels/matic_label_blockchain.md", "name": "matic_label_blockchain", "block_contents": "The name of the blockchain."}, "polygon_models.matic_label_subtype": {"unique_id": "polygon_models.matic_label_subtype", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/labels/matic_label_subtype.md", "original_file_path": "models/doc_descriptions/labels/matic_label_subtype.md", "name": "matic_label_subtype", "block_contents": "A sub-category nested within label type providing further detail."}, "polygon_models.matic_project_name": {"unique_id": "polygon_models.matic_project_name", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/labels/matic_label.md", "original_file_path": "models/doc_descriptions/labels/matic_label.md", "name": "matic_project_name", "block_contents": "The name of the project for this address."}, "polygon_models.matic_label_address_name": {"unique_id": "polygon_models.matic_label_address_name", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/labels/matic_label_address_name.md", "original_file_path": "models/doc_descriptions/labels/matic_label_address_name.md", "name": "matic_label_address_name", "block_contents": "The most granular label for this address."}, "polygon_models.matic_labels_table": {"unique_id": "polygon_models.matic_labels_table", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/labels/matic_labels_table_doc.md", "original_file_path": "models/doc_descriptions/labels/matic_labels_table_doc.md", "name": "matic_labels_table", "block_contents": "This table contains labels for addresses on the Polygon Blockchain."}, "polygon_models.matic_label_creator": {"unique_id": "polygon_models.matic_label_creator", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/labels/matic_label_creator.md", "original_file_path": "models/doc_descriptions/labels/matic_label_creator.md", "name": "matic_label_creator", "block_contents": "The name of the creator of the label."}, "polygon_models.matic_label_type": {"unique_id": "polygon_models.matic_label_type", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/labels/matic_label_type.md", "original_file_path": "models/doc_descriptions/labels/matic_label_type.md", "name": "matic_label_type", "block_contents": "A high-level category describing the addresses main function or ownership."}, "polygon_models.poly_transfer_has_price": {"unique_id": "polygon_models.poly_transfer_has_price", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/transfers/poly_transfer_has_price.md", "original_file_path": "models/doc_descriptions/transfers/poly_transfer_has_price.md", "name": "poly_transfer_has_price", "block_contents": "Whether or not our prices model contains this hourly token price."}, "polygon_models.poly_transfer_token_price": {"unique_id": "polygon_models.poly_transfer_token_price", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/transfers/poly_transfer_token_price.md", "original_file_path": "models/doc_descriptions/transfers/poly_transfer_token_price.md", "name": "poly_transfer_token_price", "block_contents": "The price, if available, for this token at the transfer time."}, "polygon_models.poly_transfer_has_decimal": {"unique_id": "polygon_models.poly_transfer_has_decimal", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/transfers/poly_transfer_has_decimal.md", "original_file_path": "models/doc_descriptions/transfers/poly_transfer_has_decimal.md", "name": "poly_transfer_has_decimal", "block_contents": "Whether or not our contracts model contains the necessary decimal adjustment for this token."}, "polygon_models.poly_eth_amount_usd": {"unique_id": "polygon_models.poly_eth_amount_usd", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/transfers/poly_eth_amount_usd.md", "original_file_path": "models/doc_descriptions/transfers/poly_eth_amount_usd.md", "name": "poly_eth_amount_usd", "block_contents": "ETH value transferred, in USD."}, "polygon_models.poly_ez_transfer_table_doc": {"unique_id": "polygon_models.poly_ez_transfer_table_doc", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/transfers/poly_ez_transfer_table_doc.md", "original_file_path": "models/doc_descriptions/transfers/poly_ez_transfer_table_doc.md", "name": "poly_ez_transfer_table_doc", "block_contents": "This table will contain all events in the ```fact_token_transfers table```, along with joined columns such as token price, symbol, and decimals where possible that allow for easier analysis of token transfer events. Please note Native ETH transfers are not included here."}, "polygon_models.poly_eth_origin_to": {"unique_id": "polygon_models.poly_eth_origin_to", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/transfers/poly_origin_to.md", "original_file_path": "models/doc_descriptions/transfers/poly_origin_to.md", "name": "poly_eth_origin_to", "block_contents": "The to address at the transaction level."}, "polygon_models.poly_transfer_raw_amount": {"unique_id": "polygon_models.poly_transfer_raw_amount", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/transfers/poly_transfer_raw_amount.md", "original_file_path": "models/doc_descriptions/transfers/poly_transfer_raw_amount.md", "name": "poly_transfer_raw_amount", "block_contents": "The amount of tokens transferred. This value is not decimal adjusted."}, "polygon_models.poly_transfer_from_address": {"unique_id": "polygon_models.poly_transfer_from_address", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/transfers/poly_transfer_from_address.md", "original_file_path": "models/doc_descriptions/transfers/poly_transfer_from_address.md", "name": "poly_transfer_from_address", "block_contents": "The sending address of this transfer."}, "polygon_models.poly_eth_amount": {"unique_id": "polygon_models.poly_eth_amount", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/transfers/poly_eth_amount.md", "original_file_path": "models/doc_descriptions/transfers/poly_eth_amount.md", "name": "poly_eth_amount", "block_contents": "ETH value transferred."}, "polygon_models.poly_transfer_amount_usd": {"unique_id": "polygon_models.poly_transfer_amount_usd", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/transfers/poly_transfer_amount_usd.md", "original_file_path": "models/doc_descriptions/transfers/poly_transfer_amount_usd.md", "name": "poly_transfer_amount_usd", "block_contents": "The amount in US dollars for this transfer at the time of the transfer. Tokens without a decimal adjustment or price will be nulled out here."}, "polygon_models.poly_transfer_contract_address": {"unique_id": "polygon_models.poly_transfer_contract_address", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/transfers/poly_transfer_contract_address.md", "original_file_path": "models/doc_descriptions/transfers/poly_transfer_contract_address.md", "name": "poly_transfer_contract_address", "block_contents": "Contract address of the token being transferred."}, "polygon_models.poly_log_id_transfers": {"unique_id": "polygon_models.poly_log_id_transfers", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/transfers/poly_log_id_transfers.md", "original_file_path": "models/doc_descriptions/transfers/poly_log_id_transfers.md", "name": "poly_log_id_transfers", "block_contents": "This is the primary key for this table. This is a concatenation of the transaction hash and the event index at which the transfer event occurred. This field can be used to find more details on the event within the ```fact_event_logs``` table."}, "polygon_models.poly_ez_eth_transfers_table_doc": {"unique_id": "polygon_models.poly_ez_eth_transfers_table_doc", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/transfers/poly_ez_eth_transfers_table_doc.md", "original_file_path": "models/doc_descriptions/transfers/poly_ez_eth_transfers_table_doc.md", "name": "poly_ez_eth_transfers_table_doc", "block_contents": "This table contains all native Matic transfers, including equivalent USD amounts. The origin addresses correspond to the to and from addresses from the `fact_transactions` table. The `identifier` and `tx_hash` columns relate this table back to `fact_traces`, which contains more details on the transfers."}, "polygon_models.poly_transfer_to_address": {"unique_id": "polygon_models.poly_transfer_to_address", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/transfers/poly_transfer_to_address.md", "original_file_path": "models/doc_descriptions/transfers/poly_transfer_to_address.md", "name": "poly_transfer_to_address", "block_contents": "The receiving address of this transfer. This can be a contract address."}, "polygon_models.poly_transfer_table_doc": {"unique_id": "polygon_models.poly_transfer_table_doc", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/transfers/poly_transfer_table_doc.md", "original_file_path": "models/doc_descriptions/transfers/poly_transfer_table_doc.md", "name": "poly_transfer_table_doc", "block_contents": "This table contains events on the Polygon Blockchain with an event name of 'Transfer'. The contract address is the token transferred, and the raw amount field is the amount of tokens transferred. Please note this amount is not decimal adjusted. Decimal adjustments for a token address can be found in ```dim_contracts```. This table will not contain transfers of native ETH."}, "polygon_models.poly_transfer_tx_hash": {"unique_id": "polygon_models.poly_transfer_tx_hash", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/transfers/poly_transfer_tx_hash.md", "original_file_path": "models/doc_descriptions/transfers/poly_transfer_tx_hash.md", "name": "poly_transfer_tx_hash", "block_contents": "Transaction hash is a unique 66-character identifier that is generated when a transaction is executed. This will not be unique in this table as a transaction could include multiple transfer events."}, "polygon_models.poly_transfer_amount": {"unique_id": "polygon_models.poly_transfer_amount", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/transfers/poly_transfer_amount.md", "original_file_path": "models/doc_descriptions/transfers/poly_transfer_amount.md", "name": "poly_transfer_amount", "block_contents": "The decimal transformed amount for this token. Tokens without a decimal adjustment will be nulled out here."}, "polygon_models.poly_eth_origin_from": {"unique_id": "polygon_models.poly_eth_origin_from", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/transfers/poly_origin_from.md", "original_file_path": "models/doc_descriptions/transfers/poly_origin_from.md", "name": "poly_eth_origin_from", "block_contents": "The from address at the transaction level."}, "polygon_models.lending_symbol": {"unique_id": "polygon_models.lending_symbol", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/Lending/Lending_symbol.md", "original_file_path": "models/doc_descriptions/Lending/Lending_symbol.md", "name": "lending_symbol", "block_contents": "The symbol of the asset that is lent or withdrawn, depending on the action"}, "polygon_models.lending_amount_usd": {"unique_id": "polygon_models.lending_amount_usd", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/Lending/amount_usd.md", "original_file_path": "models/doc_descriptions/Lending/amount_usd.md", "name": "lending_amount_usd", "block_contents": "The amount of the asset that the user is depositing or withdrawing, depending on the action."}, "polygon_models.lending_asset_address": {"unique_id": "polygon_models.lending_asset_address", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/Lending/Lending_asset_address.md", "original_file_path": "models/doc_descriptions/Lending/Lending_asset_address.md", "name": "lending_asset_address", "block_contents": "The address of the asset in the token pair. This asset is either deposited ot withdrawn for lending purposes."}, "polygon_models.lending_amount": {"unique_id": "polygon_models.lending_amount", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/Lending/amount.md", "original_file_path": "models/doc_descriptions/Lending/amount.md", "name": "lending_amount", "block_contents": "The amount of the asset that the user is depositing or withdrawing, depending on the action."}, "polygon_models.lending_borrower_is_a_contract": {"unique_id": "polygon_models.lending_borrower_is_a_contract", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/Lending/borrower_is_a_contract.md", "original_file_path": "models/doc_descriptions/Lending/borrower_is_a_contract.md", "name": "lending_borrower_is_a_contract", "block_contents": "If the depositor of collateral is a contract then its a Yes, if the depositor of collateral is a normal address it is a No."}, "polygon_models.lending_asset": {"unique_id": "polygon_models.lending_asset", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/Lending/asset.md", "original_file_path": "models/doc_descriptions/Lending/asset.md", "name": "lending_asset", "block_contents": "The address of the asset (token) that is being deposited/withdrawn, depending on the action"}, "polygon_models.lending_origin_to_address": {"unique_id": "polygon_models.lending_origin_to_address", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/Lending/origin_to_address.md", "original_file_path": "models/doc_descriptions/Lending/origin_to_address.md", "name": "lending_origin_to_address", "block_contents": "The person who initiates the depositing transaction has to interact with this address. This address belongs to the lending platform or directs the transactio there."}, "polygon_models.lending_pool_address": {"unique_id": "polygon_models.lending_pool_address", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/Lending/Lending_pool_address.md", "original_file_path": "models/doc_descriptions/Lending/Lending_pool_address.md", "name": "lending_pool_address", "block_contents": "The address of the lending pool. For sushi this will be the address of the kashi pair."}, "polygon_models.lending_origin_from_address": {"unique_id": "polygon_models.lending_origin_from_address", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/Lending/origin_from_address.md", "original_file_path": "models/doc_descriptions/Lending/origin_from_address.md", "name": "lending_origin_from_address", "block_contents": "The address of the user who initiates the transaction."}, "polygon_models.lending_lending_pool": {"unique_id": "polygon_models.lending_lending_pool", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/Lending/lending_pool.md", "original_file_path": "models/doc_descriptions/Lending/lending_pool.md", "name": "lending_lending_pool", "block_contents": "The name of the lending pool."}, "polygon_models.lending_action": {"unique_id": "polygon_models.lending_action", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/Lending/action.md", "original_file_path": "models/doc_descriptions/Lending/action.md", "name": "lending_action", "block_contents": "The action that the user is taking.\n Deposit: user is depositing funds to be used for lending\n Withdraw: user has changed their mind and are no longer willing to lend, so they withdraw their asset"}, "polygon_models.lending_lender_is_a_contract": {"unique_id": "polygon_models.lending_lender_is_a_contract", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/Lending/lender_is_a_contract.md", "original_file_path": "models/doc_descriptions/Lending/lender_is_a_contract.md", "name": "lending_lender_is_a_contract", "block_contents": "If the depositor is a contract then its a Yes, if the depositor is a normal address it is a No."}, "polygon_models.lending_depositor": {"unique_id": "polygon_models.lending_depositor", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/Lending/Depositor.md", "original_file_path": "models/doc_descriptions/Lending/Depositor.md", "name": "lending_depositor", "block_contents": "Its the address of the user who is depositing for lending or withdrawing, depending on the action."}, "polygon_models.poly_tx_position": {"unique_id": "polygon_models.poly_tx_position", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/transactions/poly_tx_position.md", "original_file_path": "models/doc_descriptions/transactions/poly_tx_position.md", "name": "poly_tx_position", "block_contents": "The position of the transaction within the block."}, "polygon_models.poly_value": {"unique_id": "polygon_models.poly_value", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/transactions/poly_value.md", "original_file_path": "models/doc_descriptions/transactions/poly_value.md", "name": "poly_value", "block_contents": "The value transacted in Matic."}, "polygon_models.poly_tx_hash": {"unique_id": "polygon_models.poly_tx_hash", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/transactions/poly_tx_hash.md", "original_file_path": "models/doc_descriptions/transactions/poly_tx_hash.md", "name": "poly_tx_hash", "block_contents": "Transaction hash is a unique 66-character identifier that is generated when a transaction is executed."}, "polygon_models.poly_tx_gas_used": {"unique_id": "polygon_models.poly_tx_gas_used", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/transactions/poly_tx_gas_used.md", "original_file_path": "models/doc_descriptions/transactions/poly_tx_gas_used.md", "name": "poly_tx_gas_used", "block_contents": "Gas used by transaction."}, "polygon_models.poly_tx_block_hash": {"unique_id": "polygon_models.poly_tx_block_hash", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/transactions/poly_tx_block_hash.md", "original_file_path": "models/doc_descriptions/transactions/poly_tx_block_hash.md", "name": "poly_tx_block_hash", "block_contents": "Block hash is a unique 66-character identifier that is generate when a block is produced."}, "polygon_models.poly_tx_fee": {"unique_id": "polygon_models.poly_tx_fee", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/transactions/poly_tx_fee.md", "original_file_path": "models/doc_descriptions/transactions/poly_tx_fee.md", "name": "poly_tx_fee", "block_contents": "Amount paid to validate the transaction in MATIC."}, "polygon_models.poly_tx_json": {"unique_id": "polygon_models.poly_tx_json", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/transactions/poly_tx_json.md", "original_file_path": "models/doc_descriptions/transactions/poly_tx_json.md", "name": "poly_tx_json", "block_contents": "This JSON column contains the transaction details, including event logs."}, "polygon_models.poly_tx_input_data": {"unique_id": "polygon_models.poly_tx_input_data", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/transactions/poly_tx_input_data.md", "original_file_path": "models/doc_descriptions/transactions/poly_tx_input_data.md", "name": "poly_tx_input_data", "block_contents": "This column contains additional data for this transaction, and is commonly used as part of a contract interaction or as a message to the recipient."}, "polygon_models.poly_tx_gas_price": {"unique_id": "polygon_models.poly_tx_gas_price", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/transactions/poly_tx_gas_price.md", "original_file_path": "models/doc_descriptions/transactions/poly_tx_gas_price.md", "name": "poly_tx_gas_price", "block_contents": "Cost per unit of gas in Gwei."}, "polygon_models.poly_tx_origin_sig": {"unique_id": "polygon_models.poly_tx_origin_sig", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/transactions/poly_tx_origin_sig.md", "original_file_path": "models/doc_descriptions/transactions/poly_tx_origin_sig.md", "name": "poly_tx_origin_sig", "block_contents": "The function signature of the contract call."}, "polygon_models.poly_cumulative_gas_used": {"unique_id": "polygon_models.poly_cumulative_gas_used", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/transactions/poly_cumulative_gas_used.md", "original_file_path": "models/doc_descriptions/transactions/poly_cumulative_gas_used.md", "name": "poly_cumulative_gas_used", "block_contents": "The total amount of gas used when this transaction was executed in the block."}, "polygon_models.poly_tx_nonce": {"unique_id": "polygon_models.poly_tx_nonce", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/transactions/poly_tx_nonce.md", "original_file_path": "models/doc_descriptions/transactions/poly_tx_nonce.md", "name": "poly_tx_nonce", "block_contents": "The number of transactions sent from a given address."}, "polygon_models.poly_tx_status": {"unique_id": "polygon_models.poly_tx_status", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/transactions/poly_tx_status.md", "original_file_path": "models/doc_descriptions/transactions/poly_tx_status.md", "name": "poly_tx_status", "block_contents": "Status of the transaction."}, "polygon_models.poly_tx_table_doc": {"unique_id": "polygon_models.poly_tx_table_doc", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/transactions/poly_tx_table_doc.md", "original_file_path": "models/doc_descriptions/transactions/poly_tx_table_doc.md", "name": "poly_tx_table_doc", "block_contents": "This table contains transaction level data for the Polygon Blockchain. Each transaction will have a unique transaction hash, along with transactions fees and a MATIC value transferred when applicable. Transactions may be native MATIC transfers or interactions with contract addresses. For more information, please see [The Ethereum Organization - Transactions](https://ethereum.org/en/developers/docs/transactions/)"}, "polygon_models.poly_tx_gas_limit": {"unique_id": "polygon_models.poly_tx_gas_limit", "package_name": "polygon_models", "root_path": "/Users/atbmacbookpro/polygon-models", "path": "doc_descriptions/transactions/poly_tx_gas_limit.md", "original_file_path": "models/doc_descriptions/transactions/poly_tx_gas_limit.md", "name": "poly_tx_gas_limit", "block_contents": "Maximum amount of gas allocated for the transaction."}, "dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.2.0/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.polygon_models.bronze__blocks": ["source.polygon_models.prod.polygon_blocks"], "model.polygon_models.bronze__transactions": ["source.polygon_models.prod.polygon_txs"], "model.polygon_models.silver__transactions": ["model.polygon_models.bronze__transactions"], "model.polygon_models.silver__transfers": ["model.polygon_models.silver__logs"], "model.polygon_models.silver__logs": ["model.polygon_models.bronze__transactions"], "model.polygon_models.silver__blocks": ["model.polygon_models.bronze__blocks"], "model.polygon_models.silver__traces": ["model.polygon_models.bronze__blocks", "model.polygon_models.bronze__transactions"], "model.polygon_models.streamline__complete_blocks": ["source.polygon_models.bronze_streamline.blocks", "source.polygon_models.bronze_streamline.blocks"], "model.polygon_models._max_block_by_date": ["model.polygon_models.silver__blocks"], "model.polygon_models.streamline__blocks": [], "model.polygon_models.core__fact_transactions": ["model.polygon_models.silver__transactions"], "model.polygon_models.core__fact_token_transfers": ["model.polygon_models.silver__transfers"], "model.polygon_models.core__fact_traces": ["model.polygon_models.silver__traces"], "model.polygon_models.core__fact_blocks": ["model.polygon_models.silver__blocks"], "model.polygon_models.core__fact_event_logs": ["model.polygon_models.silver__logs"], "model.polygon_models.core__ez_matic_transfers": ["model.polygon_models.silver__traces", "model.polygon_models.silver__transactions", "source.polygon_models.ethereum.fact_hourly_token_prices"], "model.polygon_models.core__dim_labels": ["source.polygon_models.crosschain.address_labels"], "model.polygon_models.sushi__ez_lending": ["model.polygon_models.silver__logs", "model.polygon_models.silver__logs", "model.polygon_models.silver__logs", "model.polygon_models.silver__logs", "model.polygon_models.sushi__dim_kashi_pairs", "model.polygon_models.sushi__dim_kashi_pairs", "model.polygon_models.sushi__dim_kashi_pairs", "source.polygon_models.ethereum.fact_hourly_token_prices", "source.polygon_models.symbols_cross_tab.MARKET_ASSET_METADATA"], "model.polygon_models.sushi__ez_swaps": ["model.polygon_models.silver__logs", "model.polygon_models.sushi__dim_dex_pools", "model.polygon_models.sushi__dim_dex_pools", "source.polygon_models.ethereum.fact_hourly_token_prices", "source.polygon_models.symbols_cross_tab.MARKET_ASSET_METADATA"], "model.polygon_models.sushi__dim_dex_pools": ["source.polygon_models.polygon_dex_pools.SUSHI_DIM_DEX_POOLS"], "model.polygon_models.sushi__ez_borrowing": ["model.polygon_models.silver__logs", "model.polygon_models.silver__logs", "model.polygon_models.silver__logs", "model.polygon_models.silver__logs", "model.polygon_models.silver__logs", "model.polygon_models.silver__logs", "model.polygon_models.silver__logs", "model.polygon_models.silver__logs", "model.polygon_models.silver__logs", "model.polygon_models.silver__logs", "model.polygon_models.sushi__dim_kashi_pairs", "model.polygon_models.sushi__dim_kashi_pairs", "model.polygon_models.sushi__dim_kashi_pairs", "model.polygon_models.sushi__dim_kashi_pairs", "model.polygon_models.sushi__dim_kashi_pairs", "model.polygon_models.sushi__dim_kashi_pairs", "model.polygon_models.sushi__dim_kashi_pairs", "source.polygon_models.ethereum.fact_hourly_token_prices", "source.polygon_models.symbols_cross_tab.MARKET_ASSET_METADATA"], "model.polygon_models.sushi__dim_kashi_pairs": ["source.polygon_models.polygon_dex_pools.SUSHI_DIM_KASHI_PAIRS"], "seed.polygon_models.bronze__sushi_dim_dex_pools": [], "seed.polygon_models.bronze__sushi_dim_kashi_pairs": [], "operation.polygon_models.polygon_models-on-run-start-0": [], "operation.polygon_models.polygon_models-on-run-start-1": [], "operation.polygon_models.polygon_models-on-run-start-2": [], "test.polygon_models.not_null_silver__logs_BLOCK_NUMBER.f98b235d4c": ["model.polygon_models.silver__logs"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_BLOCK_NUMBER__NUMBER.73461cc432": ["model.polygon_models.silver__logs"], "test.polygon_models.not_null_silver__logs_BLOCK_TIMESTAMP.ca6209335c": ["model.polygon_models.silver__logs"], "test.polygon_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__logs_BLOCK_TIMESTAMP__day__1.79d0ca0413": ["model.polygon_models.silver__logs"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c39585c6f3": ["model.polygon_models.silver__logs"], "test.polygon_models.not_null_silver__logs_TX_HASH.18b09ee14d": ["model.polygon_models.silver__logs"], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_TX_HASH__0_xX_0_9a_fA_F_.0eee0960b6": ["model.polygon_models.silver__logs"], "test.polygon_models.not_null_silver__logs_EVENT_INDEX.b97eeb39d7": ["model.polygon_models.silver__logs"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_INDEX__NUMBER__FLOAT.d0df352178": ["model.polygon_models.silver__logs"], "test.polygon_models.not_null_silver__logs_CONTRACT_ADDRESS.b78d8c86eb": ["model.polygon_models.silver__logs"], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.28bc84b2ae": ["model.polygon_models.silver__logs"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_NAME__STRING__VARCHAR.7af2bc20cd": ["model.polygon_models.silver__logs"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_INPUTS__OBJECT.a903a96237": ["model.polygon_models.silver__logs"], "test.polygon_models.not_null_silver__logs_TOPICS.f042e94d85": ["model.polygon_models.silver__logs"], "test.polygon_models.not_null_silver__logs_DATA.c5fac5c4a4": ["model.polygon_models.silver__logs"], "test.polygon_models.not_null_silver__logs_EVENT_REMOVED.4f302d08e0": ["model.polygon_models.silver__logs"], "test.polygon_models.not_null_silver__logs__LOG_ID.8c3f196b2a": ["model.polygon_models.silver__logs"], "test.polygon_models.not_null_silver__logs_ORIGIN_FUNCTION_SIGNATURE.ed647f3e17": ["model.polygon_models.silver__logs"], "test.polygon_models.not_null_silver__logs_ORIGIN_FROM_ADDRESS.1759538d91": ["model.polygon_models.silver__logs"], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.a59d6ffc6a": ["model.polygon_models.silver__logs"], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.869407dadd": ["model.polygon_models.silver__logs"], "test.polygon_models.dbt_utils_unique_combination_of_columns_silver__logs__LOG_ID.780efa90bd": ["model.polygon_models.silver__logs"], "test.polygon_models.sequence_gaps_silver__logs_EVENT_INDEX__BLOCK_NUMBER__TX_HASH.8b3582ee4a": ["model.polygon_models.silver__logs"], "test.polygon_models.not_null_silver__traces_BLOCK_NUMBER.9dcd1525b2": ["model.polygon_models.silver__traces"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__traces_BLOCK_NUMBER__NUMBER__FLOAT.ccd2c156a6": ["model.polygon_models.silver__traces"], "test.polygon_models.not_null_silver__traces_BLOCK_TIMESTAMP.4053e07c73": ["model.polygon_models.silver__traces"], "test.polygon_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__traces_BLOCK_TIMESTAMP__day__1.0589c5d87f": ["model.polygon_models.silver__traces"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__traces_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.3ffecd9044": ["model.polygon_models.silver__traces"], "test.polygon_models.not_null_silver__traces_TX_HASH.ccbdeb5e91": ["model.polygon_models.silver__traces"], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__traces_TX_HASH__0_xX_0_9a_fA_F_.14f576932b": ["model.polygon_models.silver__traces"], "test.polygon_models.not_null_silver__traces_FROM_ADDRESS.285ef0c05b": ["model.polygon_models.silver__traces"], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__traces_FROM_ADDRESS__0_xX_0_9a_fA_F_.b404693575": ["model.polygon_models.silver__traces"], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__traces_TO_ADDRESS__0_xX_0_9a_fA_F_.3af876962e": ["model.polygon_models.silver__traces"], "test.polygon_models.not_null_silver__traces_IDENTIFIER.ee73127ec0": ["model.polygon_models.silver__traces"], "test.polygon_models.not_null_silver__traces_MATIC_VALUE.16932a2346": ["model.polygon_models.silver__traces"], "test.polygon_models.not_null_silver__traces_GAS.53d7bbcf6a": ["model.polygon_models.silver__traces"], "test.polygon_models.not_null_silver__traces_GAS_USED.eb9bf97ca1": ["model.polygon_models.silver__traces"], "test.polygon_models.dbt_utils_unique_combination_of_columns_silver__traces__CALL_ID.2854a11c5a": ["model.polygon_models.silver__traces"], "test.polygon_models.not_null_silver__blocks_BLOCK_NUMBER.3ed5bd5a97": ["model.polygon_models.silver__blocks"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_NUMBER__NUMBER__FLOAT.5e6997665c": ["model.polygon_models.silver__blocks"], "test.polygon_models.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead": ["model.polygon_models.silver__blocks"], "test.polygon_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1.3844f6e7d3": ["model.polygon_models.silver__blocks"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2a22373751": ["model.polygon_models.silver__blocks"], "test.polygon_models.not_null_silver__blocks_NETWORK.65d2a5d7b1": ["model.polygon_models.silver__blocks"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NETWORK__STRING__VARCHAR.31e2a1e5bd": ["model.polygon_models.silver__blocks"], "test.polygon_models.not_null_silver__blocks_BLOCKCHAIN.c3e6e8be96": ["model.polygon_models.silver__blocks"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCKCHAIN__STRING__VARCHAR.01a66b1dcd": ["model.polygon_models.silver__blocks"], "test.polygon_models.not_null_silver__blocks_TX_COUNT.34525b51e6": ["model.polygon_models.silver__blocks"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER__FLOAT.9486c781f5": ["model.polygon_models.silver__blocks"], "test.polygon_models.not_null_silver__blocks_DIFFICULTY.dfd6bb7310": ["model.polygon_models.silver__blocks"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_DIFFICULTY__NUMBER__FLOAT.4b5343dd2c": ["model.polygon_models.silver__blocks"], "test.polygon_models.not_null_silver__blocks_TOTAL_DIFFICULTY.64edc4b2a9": ["model.polygon_models.silver__blocks"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TOTAL_DIFFICULTY__NUMBER__FLOAT.4a0213cf40": ["model.polygon_models.silver__blocks"], "test.polygon_models.not_null_silver__blocks_EXTRA_DATA.7b7824f6ea": ["model.polygon_models.silver__blocks"], "test.polygon_models.not_null_silver__blocks_GAS_LIMIT.a66366ccf7": ["model.polygon_models.silver__blocks"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_LIMIT__NUMBER__FLOAT.c009cca74d": ["model.polygon_models.silver__blocks"], "test.polygon_models.not_null_silver__blocks_GAS_USED.637b37099a": ["model.polygon_models.silver__blocks"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_USED__NUMBER__FLOAT.bde7aa758f": ["model.polygon_models.silver__blocks"], "test.polygon_models.not_null_silver__blocks_HASH.bc44a39f94": ["model.polygon_models.silver__blocks"], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_HASH__0_xX_0_9a_fA_F_.923a822bca": ["model.polygon_models.silver__blocks"], "test.polygon_models.not_null_silver__blocks_PARENT_HASH.a17a399346": ["model.polygon_models.silver__blocks"], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_PARENT_HASH__0_xX_0_9a_fA_F_.164fb6eb16": ["model.polygon_models.silver__blocks"], "test.polygon_models.not_null_silver__blocks_MINER.c17f6cbb87": ["model.polygon_models.silver__blocks"], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_MINER__0_xX_0_9a_fA_F_.7e8cc9ca0b": ["model.polygon_models.silver__blocks"], "test.polygon_models.not_null_silver__blocks_NONCE.10c0698884": ["model.polygon_models.silver__blocks"], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_NONCE__0_xX_0_9a_fA_F_.0f55c64955": ["model.polygon_models.silver__blocks"], "test.polygon_models.not_null_silver__blocks_RECEIPTS_ROOT.cd3163505f": ["model.polygon_models.silver__blocks"], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_RECEIPTS_ROOT__0_xX_0_9a_fA_F_.6964f6dc30": ["model.polygon_models.silver__blocks"], "test.polygon_models.not_null_silver__blocks_SHA3_UNCLES.e7c903103e": ["model.polygon_models.silver__blocks"], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_SHA3_UNCLES__0_xX_0_9a_fA_F_.c74b2fa922": ["model.polygon_models.silver__blocks"], "test.polygon_models.not_null_silver__blocks_SIZE.f1fa8f466b": ["model.polygon_models.silver__blocks"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_SIZE__NUMBER.7f2a8fc982": ["model.polygon_models.silver__blocks"], "test.polygon_models.not_null_silver__blocks_BLOCK_HEADER_JSON.98268f8f2b": ["model.polygon_models.silver__blocks"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HEADER_JSON__OBJECT.1be6a88f28": ["model.polygon_models.silver__blocks"], "test.polygon_models.dbt_utils_unique_combination_of_columns_silver__blocks_BLOCK_NUMBER.58d43342ca": ["model.polygon_models.silver__blocks"], "test.polygon_models.not_null_silver__transactions_BLOCK_NUMBER.574ebe21b0": ["model.polygon_models.silver__transactions"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_NUMBER__NUMBER__FLOAT.c48e941615": ["model.polygon_models.silver__transactions"], "test.polygon_models.not_null_silver__transactions_BLOCK_TIMESTAMP.3ffe21fe8d": ["model.polygon_models.silver__transactions"], "test.polygon_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__1.cf074498fc": ["model.polygon_models.silver__transactions"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.bc42693f6e": ["model.polygon_models.silver__transactions"], "test.polygon_models.not_null_silver__transactions_TX_HASH.8a2cc32062": ["model.polygon_models.silver__transactions"], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_TX_HASH__0_xX_0_9a_fA_F_.558497d3b6": ["model.polygon_models.silver__transactions"], "test.polygon_models.not_null_silver__transactions_NONCE.3eac435cf9": ["model.polygon_models.silver__transactions"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_NONCE__NUMBER__FLOAT.e9f3267e00": ["model.polygon_models.silver__transactions"], "test.polygon_models.not_null_silver__transactions_POSITION.6be7c293c7": ["model.polygon_models.silver__transactions"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_POSITION__NUMBER.5d920e939f": ["model.polygon_models.silver__transactions"], "test.polygon_models.not_null_silver__transactions_FROM_ADDRESS.002109da43": ["model.polygon_models.silver__transactions"], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_FROM_ADDRESS__0_xX_0_9a_fA_F_.48157e7169": ["model.polygon_models.silver__transactions"], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_TO_ADDRESS__0_xX_0_9a_fA_F_.6729f77190": ["model.polygon_models.silver__transactions"], "test.polygon_models.not_null_silver__transactions_MATIC_VALUE.e723701716": ["model.polygon_models.silver__transactions"], "test.polygon_models.not_null_silver__transactions_BLOCK_HASH.2c918b73f5": ["model.polygon_models.silver__transactions"], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_BLOCK_HASH__0_xX_0_9a_fA_F_.6a7999ad31": ["model.polygon_models.silver__transactions"], "test.polygon_models.not_null_silver__transactions_GAS_PRICE.9ee195e584": ["model.polygon_models.silver__transactions"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_PRICE__NUMBER__FLOAT.7ff329f632": ["model.polygon_models.silver__transactions"], "test.polygon_models.not_null_silver__transactions_GAS_LIMIT.b5ac619228": ["model.polygon_models.silver__transactions"], "test.polygon_models.not_null_silver__transactions_INPUT_DATA.3cc998f5b1": ["model.polygon_models.silver__transactions"], "test.polygon_models.not_null_silver__transactions_STATUS.42a484ef7a": ["model.polygon_models.silver__transactions"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_set_silver__transactions_STATUS__SUCCESS__FAIL.f4150c7e34": ["model.polygon_models.silver__transactions"], "test.polygon_models.not_null_silver__transactions_GAS_USED.1c943486c0": ["model.polygon_models.silver__transactions"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_USED__NUMBER__FLOAT.5308f986d3": ["model.polygon_models.silver__transactions"], "test.polygon_models.not_null_silver__transactions_CUMULATIVE_GAS_USED.2ff9788f8f": ["model.polygon_models.silver__transactions"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_CUMULATIVE_GAS_USED__NUMBER__FLOAT.68061c4689": ["model.polygon_models.silver__transactions"], "test.polygon_models.not_null_silver__transactions_TX_FEE.f2f0cdc085": ["model.polygon_models.silver__transactions"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_FEE__NUMBER__FLOAT.c56121a801": ["model.polygon_models.silver__transactions"], "test.polygon_models.not_null_silver__transactions_EFFECTIVE_GAS_PRICE.fac733dec7": ["model.polygon_models.silver__transactions"], "test.polygon_models.not_null_silver__transactions_TX_JSON.c989b71e6a": ["model.polygon_models.silver__transactions"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_JSON__OBJECT.f6596e98ec": ["model.polygon_models.silver__transactions"], "test.polygon_models.not_null_silver__transactions_INGESTED_AT.98e6b66449": ["model.polygon_models.silver__transactions"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_INGESTED_AT__TIMESTAMP_NTZ.c716636b55": ["model.polygon_models.silver__transactions"], "test.polygon_models.not_null_silver__transactions_ORIGIN_FUNCTION_SIGNATURE.6ba6212d68": ["model.polygon_models.silver__transactions"], "test.polygon_models.dbt_utils_unique_combination_of_columns_silver__transactions_TX_HASH.c217683bc6": ["model.polygon_models.silver__transactions"], "test.polygon_models.sequence_gaps_silver__transactions_POSITION__BLOCK_NUMBER.bb18e3a49e": ["model.polygon_models.silver__transactions"], "test.polygon_models.not_null_silver__transfers_BLOCK_NUMBER.d11bbde531": ["model.polygon_models.silver__transfers"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_NUMBER__NUMBER__FLOAT.45ecdb8c94": ["model.polygon_models.silver__transfers"], "test.polygon_models.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c": ["model.polygon_models.silver__transfers"], "test.polygon_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__1.aef2ec1111": ["model.polygon_models.silver__transfers"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.4ccf9184cd": ["model.polygon_models.silver__transfers"], "test.polygon_models.not_null_silver__transfers_TX_HASH.9444c39bdc": ["model.polygon_models.silver__transfers"], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TX_HASH__0_xX_0_9a_fA_F_.f25b6d0ca1": ["model.polygon_models.silver__transfers"], "test.polygon_models.not_null_silver__transfers_CONTRACT_ADDRESS.df8cd401ef": ["model.polygon_models.silver__transfers"], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.8e89d13bed": ["model.polygon_models.silver__transfers"], "test.polygon_models.not_null_silver__transfers_FROM_ADDRESS.cc15ca835c": ["model.polygon_models.silver__transfers"], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_FROM_ADDRESS__0_xX_0_9a_fA_F_.0479073084": ["model.polygon_models.silver__transfers"], "test.polygon_models.not_null_silver__transfers_TO_ADDRESS.2ea6a02b7c": ["model.polygon_models.silver__transfers"], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TO_ADDRESS__0_xX_0_9a_fA_F_.f65ff6bdb6": ["model.polygon_models.silver__transfers"], "test.polygon_models.not_null_silver__transfers_RAW_AMOUNT.c53823d6c7": ["model.polygon_models.silver__transfers"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_RAW_AMOUNT__NUMBER__FLOAT.eb70e6172e": ["model.polygon_models.silver__transfers"], "test.polygon_models.not_null_silver__transfers__LOG_ID.29bb073a40": ["model.polygon_models.silver__transfers"], "test.polygon_models.not_null_silver__transfers_ORIGIN_FUNCTION_SIGNATURE.c1c149f732": ["model.polygon_models.silver__transfers"], "test.polygon_models.not_null_silver__transfers_ORIGIN_FROM_ADDRESS.30ffa7f127": ["model.polygon_models.silver__transfers"], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.fb311c6cec": ["model.polygon_models.silver__transfers"], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.81fe3d170a": ["model.polygon_models.silver__transfers"], "test.polygon_models.dbt_utils_unique_combination_of_columns_silver__transfers__LOG_ID.3ebab76726": ["model.polygon_models.silver__transfers"], "test.polygon_models.not_null_core__dim_labels_BLOCKCHAIN.a4e09054d7": ["model.polygon_models.core__dim_labels"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_BLOCKCHAIN__polygon.5e6c2c1b9f": ["model.polygon_models.core__dim_labels"], "test.polygon_models.not_null_core__dim_labels_CREATOR.0c77d5749c": ["model.polygon_models.core__dim_labels"], "test.polygon_models.not_null_core__dim_labels_ADDRESS.ddf35f62af": ["model.polygon_models.core__dim_labels"], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_core__dim_labels_ADDRESS__0_xX_0_9a_fA_F_.52c2534d6a": ["model.polygon_models.core__dim_labels"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_ADDRESS_NAME__STRING__VARCHAR.7747aa45d1": ["model.polygon_models.core__dim_labels"], "test.polygon_models.not_null_core__dim_labels_LABEL_TYPE.65b0f6f1ed": ["model.polygon_models.core__dim_labels"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin__project.145ec1d947": ["model.polygon_models.core__dim_labels"], "test.polygon_models.not_null_core__dim_labels_LABEL_SUBTYPE.556a65235c": ["model.polygon_models.core__dim_labels"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_LABEL_SUBTYPE__STRING__VARCHAR.80b827b7f5": ["model.polygon_models.core__dim_labels"], "test.polygon_models.not_null_core__dim_labels_PROJECT_NAME.484353cecc": ["model.polygon_models.core__dim_labels"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_PROJECT_NAME__STRING__VARCHAR.c5aaaed300": ["model.polygon_models.core__dim_labels"], "test.polygon_models.dbt_utils_unique_combination_of_columns_core__dim_labels_BLOCKCHAIN__CREATOR__ADDRESS.de325ffec9": ["model.polygon_models.core__dim_labels"], "test.polygon_models.not_null_sushi__ez_lending_BLOCK_NUMBER.7191bdf706": ["model.polygon_models.sushi__ez_lending"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_lending_BLOCK_NUMBER__NUMBER__FLOAT.35c6b5d227": ["model.polygon_models.sushi__ez_lending"], "test.polygon_models.not_null_sushi__ez_lending_BLOCK_TIMESTAMP.47c8a01531": ["model.polygon_models.sushi__ez_lending"], "test.polygon_models.dbt_expectations_expect_row_values_to_have_recent_data_sushi__ez_lending_BLOCK_TIMESTAMP__day__7.71e49e375e": ["model.polygon_models.sushi__ez_lending"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_lending_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.93cce89aaf": ["model.polygon_models.sushi__ez_lending"], "test.polygon_models.not_null_sushi__ez_lending_TX_HASH.3c471bed51": ["model.polygon_models.sushi__ez_lending"], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_lending_TX_HASH__0_xX_0_9a_fA_F_.fb7184c78a": ["model.polygon_models.sushi__ez_lending"], "test.polygon_models.not_null_sushi__ez_lending_LENDING_POOL_ADDRESS.343619b86f": ["model.polygon_models.sushi__ez_lending"], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_lending_LENDING_POOL_ADDRESS__0_xX_0_9a_fA_F_.3ccd0511f9": ["model.polygon_models.sushi__ez_lending"], "test.polygon_models.not_null_sushi__ez_lending_AMOUNT.d0ca35e1b9": ["model.polygon_models.sushi__ez_lending"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_lending_AMOUNT__NUMBER__FLOAT.f5513895b6": ["model.polygon_models.sushi__ez_lending"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_lending_AMOUNT_USD__NUMBER__FLOAT.010574c5b1": ["model.polygon_models.sushi__ez_lending"], "test.polygon_models.not_null_sushi__ez_lending_ASSET.92156a57ed": ["model.polygon_models.sushi__ez_lending"], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_lending_ASSET__0_xX_0_9a_fA_F_.8a7dd8b676": ["model.polygon_models.sushi__ez_lending"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_lending_SYMBOL__STRING__VARCHAR.dcace84af9": ["model.polygon_models.sushi__ez_lending"], "test.polygon_models.not_null_sushi__ez_lending_DEPOSITOR.9f9196dce7": ["model.polygon_models.sushi__ez_lending"], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_lending_DEPOSITOR__0_xX_0_9a_fA_F_.560921e0f1": ["model.polygon_models.sushi__ez_lending"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_lending_EVENT_INDEX__NUMBER__FLOAT.64324e3895": ["model.polygon_models.sushi__ez_lending"], "test.polygon_models.not_null_sushi__ez_lending__LOG_ID.aeb399324a": ["model.polygon_models.sushi__ez_lending"], "test.polygon_models.not_null_sushi__ez_lending_ORIGIN_FROM_ADDRESS.0a279cef72": ["model.polygon_models.sushi__ez_lending"], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_lending_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.3b31561bc6": ["model.polygon_models.sushi__ez_lending"], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_lending_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.3e3828617a": ["model.polygon_models.sushi__ez_lending"], "test.polygon_models.not_null_sushi__ez_lending_LENDING_POOL.1cc2cec6c9": ["model.polygon_models.sushi__ez_lending"], "test.polygon_models.not_null_sushi__ez_lending_LENDER_IS_A_CONTRACT.39fe049559": ["model.polygon_models.sushi__ez_lending"], "test.polygon_models.dbt_utils_unique_combination_of_columns_sushi__ez_lending__LOG_ID.9fb554f90f": ["model.polygon_models.sushi__ez_lending"], "test.polygon_models.not_null_sushi__ez_swaps_BLOCK_NUMBER.4da3b3d654": ["model.polygon_models.sushi__ez_swaps"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_BLOCK_NUMBER__NUMBER__FLOAT.7b69aae0de": ["model.polygon_models.sushi__ez_swaps"], "test.polygon_models.not_null_sushi__ez_swaps_BLOCK_TIMESTAMP.64d0de4b09": ["model.polygon_models.sushi__ez_swaps"], "test.polygon_models.dbt_expectations_expect_row_values_to_have_recent_data_sushi__ez_swaps_BLOCK_TIMESTAMP__day__1.ccd4b95299": ["model.polygon_models.sushi__ez_swaps"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c09d40c178": ["model.polygon_models.sushi__ez_swaps"], "test.polygon_models.not_null_sushi__ez_swaps_TX_HASH.5c71b07498": ["model.polygon_models.sushi__ez_swaps"], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TX_HASH__0_xX_0_9a_fA_F_.15d478c09c": ["model.polygon_models.sushi__ez_swaps"], "test.polygon_models.not_null_sushi__ez_swaps_CONTRACT_ADDRESS.f4cd976e06": ["model.polygon_models.sushi__ez_swaps"], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.d6ed59e98b": ["model.polygon_models.sushi__ez_swaps"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_EVENT_NAME__STRING__VARCHAR.9c08c6c888": ["model.polygon_models.sushi__ez_swaps"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_IN__NUMBER__FLOAT.ce483aa368": ["model.polygon_models.sushi__ez_swaps"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_OUT__NUMBER__FLOAT.6028b5385f": ["model.polygon_models.sushi__ez_swaps"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_IN_USD__NUMBER__FLOAT.9a8b1e0480": ["model.polygon_models.sushi__ez_swaps"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT.a061b70981": ["model.polygon_models.sushi__ez_swaps"], "test.polygon_models.not_null_sushi__ez_swaps_TOKEN_IN.8093c41dbe": ["model.polygon_models.sushi__ez_swaps"], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TOKEN_IN__0_xX_0_9a_fA_F_.ae96a38071": ["model.polygon_models.sushi__ez_swaps"], "test.polygon_models.not_null_sushi__ez_swaps_TOKEN_OUT.68f3f9aac2": ["model.polygon_models.sushi__ez_swaps"], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_.a99f33851e": ["model.polygon_models.sushi__ez_swaps"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_SYMBOL_IN__STRING__VARCHAR.b1aea9c82f": ["model.polygon_models.sushi__ez_swaps"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_SYMBOL_OUT__STRING__VARCHAR.9fa7d6e04c": ["model.polygon_models.sushi__ez_swaps"], "test.polygon_models.not_null_sushi__ez_swaps_SENDER.b76baa207c": ["model.polygon_models.sushi__ez_swaps"], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_SENDER__0_xX_0_9a_fA_F_.b8de01d1db": ["model.polygon_models.sushi__ez_swaps"], "test.polygon_models.not_null_sushi__ez_swaps_TX_TO.1c512c542a": ["model.polygon_models.sushi__ez_swaps"], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TX_TO__0_xX_0_9a_fA_F_.81a6e2ad45": ["model.polygon_models.sushi__ez_swaps"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_PLATFORM__STRING__VARCHAR.55fbd4c7c1": ["model.polygon_models.sushi__ez_swaps"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_EVENT_INDEX__NUMBER__FLOAT.311b76dea2": ["model.polygon_models.sushi__ez_swaps"], "test.polygon_models.not_null_sushi__ez_swaps__LOG_ID.3bc8eb295f": ["model.polygon_models.sushi__ez_swaps"], "test.polygon_models.not_null_sushi__ez_swaps_ORIGIN_FUNCTION_SIGNATURE.681d6adb74": ["model.polygon_models.sushi__ez_swaps"], "test.polygon_models.not_null_sushi__ez_swaps_ORIGIN_FROM_ADDRESS.128c7fd237": ["model.polygon_models.sushi__ez_swaps"], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.d35c7fe495": ["model.polygon_models.sushi__ez_swaps"], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.dd5a907c68": ["model.polygon_models.sushi__ez_swaps"], "test.polygon_models.dbt_utils_unique_combination_of_columns_sushi__ez_swaps__LOG_ID.cebe0de5a1": ["model.polygon_models.sushi__ez_swaps"], "test.polygon_models.not_null_sushi__ez_borrowing_BLOCK_NUMBER.76a0fc6bc9": ["model.polygon_models.sushi__ez_borrowing"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_borrowing_BLOCK_NUMBER__NUMBER__FLOAT.e546629920": ["model.polygon_models.sushi__ez_borrowing"], "test.polygon_models.not_null_sushi__ez_borrowing_BLOCK_TIMESTAMP.3829c4c2c4": ["model.polygon_models.sushi__ez_borrowing"], "test.polygon_models.dbt_expectations_expect_row_values_to_have_recent_data_sushi__ez_borrowing_BLOCK_TIMESTAMP__day__7.9e13292154": ["model.polygon_models.sushi__ez_borrowing"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_borrowing_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2b4d3c83c9": ["model.polygon_models.sushi__ez_borrowing"], "test.polygon_models.not_null_sushi__ez_borrowing_TX_HASH.eeaf313cd8": ["model.polygon_models.sushi__ez_borrowing"], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_borrowing_TX_HASH__0_xX_0_9a_fA_F_.e3f190eb04": ["model.polygon_models.sushi__ez_borrowing"], "test.polygon_models.not_null_sushi__ez_borrowing_LENDING_POOL_ADDRESS.6ea7d50567": ["model.polygon_models.sushi__ez_borrowing"], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_borrowing_LENDING_POOL_ADDRESS__0_xX_0_9a_fA_F_.11e77397a2": ["model.polygon_models.sushi__ez_borrowing"], "test.polygon_models.not_null_sushi__ez_borrowing_AMOUNT.490bdfdbcb": ["model.polygon_models.sushi__ez_borrowing"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_borrowing_AMOUNT__NUMBER__FLOAT.28b1f9641c": ["model.polygon_models.sushi__ez_borrowing"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_borrowing_AMOUNT_USD__NUMBER__FLOAT.5a6575a29d": ["model.polygon_models.sushi__ez_borrowing"], "test.polygon_models.not_null_sushi__ez_borrowing_ASSET.963aa5a1aa": ["model.polygon_models.sushi__ez_borrowing"], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_borrowing_ASSET__0_xX_0_9a_fA_F_.73483a63df": ["model.polygon_models.sushi__ez_borrowing"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_borrowing_SYMBOL__STRING__VARCHAR.9b060d1d35": ["model.polygon_models.sushi__ez_borrowing"], "test.polygon_models.not_null_sushi__ez_borrowing_Borrower.1f484a738a": ["model.polygon_models.sushi__ez_borrowing"], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_borrowing_Borrower__0_xX_0_9a_fA_F_.cf22d8c187": ["model.polygon_models.sushi__ez_borrowing"], "test.polygon_models.not_null_sushi__ez_borrowing__LOG_ID.2c8a148cfa": ["model.polygon_models.sushi__ez_borrowing"], "test.polygon_models.not_null_sushi__ez_borrowing_ORIGIN_FROM_ADDRESS.f47465af36": ["model.polygon_models.sushi__ez_borrowing"], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_borrowing_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.c43ca75daa": ["model.polygon_models.sushi__ez_borrowing"], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_borrowing_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.35e38583ac": ["model.polygon_models.sushi__ez_borrowing"], "test.polygon_models.not_null_sushi__ez_borrowing_LENDING_POOL.7144d8c199": ["model.polygon_models.sushi__ez_borrowing"], "test.polygon_models.not_null_sushi__ez_borrowing_BORROWER_IS_A_CONTRACT.386fbbb5c7": ["model.polygon_models.sushi__ez_borrowing"], "test.polygon_models.dbt_utils_unique_combination_of_columns_sushi__ez_borrowing__LOG_ID.c1053ad43e": ["model.polygon_models.sushi__ez_borrowing"], "model.polygon_models.streamline__transactions_realtime": ["model.polygon_models._max_block_by_date", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_transactions"], "model.polygon_models.streamline__complete_transactions": ["source.polygon_models.bronze_streamline.transactions", "source.polygon_models.bronze_streamline.transactions"], "model.polygon_models.streamline__transactions_history": ["model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__complete_transactions"], "model.polygon_models.streamline__blocks_realtime": ["model.polygon_models._max_block_by_date", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_blocks"], "model.polygon_models.streamline__blocks_history": ["model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__complete_blocks"], "model.polygon_models.silver__contract_proxies": ["model.polygon_models.silver__logs"], "test.polygon_models.dbt_utils_unique_combination_of_columns_silver__contract_proxies_ID.3ac7fb13cd": ["model.polygon_models.silver__contract_proxies"], "model.polygon_models.silver__relevant_abi_contracts": ["model.polygon_models.silver__logs", "model.polygon_models.silver__logs"], "model.polygon_models.silver__relevant_token_contracts": ["model.polygon_models.silver__logs"], "model.polygon_models.core__dim_contracts": ["model.polygon_models.silver__contracts"], "model.polygon_models.silver__contract_abis": ["source.polygon_models.bronze_api.contract_abis"], "test.polygon_models.dbt_utils_unique_combination_of_columns_silver__relevant_token_contracts_CONTRACT_ADDRESS.24bd782cb8": ["model.polygon_models.silver__relevant_token_contracts"], "test.polygon_models.dbt_utils_unique_combination_of_columns_silver__relevant_abi_contracts_CONTRACT_ADDRESS.13614bb275": ["model.polygon_models.silver__relevant_abi_contracts"], "test.polygon_models.dbt_utils_unique_combination_of_columns_silver__contract_abis_CONTRACT_ADDRESS.d4ac45a2a1": ["model.polygon_models.silver__contract_abis"], "model.polygon_models.silver__contracts": ["source.polygon_models.bronze_api.token_reads"], "test.polygon_models.not_null_silver__contracts_CONTRACT_ADDRESS.18b93ee6d5": ["model.polygon_models.silver__contracts"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_CONTRACT_ADDRESS__STRING__VARCHAR.a501d61489": ["model.polygon_models.silver__contracts"], "test.polygon_models.not_null_silver__contracts__INSERTED_TIMESTAMP.5ad8bc1f2a": ["model.polygon_models.silver__contracts"], "test.polygon_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__contracts__INSERTED_TIMESTAMP__day__2.c0b3d27a1b": ["model.polygon_models.silver__contracts"], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.3d97d7eb14": ["model.polygon_models.silver__contracts"], "test.polygon_models.dbt_utils_unique_combination_of_columns_silver__contracts_CONTRACT_ADDRESS.f84f93870c": ["model.polygon_models.silver__contracts"], "source.polygon_models.prod.polygon_blocks": [], "source.polygon_models.prod.polygon_txs": [], "source.polygon_models.crosschain.address_labels": [], "source.polygon_models.symbols_cross_tab.MARKET_ASSET_METADATA": [], "source.polygon_models.polygon_dex_pools.SUSHI_DIM_DEX_POOLS": [], "source.polygon_models.polygon_dex_pools.SUSHI_DIM_KASHI_PAIRS": [], "source.polygon_models.ethereum.fact_hourly_token_prices": [], "source.polygon_models.ethereum.DIM_CONTRACTS": [], "source.polygon_models.ethereum.DIM_DEX_LIQUIDITY_POOLS": [], "source.polygon_models.bronze_streamline.blocks": [], "source.polygon_models.bronze_streamline.transactions": [], "source.polygon_models.bronze_api.contract_abis": [], "source.polygon_models.bronze_api.token_reads": []}, "child_map": {"model.polygon_models.bronze__blocks": ["model.polygon_models.silver__blocks", "model.polygon_models.silver__traces"], "model.polygon_models.bronze__transactions": ["model.polygon_models.silver__logs", "model.polygon_models.silver__traces", "model.polygon_models.silver__transactions"], "model.polygon_models.silver__transactions": ["model.polygon_models.core__ez_matic_transfers", "model.polygon_models.core__fact_transactions", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_set_silver__transactions_STATUS__SUCCESS__FAIL.f4150c7e34", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_NUMBER__NUMBER__FLOAT.c48e941615", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.bc42693f6e", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_CUMULATIVE_GAS_USED__NUMBER__FLOAT.68061c4689", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_PRICE__NUMBER__FLOAT.7ff329f632", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_USED__NUMBER__FLOAT.5308f986d3", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_INGESTED_AT__TIMESTAMP_NTZ.c716636b55", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_NONCE__NUMBER__FLOAT.e9f3267e00", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_POSITION__NUMBER.5d920e939f", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_FEE__NUMBER__FLOAT.c56121a801", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_JSON__OBJECT.f6596e98ec", "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_BLOCK_HASH__0_xX_0_9a_fA_F_.6a7999ad31", "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_FROM_ADDRESS__0_xX_0_9a_fA_F_.48157e7169", "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_TO_ADDRESS__0_xX_0_9a_fA_F_.6729f77190", "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_TX_HASH__0_xX_0_9a_fA_F_.558497d3b6", "test.polygon_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__1.cf074498fc", "test.polygon_models.dbt_utils_unique_combination_of_columns_silver__transactions_TX_HASH.c217683bc6", "test.polygon_models.not_null_silver__transactions_BLOCK_HASH.2c918b73f5", "test.polygon_models.not_null_silver__transactions_BLOCK_NUMBER.574ebe21b0", "test.polygon_models.not_null_silver__transactions_BLOCK_TIMESTAMP.3ffe21fe8d", "test.polygon_models.not_null_silver__transactions_CUMULATIVE_GAS_USED.2ff9788f8f", "test.polygon_models.not_null_silver__transactions_EFFECTIVE_GAS_PRICE.fac733dec7", "test.polygon_models.not_null_silver__transactions_FROM_ADDRESS.002109da43", "test.polygon_models.not_null_silver__transactions_GAS_LIMIT.b5ac619228", "test.polygon_models.not_null_silver__transactions_GAS_PRICE.9ee195e584", "test.polygon_models.not_null_silver__transactions_GAS_USED.1c943486c0", "test.polygon_models.not_null_silver__transactions_INGESTED_AT.98e6b66449", "test.polygon_models.not_null_silver__transactions_INPUT_DATA.3cc998f5b1", "test.polygon_models.not_null_silver__transactions_MATIC_VALUE.e723701716", "test.polygon_models.not_null_silver__transactions_NONCE.3eac435cf9", "test.polygon_models.not_null_silver__transactions_ORIGIN_FUNCTION_SIGNATURE.6ba6212d68", "test.polygon_models.not_null_silver__transactions_POSITION.6be7c293c7", "test.polygon_models.not_null_silver__transactions_STATUS.42a484ef7a", "test.polygon_models.not_null_silver__transactions_TX_FEE.f2f0cdc085", "test.polygon_models.not_null_silver__transactions_TX_HASH.8a2cc32062", "test.polygon_models.not_null_silver__transactions_TX_JSON.c989b71e6a", "test.polygon_models.sequence_gaps_silver__transactions_POSITION__BLOCK_NUMBER.bb18e3a49e"], "model.polygon_models.silver__transfers": ["model.polygon_models.core__fact_token_transfers", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_NUMBER__NUMBER__FLOAT.45ecdb8c94", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.4ccf9184cd", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_RAW_AMOUNT__NUMBER__FLOAT.eb70e6172e", "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.8e89d13bed", "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_FROM_ADDRESS__0_xX_0_9a_fA_F_.0479073084", "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.fb311c6cec", "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.81fe3d170a", "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TO_ADDRESS__0_xX_0_9a_fA_F_.f65ff6bdb6", "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TX_HASH__0_xX_0_9a_fA_F_.f25b6d0ca1", "test.polygon_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__1.aef2ec1111", "test.polygon_models.dbt_utils_unique_combination_of_columns_silver__transfers__LOG_ID.3ebab76726", "test.polygon_models.not_null_silver__transfers_BLOCK_NUMBER.d11bbde531", "test.polygon_models.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c", "test.polygon_models.not_null_silver__transfers_CONTRACT_ADDRESS.df8cd401ef", "test.polygon_models.not_null_silver__transfers_FROM_ADDRESS.cc15ca835c", "test.polygon_models.not_null_silver__transfers_ORIGIN_FROM_ADDRESS.30ffa7f127", "test.polygon_models.not_null_silver__transfers_ORIGIN_FUNCTION_SIGNATURE.c1c149f732", "test.polygon_models.not_null_silver__transfers_RAW_AMOUNT.c53823d6c7", "test.polygon_models.not_null_silver__transfers_TO_ADDRESS.2ea6a02b7c", "test.polygon_models.not_null_silver__transfers_TX_HASH.9444c39bdc", "test.polygon_models.not_null_silver__transfers__LOG_ID.29bb073a40"], "model.polygon_models.silver__logs": ["model.polygon_models.core__fact_event_logs", "model.polygon_models.silver__contract_proxies", "model.polygon_models.silver__relevant_abi_contracts", "model.polygon_models.silver__relevant_abi_contracts", "model.polygon_models.silver__relevant_token_contracts", "model.polygon_models.silver__transfers", "model.polygon_models.sushi__ez_borrowing", "model.polygon_models.sushi__ez_borrowing", "model.polygon_models.sushi__ez_borrowing", "model.polygon_models.sushi__ez_borrowing", "model.polygon_models.sushi__ez_borrowing", "model.polygon_models.sushi__ez_borrowing", "model.polygon_models.sushi__ez_borrowing", "model.polygon_models.sushi__ez_borrowing", "model.polygon_models.sushi__ez_borrowing", "model.polygon_models.sushi__ez_borrowing", "model.polygon_models.sushi__ez_lending", "model.polygon_models.sushi__ez_lending", "model.polygon_models.sushi__ez_lending", "model.polygon_models.sushi__ez_lending", "model.polygon_models.sushi__ez_swaps", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_BLOCK_NUMBER__NUMBER.73461cc432", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c39585c6f3", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_INDEX__NUMBER__FLOAT.d0df352178", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_INPUTS__OBJECT.a903a96237", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_NAME__STRING__VARCHAR.7af2bc20cd", "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.28bc84b2ae", "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.a59d6ffc6a", "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.869407dadd", "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_TX_HASH__0_xX_0_9a_fA_F_.0eee0960b6", "test.polygon_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__logs_BLOCK_TIMESTAMP__day__1.79d0ca0413", "test.polygon_models.dbt_utils_unique_combination_of_columns_silver__logs__LOG_ID.780efa90bd", "test.polygon_models.not_null_silver__logs_BLOCK_NUMBER.f98b235d4c", "test.polygon_models.not_null_silver__logs_BLOCK_TIMESTAMP.ca6209335c", "test.polygon_models.not_null_silver__logs_CONTRACT_ADDRESS.b78d8c86eb", "test.polygon_models.not_null_silver__logs_DATA.c5fac5c4a4", "test.polygon_models.not_null_silver__logs_EVENT_INDEX.b97eeb39d7", "test.polygon_models.not_null_silver__logs_EVENT_REMOVED.4f302d08e0", "test.polygon_models.not_null_silver__logs_ORIGIN_FROM_ADDRESS.1759538d91", "test.polygon_models.not_null_silver__logs_ORIGIN_FUNCTION_SIGNATURE.ed647f3e17", "test.polygon_models.not_null_silver__logs_TOPICS.f042e94d85", "test.polygon_models.not_null_silver__logs_TX_HASH.18b09ee14d", "test.polygon_models.not_null_silver__logs__LOG_ID.8c3f196b2a", "test.polygon_models.sequence_gaps_silver__logs_EVENT_INDEX__BLOCK_NUMBER__TX_HASH.8b3582ee4a"], "model.polygon_models.silver__blocks": ["model.polygon_models._max_block_by_date", "model.polygon_models.core__fact_blocks", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCKCHAIN__STRING__VARCHAR.01a66b1dcd", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HEADER_JSON__OBJECT.1be6a88f28", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_NUMBER__NUMBER__FLOAT.5e6997665c", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2a22373751", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_DIFFICULTY__NUMBER__FLOAT.4b5343dd2c", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_LIMIT__NUMBER__FLOAT.c009cca74d", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_USED__NUMBER__FLOAT.bde7aa758f", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NETWORK__STRING__VARCHAR.31e2a1e5bd", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_SIZE__NUMBER.7f2a8fc982", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TOTAL_DIFFICULTY__NUMBER__FLOAT.4a0213cf40", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER__FLOAT.9486c781f5", "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_HASH__0_xX_0_9a_fA_F_.923a822bca", "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_MINER__0_xX_0_9a_fA_F_.7e8cc9ca0b", "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_NONCE__0_xX_0_9a_fA_F_.0f55c64955", "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_PARENT_HASH__0_xX_0_9a_fA_F_.164fb6eb16", "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_RECEIPTS_ROOT__0_xX_0_9a_fA_F_.6964f6dc30", "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_SHA3_UNCLES__0_xX_0_9a_fA_F_.c74b2fa922", "test.polygon_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1.3844f6e7d3", "test.polygon_models.dbt_utils_unique_combination_of_columns_silver__blocks_BLOCK_NUMBER.58d43342ca", "test.polygon_models.not_null_silver__blocks_BLOCKCHAIN.c3e6e8be96", "test.polygon_models.not_null_silver__blocks_BLOCK_HEADER_JSON.98268f8f2b", "test.polygon_models.not_null_silver__blocks_BLOCK_NUMBER.3ed5bd5a97", "test.polygon_models.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead", "test.polygon_models.not_null_silver__blocks_DIFFICULTY.dfd6bb7310", "test.polygon_models.not_null_silver__blocks_EXTRA_DATA.7b7824f6ea", "test.polygon_models.not_null_silver__blocks_GAS_LIMIT.a66366ccf7", "test.polygon_models.not_null_silver__blocks_GAS_USED.637b37099a", "test.polygon_models.not_null_silver__blocks_HASH.bc44a39f94", "test.polygon_models.not_null_silver__blocks_MINER.c17f6cbb87", "test.polygon_models.not_null_silver__blocks_NETWORK.65d2a5d7b1", "test.polygon_models.not_null_silver__blocks_NONCE.10c0698884", "test.polygon_models.not_null_silver__blocks_PARENT_HASH.a17a399346", "test.polygon_models.not_null_silver__blocks_RECEIPTS_ROOT.cd3163505f", "test.polygon_models.not_null_silver__blocks_SHA3_UNCLES.e7c903103e", "test.polygon_models.not_null_silver__blocks_SIZE.f1fa8f466b", "test.polygon_models.not_null_silver__blocks_TOTAL_DIFFICULTY.64edc4b2a9", "test.polygon_models.not_null_silver__blocks_TX_COUNT.34525b51e6"], "model.polygon_models.silver__traces": ["model.polygon_models.core__ez_matic_transfers", "model.polygon_models.core__fact_traces", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__traces_BLOCK_NUMBER__NUMBER__FLOAT.ccd2c156a6", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__traces_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.3ffecd9044", "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__traces_FROM_ADDRESS__0_xX_0_9a_fA_F_.b404693575", "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__traces_TO_ADDRESS__0_xX_0_9a_fA_F_.3af876962e", "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__traces_TX_HASH__0_xX_0_9a_fA_F_.14f576932b", "test.polygon_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__traces_BLOCK_TIMESTAMP__day__1.0589c5d87f", "test.polygon_models.dbt_utils_unique_combination_of_columns_silver__traces__CALL_ID.2854a11c5a", "test.polygon_models.not_null_silver__traces_BLOCK_NUMBER.9dcd1525b2", "test.polygon_models.not_null_silver__traces_BLOCK_TIMESTAMP.4053e07c73", "test.polygon_models.not_null_silver__traces_FROM_ADDRESS.285ef0c05b", "test.polygon_models.not_null_silver__traces_GAS.53d7bbcf6a", "test.polygon_models.not_null_silver__traces_GAS_USED.eb9bf97ca1", "test.polygon_models.not_null_silver__traces_IDENTIFIER.ee73127ec0", "test.polygon_models.not_null_silver__traces_MATIC_VALUE.16932a2346", "test.polygon_models.not_null_silver__traces_TX_HASH.ccbdeb5e91"], "model.polygon_models.streamline__complete_blocks": ["model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_realtime"], "model.polygon_models._max_block_by_date": ["model.polygon_models.streamline__blocks_realtime", "model.polygon_models.streamline__transactions_realtime"], "model.polygon_models.streamline__blocks": ["model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_history", "model.polygon_models.streamline__blocks_realtime", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_realtime"], "model.polygon_models.core__fact_transactions": [], "model.polygon_models.core__fact_token_transfers": [], "model.polygon_models.core__fact_traces": [], "model.polygon_models.core__fact_blocks": [], "model.polygon_models.core__fact_event_logs": [], "model.polygon_models.core__ez_matic_transfers": [], "model.polygon_models.core__dim_labels": ["test.polygon_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_BLOCKCHAIN__polygon.5e6c2c1b9f", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin__project.145ec1d947", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_ADDRESS_NAME__STRING__VARCHAR.7747aa45d1", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_LABEL_SUBTYPE__STRING__VARCHAR.80b827b7f5", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_PROJECT_NAME__STRING__VARCHAR.c5aaaed300", "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_core__dim_labels_ADDRESS__0_xX_0_9a_fA_F_.52c2534d6a", "test.polygon_models.dbt_utils_unique_combination_of_columns_core__dim_labels_BLOCKCHAIN__CREATOR__ADDRESS.de325ffec9", "test.polygon_models.not_null_core__dim_labels_ADDRESS.ddf35f62af", "test.polygon_models.not_null_core__dim_labels_BLOCKCHAIN.a4e09054d7", "test.polygon_models.not_null_core__dim_labels_CREATOR.0c77d5749c", "test.polygon_models.not_null_core__dim_labels_LABEL_SUBTYPE.556a65235c", "test.polygon_models.not_null_core__dim_labels_LABEL_TYPE.65b0f6f1ed", "test.polygon_models.not_null_core__dim_labels_PROJECT_NAME.484353cecc"], "model.polygon_models.sushi__ez_lending": ["test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_lending_AMOUNT_USD__NUMBER__FLOAT.010574c5b1", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_lending_AMOUNT__NUMBER__FLOAT.f5513895b6", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_lending_BLOCK_NUMBER__NUMBER__FLOAT.35c6b5d227", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_lending_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.93cce89aaf", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_lending_EVENT_INDEX__NUMBER__FLOAT.64324e3895", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_lending_SYMBOL__STRING__VARCHAR.dcace84af9", "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_lending_ASSET__0_xX_0_9a_fA_F_.8a7dd8b676", "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_lending_DEPOSITOR__0_xX_0_9a_fA_F_.560921e0f1", "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_lending_LENDING_POOL_ADDRESS__0_xX_0_9a_fA_F_.3ccd0511f9", "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_lending_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.3b31561bc6", "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_lending_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.3e3828617a", "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_lending_TX_HASH__0_xX_0_9a_fA_F_.fb7184c78a", "test.polygon_models.dbt_expectations_expect_row_values_to_have_recent_data_sushi__ez_lending_BLOCK_TIMESTAMP__day__7.71e49e375e", "test.polygon_models.dbt_utils_unique_combination_of_columns_sushi__ez_lending__LOG_ID.9fb554f90f", "test.polygon_models.not_null_sushi__ez_lending_AMOUNT.d0ca35e1b9", "test.polygon_models.not_null_sushi__ez_lending_ASSET.92156a57ed", "test.polygon_models.not_null_sushi__ez_lending_BLOCK_NUMBER.7191bdf706", "test.polygon_models.not_null_sushi__ez_lending_BLOCK_TIMESTAMP.47c8a01531", "test.polygon_models.not_null_sushi__ez_lending_DEPOSITOR.9f9196dce7", "test.polygon_models.not_null_sushi__ez_lending_LENDER_IS_A_CONTRACT.39fe049559", "test.polygon_models.not_null_sushi__ez_lending_LENDING_POOL.1cc2cec6c9", "test.polygon_models.not_null_sushi__ez_lending_LENDING_POOL_ADDRESS.343619b86f", "test.polygon_models.not_null_sushi__ez_lending_ORIGIN_FROM_ADDRESS.0a279cef72", "test.polygon_models.not_null_sushi__ez_lending_TX_HASH.3c471bed51", "test.polygon_models.not_null_sushi__ez_lending__LOG_ID.aeb399324a"], "model.polygon_models.sushi__ez_swaps": ["test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_IN_USD__NUMBER__FLOAT.9a8b1e0480", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_IN__NUMBER__FLOAT.ce483aa368", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT.a061b70981", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_OUT__NUMBER__FLOAT.6028b5385f", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_BLOCK_NUMBER__NUMBER__FLOAT.7b69aae0de", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c09d40c178", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_EVENT_INDEX__NUMBER__FLOAT.311b76dea2", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_EVENT_NAME__STRING__VARCHAR.9c08c6c888", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_PLATFORM__STRING__VARCHAR.55fbd4c7c1", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_SYMBOL_IN__STRING__VARCHAR.b1aea9c82f", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_SYMBOL_OUT__STRING__VARCHAR.9fa7d6e04c", "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.d6ed59e98b", "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.d35c7fe495", "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.dd5a907c68", "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_SENDER__0_xX_0_9a_fA_F_.b8de01d1db", "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TOKEN_IN__0_xX_0_9a_fA_F_.ae96a38071", "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_.a99f33851e", "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TX_HASH__0_xX_0_9a_fA_F_.15d478c09c", "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TX_TO__0_xX_0_9a_fA_F_.81a6e2ad45", "test.polygon_models.dbt_expectations_expect_row_values_to_have_recent_data_sushi__ez_swaps_BLOCK_TIMESTAMP__day__1.ccd4b95299", "test.polygon_models.dbt_utils_unique_combination_of_columns_sushi__ez_swaps__LOG_ID.cebe0de5a1", "test.polygon_models.not_null_sushi__ez_swaps_BLOCK_NUMBER.4da3b3d654", "test.polygon_models.not_null_sushi__ez_swaps_BLOCK_TIMESTAMP.64d0de4b09", "test.polygon_models.not_null_sushi__ez_swaps_CONTRACT_ADDRESS.f4cd976e06", "test.polygon_models.not_null_sushi__ez_swaps_ORIGIN_FROM_ADDRESS.128c7fd237", "test.polygon_models.not_null_sushi__ez_swaps_ORIGIN_FUNCTION_SIGNATURE.681d6adb74", "test.polygon_models.not_null_sushi__ez_swaps_SENDER.b76baa207c", "test.polygon_models.not_null_sushi__ez_swaps_TOKEN_IN.8093c41dbe", "test.polygon_models.not_null_sushi__ez_swaps_TOKEN_OUT.68f3f9aac2", "test.polygon_models.not_null_sushi__ez_swaps_TX_HASH.5c71b07498", "test.polygon_models.not_null_sushi__ez_swaps_TX_TO.1c512c542a", "test.polygon_models.not_null_sushi__ez_swaps__LOG_ID.3bc8eb295f"], "model.polygon_models.sushi__dim_dex_pools": ["model.polygon_models.sushi__ez_swaps", "model.polygon_models.sushi__ez_swaps"], "model.polygon_models.sushi__ez_borrowing": ["test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_borrowing_AMOUNT_USD__NUMBER__FLOAT.5a6575a29d", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_borrowing_AMOUNT__NUMBER__FLOAT.28b1f9641c", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_borrowing_BLOCK_NUMBER__NUMBER__FLOAT.e546629920", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_borrowing_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2b4d3c83c9", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_borrowing_SYMBOL__STRING__VARCHAR.9b060d1d35", "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_borrowing_ASSET__0_xX_0_9a_fA_F_.73483a63df", "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_borrowing_Borrower__0_xX_0_9a_fA_F_.cf22d8c187", "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_borrowing_LENDING_POOL_ADDRESS__0_xX_0_9a_fA_F_.11e77397a2", "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_borrowing_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.c43ca75daa", "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_borrowing_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.35e38583ac", "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_borrowing_TX_HASH__0_xX_0_9a_fA_F_.e3f190eb04", "test.polygon_models.dbt_expectations_expect_row_values_to_have_recent_data_sushi__ez_borrowing_BLOCK_TIMESTAMP__day__7.9e13292154", "test.polygon_models.dbt_utils_unique_combination_of_columns_sushi__ez_borrowing__LOG_ID.c1053ad43e", "test.polygon_models.not_null_sushi__ez_borrowing_AMOUNT.490bdfdbcb", "test.polygon_models.not_null_sushi__ez_borrowing_ASSET.963aa5a1aa", "test.polygon_models.not_null_sushi__ez_borrowing_BLOCK_NUMBER.76a0fc6bc9", "test.polygon_models.not_null_sushi__ez_borrowing_BLOCK_TIMESTAMP.3829c4c2c4", "test.polygon_models.not_null_sushi__ez_borrowing_BORROWER_IS_A_CONTRACT.386fbbb5c7", "test.polygon_models.not_null_sushi__ez_borrowing_Borrower.1f484a738a", "test.polygon_models.not_null_sushi__ez_borrowing_LENDING_POOL.7144d8c199", "test.polygon_models.not_null_sushi__ez_borrowing_LENDING_POOL_ADDRESS.6ea7d50567", "test.polygon_models.not_null_sushi__ez_borrowing_ORIGIN_FROM_ADDRESS.f47465af36", "test.polygon_models.not_null_sushi__ez_borrowing_TX_HASH.eeaf313cd8", "test.polygon_models.not_null_sushi__ez_borrowing__LOG_ID.2c8a148cfa"], "model.polygon_models.sushi__dim_kashi_pairs": ["model.polygon_models.sushi__ez_borrowing", "model.polygon_models.sushi__ez_borrowing", "model.polygon_models.sushi__ez_borrowing", "model.polygon_models.sushi__ez_borrowing", "model.polygon_models.sushi__ez_borrowing", "model.polygon_models.sushi__ez_borrowing", "model.polygon_models.sushi__ez_borrowing", "model.polygon_models.sushi__ez_lending", "model.polygon_models.sushi__ez_lending", "model.polygon_models.sushi__ez_lending"], "seed.polygon_models.bronze__sushi_dim_dex_pools": [], "seed.polygon_models.bronze__sushi_dim_kashi_pairs": [], "operation.polygon_models.polygon_models-on-run-start-0": [], "operation.polygon_models.polygon_models-on-run-start-1": [], "operation.polygon_models.polygon_models-on-run-start-2": [], "test.polygon_models.not_null_silver__logs_BLOCK_NUMBER.f98b235d4c": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_BLOCK_NUMBER__NUMBER.73461cc432": [], "test.polygon_models.not_null_silver__logs_BLOCK_TIMESTAMP.ca6209335c": [], "test.polygon_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__logs_BLOCK_TIMESTAMP__day__1.79d0ca0413": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c39585c6f3": [], "test.polygon_models.not_null_silver__logs_TX_HASH.18b09ee14d": [], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_TX_HASH__0_xX_0_9a_fA_F_.0eee0960b6": [], "test.polygon_models.not_null_silver__logs_EVENT_INDEX.b97eeb39d7": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_INDEX__NUMBER__FLOAT.d0df352178": [], "test.polygon_models.not_null_silver__logs_CONTRACT_ADDRESS.b78d8c86eb": [], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.28bc84b2ae": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_NAME__STRING__VARCHAR.7af2bc20cd": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_INPUTS__OBJECT.a903a96237": [], "test.polygon_models.not_null_silver__logs_TOPICS.f042e94d85": [], "test.polygon_models.not_null_silver__logs_DATA.c5fac5c4a4": [], "test.polygon_models.not_null_silver__logs_EVENT_REMOVED.4f302d08e0": [], "test.polygon_models.not_null_silver__logs__LOG_ID.8c3f196b2a": [], "test.polygon_models.not_null_silver__logs_ORIGIN_FUNCTION_SIGNATURE.ed647f3e17": [], "test.polygon_models.not_null_silver__logs_ORIGIN_FROM_ADDRESS.1759538d91": [], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.a59d6ffc6a": [], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.869407dadd": [], "test.polygon_models.dbt_utils_unique_combination_of_columns_silver__logs__LOG_ID.780efa90bd": [], "test.polygon_models.sequence_gaps_silver__logs_EVENT_INDEX__BLOCK_NUMBER__TX_HASH.8b3582ee4a": [], "test.polygon_models.not_null_silver__traces_BLOCK_NUMBER.9dcd1525b2": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__traces_BLOCK_NUMBER__NUMBER__FLOAT.ccd2c156a6": [], "test.polygon_models.not_null_silver__traces_BLOCK_TIMESTAMP.4053e07c73": [], "test.polygon_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__traces_BLOCK_TIMESTAMP__day__1.0589c5d87f": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__traces_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.3ffecd9044": [], "test.polygon_models.not_null_silver__traces_TX_HASH.ccbdeb5e91": [], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__traces_TX_HASH__0_xX_0_9a_fA_F_.14f576932b": [], "test.polygon_models.not_null_silver__traces_FROM_ADDRESS.285ef0c05b": [], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__traces_FROM_ADDRESS__0_xX_0_9a_fA_F_.b404693575": [], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__traces_TO_ADDRESS__0_xX_0_9a_fA_F_.3af876962e": [], "test.polygon_models.not_null_silver__traces_IDENTIFIER.ee73127ec0": [], "test.polygon_models.not_null_silver__traces_MATIC_VALUE.16932a2346": [], "test.polygon_models.not_null_silver__traces_GAS.53d7bbcf6a": [], "test.polygon_models.not_null_silver__traces_GAS_USED.eb9bf97ca1": [], "test.polygon_models.dbt_utils_unique_combination_of_columns_silver__traces__CALL_ID.2854a11c5a": [], "test.polygon_models.not_null_silver__blocks_BLOCK_NUMBER.3ed5bd5a97": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_NUMBER__NUMBER__FLOAT.5e6997665c": [], "test.polygon_models.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead": [], "test.polygon_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1.3844f6e7d3": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2a22373751": [], "test.polygon_models.not_null_silver__blocks_NETWORK.65d2a5d7b1": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NETWORK__STRING__VARCHAR.31e2a1e5bd": [], "test.polygon_models.not_null_silver__blocks_BLOCKCHAIN.c3e6e8be96": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCKCHAIN__STRING__VARCHAR.01a66b1dcd": [], "test.polygon_models.not_null_silver__blocks_TX_COUNT.34525b51e6": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER__FLOAT.9486c781f5": [], "test.polygon_models.not_null_silver__blocks_DIFFICULTY.dfd6bb7310": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_DIFFICULTY__NUMBER__FLOAT.4b5343dd2c": [], "test.polygon_models.not_null_silver__blocks_TOTAL_DIFFICULTY.64edc4b2a9": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TOTAL_DIFFICULTY__NUMBER__FLOAT.4a0213cf40": [], "test.polygon_models.not_null_silver__blocks_EXTRA_DATA.7b7824f6ea": [], "test.polygon_models.not_null_silver__blocks_GAS_LIMIT.a66366ccf7": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_LIMIT__NUMBER__FLOAT.c009cca74d": [], "test.polygon_models.not_null_silver__blocks_GAS_USED.637b37099a": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_USED__NUMBER__FLOAT.bde7aa758f": [], "test.polygon_models.not_null_silver__blocks_HASH.bc44a39f94": [], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_HASH__0_xX_0_9a_fA_F_.923a822bca": [], "test.polygon_models.not_null_silver__blocks_PARENT_HASH.a17a399346": [], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_PARENT_HASH__0_xX_0_9a_fA_F_.164fb6eb16": [], "test.polygon_models.not_null_silver__blocks_MINER.c17f6cbb87": [], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_MINER__0_xX_0_9a_fA_F_.7e8cc9ca0b": [], "test.polygon_models.not_null_silver__blocks_NONCE.10c0698884": [], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_NONCE__0_xX_0_9a_fA_F_.0f55c64955": [], "test.polygon_models.not_null_silver__blocks_RECEIPTS_ROOT.cd3163505f": [], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_RECEIPTS_ROOT__0_xX_0_9a_fA_F_.6964f6dc30": [], "test.polygon_models.not_null_silver__blocks_SHA3_UNCLES.e7c903103e": [], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_SHA3_UNCLES__0_xX_0_9a_fA_F_.c74b2fa922": [], "test.polygon_models.not_null_silver__blocks_SIZE.f1fa8f466b": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_SIZE__NUMBER.7f2a8fc982": [], "test.polygon_models.not_null_silver__blocks_BLOCK_HEADER_JSON.98268f8f2b": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HEADER_JSON__OBJECT.1be6a88f28": [], "test.polygon_models.dbt_utils_unique_combination_of_columns_silver__blocks_BLOCK_NUMBER.58d43342ca": [], "test.polygon_models.not_null_silver__transactions_BLOCK_NUMBER.574ebe21b0": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_NUMBER__NUMBER__FLOAT.c48e941615": [], "test.polygon_models.not_null_silver__transactions_BLOCK_TIMESTAMP.3ffe21fe8d": [], "test.polygon_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__1.cf074498fc": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.bc42693f6e": [], "test.polygon_models.not_null_silver__transactions_TX_HASH.8a2cc32062": [], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_TX_HASH__0_xX_0_9a_fA_F_.558497d3b6": [], "test.polygon_models.not_null_silver__transactions_NONCE.3eac435cf9": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_NONCE__NUMBER__FLOAT.e9f3267e00": [], "test.polygon_models.not_null_silver__transactions_POSITION.6be7c293c7": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_POSITION__NUMBER.5d920e939f": [], "test.polygon_models.not_null_silver__transactions_FROM_ADDRESS.002109da43": [], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_FROM_ADDRESS__0_xX_0_9a_fA_F_.48157e7169": [], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_TO_ADDRESS__0_xX_0_9a_fA_F_.6729f77190": [], "test.polygon_models.not_null_silver__transactions_MATIC_VALUE.e723701716": [], "test.polygon_models.not_null_silver__transactions_BLOCK_HASH.2c918b73f5": [], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_BLOCK_HASH__0_xX_0_9a_fA_F_.6a7999ad31": [], "test.polygon_models.not_null_silver__transactions_GAS_PRICE.9ee195e584": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_PRICE__NUMBER__FLOAT.7ff329f632": [], "test.polygon_models.not_null_silver__transactions_GAS_LIMIT.b5ac619228": [], "test.polygon_models.not_null_silver__transactions_INPUT_DATA.3cc998f5b1": [], "test.polygon_models.not_null_silver__transactions_STATUS.42a484ef7a": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_set_silver__transactions_STATUS__SUCCESS__FAIL.f4150c7e34": [], "test.polygon_models.not_null_silver__transactions_GAS_USED.1c943486c0": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_USED__NUMBER__FLOAT.5308f986d3": [], "test.polygon_models.not_null_silver__transactions_CUMULATIVE_GAS_USED.2ff9788f8f": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_CUMULATIVE_GAS_USED__NUMBER__FLOAT.68061c4689": [], "test.polygon_models.not_null_silver__transactions_TX_FEE.f2f0cdc085": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_FEE__NUMBER__FLOAT.c56121a801": [], "test.polygon_models.not_null_silver__transactions_EFFECTIVE_GAS_PRICE.fac733dec7": [], "test.polygon_models.not_null_silver__transactions_TX_JSON.c989b71e6a": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_JSON__OBJECT.f6596e98ec": [], "test.polygon_models.not_null_silver__transactions_INGESTED_AT.98e6b66449": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_INGESTED_AT__TIMESTAMP_NTZ.c716636b55": [], "test.polygon_models.not_null_silver__transactions_ORIGIN_FUNCTION_SIGNATURE.6ba6212d68": [], "test.polygon_models.dbt_utils_unique_combination_of_columns_silver__transactions_TX_HASH.c217683bc6": [], "test.polygon_models.sequence_gaps_silver__transactions_POSITION__BLOCK_NUMBER.bb18e3a49e": [], "test.polygon_models.not_null_silver__transfers_BLOCK_NUMBER.d11bbde531": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_NUMBER__NUMBER__FLOAT.45ecdb8c94": [], "test.polygon_models.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c": [], "test.polygon_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__1.aef2ec1111": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.4ccf9184cd": [], "test.polygon_models.not_null_silver__transfers_TX_HASH.9444c39bdc": [], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TX_HASH__0_xX_0_9a_fA_F_.f25b6d0ca1": [], "test.polygon_models.not_null_silver__transfers_CONTRACT_ADDRESS.df8cd401ef": [], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.8e89d13bed": [], "test.polygon_models.not_null_silver__transfers_FROM_ADDRESS.cc15ca835c": [], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_FROM_ADDRESS__0_xX_0_9a_fA_F_.0479073084": [], "test.polygon_models.not_null_silver__transfers_TO_ADDRESS.2ea6a02b7c": [], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TO_ADDRESS__0_xX_0_9a_fA_F_.f65ff6bdb6": [], "test.polygon_models.not_null_silver__transfers_RAW_AMOUNT.c53823d6c7": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_RAW_AMOUNT__NUMBER__FLOAT.eb70e6172e": [], "test.polygon_models.not_null_silver__transfers__LOG_ID.29bb073a40": [], "test.polygon_models.not_null_silver__transfers_ORIGIN_FUNCTION_SIGNATURE.c1c149f732": [], "test.polygon_models.not_null_silver__transfers_ORIGIN_FROM_ADDRESS.30ffa7f127": [], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.fb311c6cec": [], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.81fe3d170a": [], "test.polygon_models.dbt_utils_unique_combination_of_columns_silver__transfers__LOG_ID.3ebab76726": [], "test.polygon_models.not_null_core__dim_labels_BLOCKCHAIN.a4e09054d7": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_BLOCKCHAIN__polygon.5e6c2c1b9f": [], "test.polygon_models.not_null_core__dim_labels_CREATOR.0c77d5749c": [], "test.polygon_models.not_null_core__dim_labels_ADDRESS.ddf35f62af": [], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_core__dim_labels_ADDRESS__0_xX_0_9a_fA_F_.52c2534d6a": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_ADDRESS_NAME__STRING__VARCHAR.7747aa45d1": [], "test.polygon_models.not_null_core__dim_labels_LABEL_TYPE.65b0f6f1ed": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin__project.145ec1d947": [], "test.polygon_models.not_null_core__dim_labels_LABEL_SUBTYPE.556a65235c": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_LABEL_SUBTYPE__STRING__VARCHAR.80b827b7f5": [], "test.polygon_models.not_null_core__dim_labels_PROJECT_NAME.484353cecc": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_PROJECT_NAME__STRING__VARCHAR.c5aaaed300": [], "test.polygon_models.dbt_utils_unique_combination_of_columns_core__dim_labels_BLOCKCHAIN__CREATOR__ADDRESS.de325ffec9": [], "test.polygon_models.not_null_sushi__ez_lending_BLOCK_NUMBER.7191bdf706": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_lending_BLOCK_NUMBER__NUMBER__FLOAT.35c6b5d227": [], "test.polygon_models.not_null_sushi__ez_lending_BLOCK_TIMESTAMP.47c8a01531": [], "test.polygon_models.dbt_expectations_expect_row_values_to_have_recent_data_sushi__ez_lending_BLOCK_TIMESTAMP__day__7.71e49e375e": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_lending_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.93cce89aaf": [], "test.polygon_models.not_null_sushi__ez_lending_TX_HASH.3c471bed51": [], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_lending_TX_HASH__0_xX_0_9a_fA_F_.fb7184c78a": [], "test.polygon_models.not_null_sushi__ez_lending_LENDING_POOL_ADDRESS.343619b86f": [], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_lending_LENDING_POOL_ADDRESS__0_xX_0_9a_fA_F_.3ccd0511f9": [], "test.polygon_models.not_null_sushi__ez_lending_AMOUNT.d0ca35e1b9": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_lending_AMOUNT__NUMBER__FLOAT.f5513895b6": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_lending_AMOUNT_USD__NUMBER__FLOAT.010574c5b1": [], "test.polygon_models.not_null_sushi__ez_lending_ASSET.92156a57ed": [], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_lending_ASSET__0_xX_0_9a_fA_F_.8a7dd8b676": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_lending_SYMBOL__STRING__VARCHAR.dcace84af9": [], "test.polygon_models.not_null_sushi__ez_lending_DEPOSITOR.9f9196dce7": [], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_lending_DEPOSITOR__0_xX_0_9a_fA_F_.560921e0f1": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_lending_EVENT_INDEX__NUMBER__FLOAT.64324e3895": [], "test.polygon_models.not_null_sushi__ez_lending__LOG_ID.aeb399324a": [], "test.polygon_models.not_null_sushi__ez_lending_ORIGIN_FROM_ADDRESS.0a279cef72": [], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_lending_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.3b31561bc6": [], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_lending_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.3e3828617a": [], "test.polygon_models.not_null_sushi__ez_lending_LENDING_POOL.1cc2cec6c9": [], "test.polygon_models.not_null_sushi__ez_lending_LENDER_IS_A_CONTRACT.39fe049559": [], "test.polygon_models.dbt_utils_unique_combination_of_columns_sushi__ez_lending__LOG_ID.9fb554f90f": [], "test.polygon_models.not_null_sushi__ez_swaps_BLOCK_NUMBER.4da3b3d654": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_BLOCK_NUMBER__NUMBER__FLOAT.7b69aae0de": [], "test.polygon_models.not_null_sushi__ez_swaps_BLOCK_TIMESTAMP.64d0de4b09": [], "test.polygon_models.dbt_expectations_expect_row_values_to_have_recent_data_sushi__ez_swaps_BLOCK_TIMESTAMP__day__1.ccd4b95299": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c09d40c178": [], "test.polygon_models.not_null_sushi__ez_swaps_TX_HASH.5c71b07498": [], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TX_HASH__0_xX_0_9a_fA_F_.15d478c09c": [], "test.polygon_models.not_null_sushi__ez_swaps_CONTRACT_ADDRESS.f4cd976e06": [], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.d6ed59e98b": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_EVENT_NAME__STRING__VARCHAR.9c08c6c888": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_IN__NUMBER__FLOAT.ce483aa368": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_OUT__NUMBER__FLOAT.6028b5385f": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_IN_USD__NUMBER__FLOAT.9a8b1e0480": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT.a061b70981": [], "test.polygon_models.not_null_sushi__ez_swaps_TOKEN_IN.8093c41dbe": [], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TOKEN_IN__0_xX_0_9a_fA_F_.ae96a38071": [], "test.polygon_models.not_null_sushi__ez_swaps_TOKEN_OUT.68f3f9aac2": [], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_.a99f33851e": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_SYMBOL_IN__STRING__VARCHAR.b1aea9c82f": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_SYMBOL_OUT__STRING__VARCHAR.9fa7d6e04c": [], "test.polygon_models.not_null_sushi__ez_swaps_SENDER.b76baa207c": [], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_SENDER__0_xX_0_9a_fA_F_.b8de01d1db": [], "test.polygon_models.not_null_sushi__ez_swaps_TX_TO.1c512c542a": [], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TX_TO__0_xX_0_9a_fA_F_.81a6e2ad45": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_PLATFORM__STRING__VARCHAR.55fbd4c7c1": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_EVENT_INDEX__NUMBER__FLOAT.311b76dea2": [], "test.polygon_models.not_null_sushi__ez_swaps__LOG_ID.3bc8eb295f": [], "test.polygon_models.not_null_sushi__ez_swaps_ORIGIN_FUNCTION_SIGNATURE.681d6adb74": [], "test.polygon_models.not_null_sushi__ez_swaps_ORIGIN_FROM_ADDRESS.128c7fd237": [], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.d35c7fe495": [], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.dd5a907c68": [], "test.polygon_models.dbt_utils_unique_combination_of_columns_sushi__ez_swaps__LOG_ID.cebe0de5a1": [], "test.polygon_models.not_null_sushi__ez_borrowing_BLOCK_NUMBER.76a0fc6bc9": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_borrowing_BLOCK_NUMBER__NUMBER__FLOAT.e546629920": [], "test.polygon_models.not_null_sushi__ez_borrowing_BLOCK_TIMESTAMP.3829c4c2c4": [], "test.polygon_models.dbt_expectations_expect_row_values_to_have_recent_data_sushi__ez_borrowing_BLOCK_TIMESTAMP__day__7.9e13292154": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_borrowing_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2b4d3c83c9": [], "test.polygon_models.not_null_sushi__ez_borrowing_TX_HASH.eeaf313cd8": [], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_borrowing_TX_HASH__0_xX_0_9a_fA_F_.e3f190eb04": [], "test.polygon_models.not_null_sushi__ez_borrowing_LENDING_POOL_ADDRESS.6ea7d50567": [], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_borrowing_LENDING_POOL_ADDRESS__0_xX_0_9a_fA_F_.11e77397a2": [], "test.polygon_models.not_null_sushi__ez_borrowing_AMOUNT.490bdfdbcb": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_borrowing_AMOUNT__NUMBER__FLOAT.28b1f9641c": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_borrowing_AMOUNT_USD__NUMBER__FLOAT.5a6575a29d": [], "test.polygon_models.not_null_sushi__ez_borrowing_ASSET.963aa5a1aa": [], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_borrowing_ASSET__0_xX_0_9a_fA_F_.73483a63df": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_borrowing_SYMBOL__STRING__VARCHAR.9b060d1d35": [], "test.polygon_models.not_null_sushi__ez_borrowing_Borrower.1f484a738a": [], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_borrowing_Borrower__0_xX_0_9a_fA_F_.cf22d8c187": [], "test.polygon_models.not_null_sushi__ez_borrowing__LOG_ID.2c8a148cfa": [], "test.polygon_models.not_null_sushi__ez_borrowing_ORIGIN_FROM_ADDRESS.f47465af36": [], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_borrowing_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.c43ca75daa": [], "test.polygon_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_borrowing_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.35e38583ac": [], "test.polygon_models.not_null_sushi__ez_borrowing_LENDING_POOL.7144d8c199": [], "test.polygon_models.not_null_sushi__ez_borrowing_BORROWER_IS_A_CONTRACT.386fbbb5c7": [], "test.polygon_models.dbt_utils_unique_combination_of_columns_sushi__ez_borrowing__LOG_ID.c1053ad43e": [], "model.polygon_models.streamline__transactions_realtime": [], "model.polygon_models.streamline__complete_transactions": ["model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_history", "model.polygon_models.streamline__transactions_realtime"], "model.polygon_models.streamline__transactions_history": [], "model.polygon_models.streamline__blocks_realtime": [], "model.polygon_models.streamline__blocks_history": [], "model.polygon_models.silver__contract_proxies": ["test.polygon_models.dbt_utils_unique_combination_of_columns_silver__contract_proxies_ID.3ac7fb13cd"], "test.polygon_models.dbt_utils_unique_combination_of_columns_silver__contract_proxies_ID.3ac7fb13cd": [], "model.polygon_models.silver__relevant_abi_contracts": ["test.polygon_models.dbt_utils_unique_combination_of_columns_silver__relevant_abi_contracts_CONTRACT_ADDRESS.13614bb275"], "model.polygon_models.silver__relevant_token_contracts": ["test.polygon_models.dbt_utils_unique_combination_of_columns_silver__relevant_token_contracts_CONTRACT_ADDRESS.24bd782cb8"], "model.polygon_models.core__dim_contracts": [], "model.polygon_models.silver__contract_abis": ["test.polygon_models.dbt_utils_unique_combination_of_columns_silver__contract_abis_CONTRACT_ADDRESS.d4ac45a2a1"], "test.polygon_models.dbt_utils_unique_combination_of_columns_silver__relevant_token_contracts_CONTRACT_ADDRESS.24bd782cb8": [], "test.polygon_models.dbt_utils_unique_combination_of_columns_silver__relevant_abi_contracts_CONTRACT_ADDRESS.13614bb275": [], "test.polygon_models.dbt_utils_unique_combination_of_columns_silver__contract_abis_CONTRACT_ADDRESS.d4ac45a2a1": [], "model.polygon_models.silver__contracts": ["model.polygon_models.core__dim_contracts", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_CONTRACT_ADDRESS__STRING__VARCHAR.a501d61489", "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.3d97d7eb14", "test.polygon_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__contracts__INSERTED_TIMESTAMP__day__2.c0b3d27a1b", "test.polygon_models.dbt_utils_unique_combination_of_columns_silver__contracts_CONTRACT_ADDRESS.f84f93870c", "test.polygon_models.not_null_silver__contracts_CONTRACT_ADDRESS.18b93ee6d5", "test.polygon_models.not_null_silver__contracts__INSERTED_TIMESTAMP.5ad8bc1f2a"], "test.polygon_models.not_null_silver__contracts_CONTRACT_ADDRESS.18b93ee6d5": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_CONTRACT_ADDRESS__STRING__VARCHAR.a501d61489": [], "test.polygon_models.not_null_silver__contracts__INSERTED_TIMESTAMP.5ad8bc1f2a": [], "test.polygon_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__contracts__INSERTED_TIMESTAMP__day__2.c0b3d27a1b": [], "test.polygon_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts__INSERTED_TIMESTAMP__TIMESTAMP_NTZ.3d97d7eb14": [], "test.polygon_models.dbt_utils_unique_combination_of_columns_silver__contracts_CONTRACT_ADDRESS.f84f93870c": [], "source.polygon_models.prod.polygon_blocks": ["model.polygon_models.bronze__blocks"], "source.polygon_models.prod.polygon_txs": ["model.polygon_models.bronze__transactions"], "source.polygon_models.crosschain.address_labels": ["model.polygon_models.core__dim_labels"], "source.polygon_models.symbols_cross_tab.MARKET_ASSET_METADATA": ["model.polygon_models.sushi__ez_borrowing", "model.polygon_models.sushi__ez_lending", "model.polygon_models.sushi__ez_swaps"], "source.polygon_models.polygon_dex_pools.SUSHI_DIM_DEX_POOLS": ["model.polygon_models.sushi__dim_dex_pools"], "source.polygon_models.polygon_dex_pools.SUSHI_DIM_KASHI_PAIRS": ["model.polygon_models.sushi__dim_kashi_pairs"], "source.polygon_models.ethereum.fact_hourly_token_prices": ["model.polygon_models.core__ez_matic_transfers", "model.polygon_models.sushi__ez_borrowing", "model.polygon_models.sushi__ez_lending", "model.polygon_models.sushi__ez_swaps"], "source.polygon_models.ethereum.DIM_CONTRACTS": [], "source.polygon_models.ethereum.DIM_DEX_LIQUIDITY_POOLS": [], "source.polygon_models.bronze_streamline.blocks": ["model.polygon_models.streamline__complete_blocks", "model.polygon_models.streamline__complete_blocks"], "source.polygon_models.bronze_streamline.transactions": ["model.polygon_models.streamline__complete_transactions", "model.polygon_models.streamline__complete_transactions"], "source.polygon_models.bronze_api.contract_abis": ["model.polygon_models.silver__contract_abis"], "source.polygon_models.bronze_api.token_reads": ["model.polygon_models.silver__contracts"]}}